/* tslint:disable */
/* eslint-disable */
/**
 * neatpallet application
 * Proyecto API encargado de ser la parte Backend de la aplicaci√≥n web neatpallet
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: agusjar@hotmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Archivo
 */
export interface Archivo {
    /**
     * 
     * @type {number}
     * @memberof Archivo
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof Archivo
     */
    'empresaId': number;
    /**
     * 
     * @type {number}
     * @memberof Archivo
     */
    'tipoArchivoId'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof Archivo
     */
    'nombre'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Archivo
     */
    'url'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Archivo
     */
    'descripcion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Archivo
     */
    'tabla'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Archivo
     */
    'idTabla'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof Archivo
     */
    'pantalla'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Archivo
     */
    'orden'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof Archivo
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Archivo
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Archivo
     */
    'usuCreacion'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof Archivo
     */
    'usuModificacion'?: number | null;
}
/**
 * 
 * @export
 * @interface ArchivoFilter
 */
export interface ArchivoFilter {
    /**
     * 
     * @type {number}
     * @memberof ArchivoFilter
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof ArchivoFilter
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof ArchivoFilter
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof ArchivoFilter
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {object | Set<string>}
     * @memberof ArchivoFilter
     */
    'fields'?: object | Set<string>;
}
/**
 * 
 * @export
 * @interface ArchivoFilter1
 */
export interface ArchivoFilter1 {
    /**
     * 
     * @type {number}
     * @memberof ArchivoFilter1
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof ArchivoFilter1
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof ArchivoFilter1
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof ArchivoFilter1
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof ArchivoFilter1
     */
    'where'?: { [key: string]: object; };
    /**
     * 
     * @type {object | Set<string>}
     * @memberof ArchivoFilter1
     */
    'fields'?: object | Set<string>;
}
/**
 * (tsType: Partial<Archivo>, schemaOptions: { partial: true })
 * @export
 * @interface ArchivoPartial
 */
export interface ArchivoPartial {
    /**
     * 
     * @type {number}
     * @memberof ArchivoPartial
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof ArchivoPartial
     */
    'empresaId'?: number;
    /**
     * 
     * @type {number}
     * @memberof ArchivoPartial
     */
    'tipoArchivoId'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ArchivoPartial
     */
    'nombre'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ArchivoPartial
     */
    'url'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ArchivoPartial
     */
    'descripcion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ArchivoPartial
     */
    'tabla'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ArchivoPartial
     */
    'idTabla'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ArchivoPartial
     */
    'pantalla'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ArchivoPartial
     */
    'orden'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ArchivoPartial
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ArchivoPartial
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ArchivoPartial
     */
    'usuCreacion'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof ArchivoPartial
     */
    'usuModificacion'?: number | null;
}
/**
 * (tsType: ArchivoWithRelations, schemaOptions: { includeRelations: true })
 * @export
 * @interface ArchivoWithRelations
 */
export interface ArchivoWithRelations {
    /**
     * 
     * @type {number}
     * @memberof ArchivoWithRelations
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof ArchivoWithRelations
     */
    'empresaId': number;
    /**
     * 
     * @type {number}
     * @memberof ArchivoWithRelations
     */
    'tipoArchivoId'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ArchivoWithRelations
     */
    'nombre'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ArchivoWithRelations
     */
    'url'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ArchivoWithRelations
     */
    'descripcion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ArchivoWithRelations
     */
    'tabla'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ArchivoWithRelations
     */
    'idTabla'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ArchivoWithRelations
     */
    'pantalla'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ArchivoWithRelations
     */
    'orden'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ArchivoWithRelations
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ArchivoWithRelations
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ArchivoWithRelations
     */
    'usuCreacion'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof ArchivoWithRelations
     */
    'usuModificacion'?: number | null;
}
/**
 * 
 * @export
 * @interface Empresa
 */
export interface Empresa {
    /**
     * 
     * @type {number}
     * @memberof Empresa
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Empresa
     */
    'codigo'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Empresa
     */
    'nombre'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Empresa
     */
    'descripcion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Empresa
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Empresa
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Empresa
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Empresa
     */
    'usuCreacion'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof Empresa
     */
    'usuModificacion'?: number | null;
}
/**
 * 
 * @export
 * @interface EmpresaFilter
 */
export interface EmpresaFilter {
    /**
     * 
     * @type {number}
     * @memberof EmpresaFilter
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof EmpresaFilter
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof EmpresaFilter
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof EmpresaFilter
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {object | Set<string>}
     * @memberof EmpresaFilter
     */
    'fields'?: object | Set<string>;
}
/**
 * 
 * @export
 * @interface EmpresaFilter1
 */
export interface EmpresaFilter1 {
    /**
     * 
     * @type {number}
     * @memberof EmpresaFilter1
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof EmpresaFilter1
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof EmpresaFilter1
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof EmpresaFilter1
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof EmpresaFilter1
     */
    'where'?: { [key: string]: object; };
    /**
     * 
     * @type {object | Set<string>}
     * @memberof EmpresaFilter1
     */
    'fields'?: object | Set<string>;
}
/**
 * (tsType: Partial<Empresa>, schemaOptions: { partial: true })
 * @export
 * @interface EmpresaPartial
 */
export interface EmpresaPartial {
    /**
     * 
     * @type {number}
     * @memberof EmpresaPartial
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof EmpresaPartial
     */
    'codigo'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EmpresaPartial
     */
    'nombre'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EmpresaPartial
     */
    'descripcion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EmpresaPartial
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EmpresaPartial
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EmpresaPartial
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof EmpresaPartial
     */
    'usuCreacion'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof EmpresaPartial
     */
    'usuModificacion'?: number | null;
}
/**
 * (tsType: EmpresaWithRelations, schemaOptions: { includeRelations: true })
 * @export
 * @interface EmpresaWithRelations
 */
export interface EmpresaWithRelations {
    /**
     * 
     * @type {number}
     * @memberof EmpresaWithRelations
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof EmpresaWithRelations
     */
    'codigo'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EmpresaWithRelations
     */
    'nombre'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EmpresaWithRelations
     */
    'descripcion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EmpresaWithRelations
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EmpresaWithRelations
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EmpresaWithRelations
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof EmpresaWithRelations
     */
    'usuCreacion'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof EmpresaWithRelations
     */
    'usuModificacion'?: number | null;
}
/**
 * 
 * @export
 * @interface Idioma
 */
export interface Idioma {
    /**
     * 
     * @type {number}
     * @memberof Idioma
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Idioma
     */
    'iso'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Idioma
     */
    'nombre'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Idioma
     */
    'activoSn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Idioma
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Idioma
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Idioma
     */
    'usuCreacion'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof Idioma
     */
    'usuModificacion'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof Idioma
     */
    'fechaInactivo'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Idioma
     */
    'usuInactivo'?: number | null;
}
/**
 * 
 * @export
 * @interface IdiomaFilter
 */
export interface IdiomaFilter {
    /**
     * 
     * @type {number}
     * @memberof IdiomaFilter
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof IdiomaFilter
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof IdiomaFilter
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof IdiomaFilter
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {object | Set<string>}
     * @memberof IdiomaFilter
     */
    'fields'?: object | Set<string>;
}
/**
 * 
 * @export
 * @interface IdiomaFilter1
 */
export interface IdiomaFilter1 {
    /**
     * 
     * @type {number}
     * @memberof IdiomaFilter1
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof IdiomaFilter1
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof IdiomaFilter1
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof IdiomaFilter1
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof IdiomaFilter1
     */
    'where'?: { [key: string]: object; };
    /**
     * 
     * @type {object | Set<string>}
     * @memberof IdiomaFilter1
     */
    'fields'?: object | Set<string>;
}
/**
 * (tsType: Partial<Idioma>, schemaOptions: { partial: true })
 * @export
 * @interface IdiomaPartial
 */
export interface IdiomaPartial {
    /**
     * 
     * @type {number}
     * @memberof IdiomaPartial
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof IdiomaPartial
     */
    'iso'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof IdiomaPartial
     */
    'nombre'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof IdiomaPartial
     */
    'activoSn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof IdiomaPartial
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof IdiomaPartial
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof IdiomaPartial
     */
    'usuCreacion'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof IdiomaPartial
     */
    'usuModificacion'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof IdiomaPartial
     */
    'fechaInactivo'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof IdiomaPartial
     */
    'usuInactivo'?: number | null;
}
/**
 * (tsType: IdiomaWithRelations, schemaOptions: { includeRelations: true })
 * @export
 * @interface IdiomaWithRelations
 */
export interface IdiomaWithRelations {
    /**
     * 
     * @type {number}
     * @memberof IdiomaWithRelations
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof IdiomaWithRelations
     */
    'iso'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof IdiomaWithRelations
     */
    'nombre'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof IdiomaWithRelations
     */
    'activoSn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof IdiomaWithRelations
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof IdiomaWithRelations
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof IdiomaWithRelations
     */
    'usuCreacion'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof IdiomaWithRelations
     */
    'usuModificacion'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof IdiomaWithRelations
     */
    'fechaInactivo'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof IdiomaWithRelations
     */
    'usuInactivo'?: number | null;
}
/**
 * 
 * @export
 * @interface InlineObject3
 */
export interface InlineObject3 {
    /**
     * 
     * @type {string}
     * @memberof InlineObject3
     */
    'mail': string;
    /**
     * 
     * @type {string}
     * @memberof InlineObject3
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface InlineObject4
 */
export interface InlineObject4 {
    /**
     * 
     * @type {string}
     * @memberof InlineObject4
     */
    'nombre': string;
    /**
     * 
     * @type {string}
     * @memberof InlineObject4
     */
    'mail': string;
    /**
     * 
     * @type {string}
     * @memberof InlineObject4
     */
    'password': string;
    /**
     * 
     * @type {number}
     * @memberof InlineObject4
     */
    'empresaId'?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineObject4
     */
    'rolId'?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineObject4
     */
    'idiomaId'?: number;
}
/**
 * 
 * @export
 * @interface InlineResponse200
 */
export interface InlineResponse200 {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200
     */
    'accessToken'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200
     */
    'expiresIn'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200
     */
    'refreshToken'?: string;
    /**
     * 
     * @type {Usuario}
     * @memberof InlineResponse200
     */
    'userData'?: Usuario;
}
/**
 * 
 * @export
 * @interface InlineResponse2001
 */
export interface InlineResponse2001 {
    /**
     * 
     * @type {object}
     * @memberof InlineResponse2001
     */
    'user'?: object;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2001
     */
    'token'?: string;
}
/**
 * 
 * @export
 * @interface ListaPermisos
 */
export interface ListaPermisos {
    /**
     * 
     * @type {number}
     * @memberof ListaPermisos
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ListaPermisos
     */
    'header'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ListaPermisos
     */
    'seccion'?: string | null;
}
/**
 * 
 * @export
 * @interface ListaPermisosFilter
 */
export interface ListaPermisosFilter {
    /**
     * 
     * @type {number}
     * @memberof ListaPermisosFilter
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof ListaPermisosFilter
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof ListaPermisosFilter
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof ListaPermisosFilter
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {object | Set<string>}
     * @memberof ListaPermisosFilter
     */
    'fields'?: object | Set<string>;
}
/**
 * 
 * @export
 * @interface ListaPermisosFilter1
 */
export interface ListaPermisosFilter1 {
    /**
     * 
     * @type {number}
     * @memberof ListaPermisosFilter1
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof ListaPermisosFilter1
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof ListaPermisosFilter1
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof ListaPermisosFilter1
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof ListaPermisosFilter1
     */
    'where'?: { [key: string]: object; };
    /**
     * 
     * @type {object | Set<string>}
     * @memberof ListaPermisosFilter1
     */
    'fields'?: object | Set<string>;
}
/**
 * (tsType: Partial<ListaPermisos>, schemaOptions: { partial: true })
 * @export
 * @interface ListaPermisosPartial
 */
export interface ListaPermisosPartial {
    /**
     * 
     * @type {number}
     * @memberof ListaPermisosPartial
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ListaPermisosPartial
     */
    'header'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ListaPermisosPartial
     */
    'seccion'?: string | null;
}
/**
 * (tsType: ListaPermisosWithRelations, schemaOptions: { includeRelations: true })
 * @export
 * @interface ListaPermisosWithRelations
 */
export interface ListaPermisosWithRelations {
    /**
     * 
     * @type {number}
     * @memberof ListaPermisosWithRelations
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ListaPermisosWithRelations
     */
    'header'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ListaPermisosWithRelations
     */
    'seccion'?: string | null;
}
/**
 * 
 * @export
 * @interface LogUsuario
 */
export interface LogUsuario {
    /**
     * 
     * @type {number}
     * @memberof LogUsuario
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof LogUsuario
     */
    'ip'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LogUsuario
     */
    'masDatos'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LogUsuario
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LogUsuario
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof LogUsuario
     */
    'usuCreacion'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof LogUsuario
     */
    'usuModificacion'?: number | null;
}
/**
 * 
 * @export
 * @interface LogUsuarioFilter
 */
export interface LogUsuarioFilter {
    /**
     * 
     * @type {number}
     * @memberof LogUsuarioFilter
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof LogUsuarioFilter
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof LogUsuarioFilter
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof LogUsuarioFilter
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {object | Set<string>}
     * @memberof LogUsuarioFilter
     */
    'fields'?: object | Set<string>;
}
/**
 * 
 * @export
 * @interface LogUsuarioFilter1
 */
export interface LogUsuarioFilter1 {
    /**
     * 
     * @type {number}
     * @memberof LogUsuarioFilter1
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof LogUsuarioFilter1
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof LogUsuarioFilter1
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof LogUsuarioFilter1
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof LogUsuarioFilter1
     */
    'where'?: { [key: string]: object; };
    /**
     * 
     * @type {object | Set<string>}
     * @memberof LogUsuarioFilter1
     */
    'fields'?: object | Set<string>;
}
/**
 * (tsType: Partial<LogUsuario>, schemaOptions: { partial: true })
 * @export
 * @interface LogUsuarioPartial
 */
export interface LogUsuarioPartial {
    /**
     * 
     * @type {number}
     * @memberof LogUsuarioPartial
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof LogUsuarioPartial
     */
    'ip'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LogUsuarioPartial
     */
    'masDatos'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LogUsuarioPartial
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LogUsuarioPartial
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof LogUsuarioPartial
     */
    'usuCreacion'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof LogUsuarioPartial
     */
    'usuModificacion'?: number | null;
}
/**
 * (tsType: LogUsuarioWithRelations, schemaOptions: { includeRelations: true })
 * @export
 * @interface LogUsuarioWithRelations
 */
export interface LogUsuarioWithRelations {
    /**
     * 
     * @type {number}
     * @memberof LogUsuarioWithRelations
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof LogUsuarioWithRelations
     */
    'ip'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LogUsuarioWithRelations
     */
    'masDatos'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LogUsuarioWithRelations
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LogUsuarioWithRelations
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof LogUsuarioWithRelations
     */
    'usuCreacion'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof LogUsuarioWithRelations
     */
    'usuModificacion'?: number | null;
}
/**
 * 
 * @export
 * @interface LoopbackCount
 */
export interface LoopbackCount {
    /**
     * 
     * @type {number}
     * @memberof LoopbackCount
     */
    'count'?: number;
}
/**
 * (tsType: Omit<Archivo, \'id\'>, schemaOptions: { title: \'NewArchivo\', exclude: [ \'id\' ] })
 * @export
 * @interface NewArchivo
 */
export interface NewArchivo {
    /**
     * 
     * @type {number}
     * @memberof NewArchivo
     */
    'empresaId': number;
    /**
     * 
     * @type {number}
     * @memberof NewArchivo
     */
    'tipoArchivoId'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof NewArchivo
     */
    'nombre'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewArchivo
     */
    'url'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewArchivo
     */
    'descripcion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewArchivo
     */
    'tabla'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof NewArchivo
     */
    'idTabla'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof NewArchivo
     */
    'pantalla'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof NewArchivo
     */
    'orden'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof NewArchivo
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewArchivo
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof NewArchivo
     */
    'usuCreacion'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof NewArchivo
     */
    'usuModificacion'?: number | null;
}
/**
 * (tsType: Omit<Empresa, \'id\'>, schemaOptions: { title: \'NewEmpresa\', exclude: [ \'id\' ] })
 * @export
 * @interface NewEmpresa
 */
export interface NewEmpresa {
    /**
     * 
     * @type {string}
     * @memberof NewEmpresa
     */
    'codigo'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewEmpresa
     */
    'nombre'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewEmpresa
     */
    'descripcion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewEmpresa
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewEmpresa
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewEmpresa
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof NewEmpresa
     */
    'usuCreacion'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof NewEmpresa
     */
    'usuModificacion'?: number | null;
}
/**
 * (tsType: Omit<Idioma, \'id\'>, schemaOptions: { title: \'NewIdioma\', exclude: [ \'id\' ] })
 * @export
 * @interface NewIdioma
 */
export interface NewIdioma {
    /**
     * 
     * @type {string}
     * @memberof NewIdioma
     */
    'iso'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewIdioma
     */
    'nombre'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewIdioma
     */
    'activoSn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewIdioma
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewIdioma
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof NewIdioma
     */
    'usuCreacion'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof NewIdioma
     */
    'usuModificacion'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof NewIdioma
     */
    'fechaInactivo'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof NewIdioma
     */
    'usuInactivo'?: number | null;
}
/**
 * (tsType: Omit<ListaPermisos, \'id\'>, schemaOptions: { title: \'NewListaPermisos\', exclude: [ \'id\' ] })
 * @export
 * @interface NewListaPermisos
 */
export interface NewListaPermisos {
    /**
     * 
     * @type {string}
     * @memberof NewListaPermisos
     */
    'header'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewListaPermisos
     */
    'seccion'?: string | null;
}
/**
 * (tsType: Omit<LogUsuario, \'id\'>, schemaOptions: { title: \'NewLogUsuario\', exclude: [ \'id\' ] })
 * @export
 * @interface NewLogUsuario
 */
export interface NewLogUsuario {
    /**
     * 
     * @type {string}
     * @memberof NewLogUsuario
     */
    'ip'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewLogUsuario
     */
    'masDatos'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewLogUsuario
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewLogUsuario
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof NewLogUsuario
     */
    'usuCreacion'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof NewLogUsuario
     */
    'usuModificacion'?: number | null;
}
/**
 * (tsType: Omit<Permiso, \'id\'>, schemaOptions: { title: \'NewPermiso\', exclude: [ \'id\' ] })
 * @export
 * @interface NewPermiso
 */
export interface NewPermiso {
    /**
     * 
     * @type {number}
     * @memberof NewPermiso
     */
    'rolId': number;
    /**
     * 
     * @type {string}
     * @memberof NewPermiso
     */
    'modulo'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewPermiso
     */
    'controlador'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewPermiso
     */
    'accion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewPermiso
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewPermiso
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof NewPermiso
     */
    'usuCreacion'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof NewPermiso
     */
    'usuModificacion'?: number | null;
}
/**
 * (tsType: Omit<RefrescarToken, \'id\'>, schemaOptions: { title: \'NewRefrescarToken\', exclude: [ \'id\' ] })
 * @export
 * @interface NewRefrescarToken
 */
export interface NewRefrescarToken {
    /**
     * 
     * @type {number}
     * @memberof NewRefrescarToken
     */
    'usuarioId'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof NewRefrescarToken
     */
    'refreshToken'?: string | null;
}
/**
 * (tsType: Omit<Rol, \'id\'>, schemaOptions: { title: \'NewRol\', exclude: [ \'id\' ] })
 * @export
 * @interface NewRol
 */
export interface NewRol {
    /**
     * 
     * @type {number}
     * @memberof NewRol
     */
    'empresaId': number;
    /**
     * 
     * @type {string}
     * @memberof NewRol
     */
    'nombre'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewRol
     */
    'activoSn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewRol
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewRol
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof NewRol
     */
    'usuCreacion'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof NewRol
     */
    'usuModificacion'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof NewRol
     */
    'fechaInactivo'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof NewRol
     */
    'usuInactivo'?: number | null;
}
/**
 * (tsType: Omit<Seccion, \'id\'>, schemaOptions: { title: \'NewSeccion\', exclude: [ \'id\' ] })
 * @export
 * @interface NewSeccion
 */
export interface NewSeccion {
    /**
     * 
     * @type {string}
     * @memberof NewSeccion
     */
    'nombre'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewSeccion
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewSeccion
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof NewSeccion
     */
    'usuCreacion'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof NewSeccion
     */
    'usuModificacion'?: number | null;
}
/**
 * (tsType: Omit<TipoArchivo, \'id\'>, schemaOptions: { title: \'NewTipoArchivo\', exclude: [ \'id\' ] })
 * @export
 * @interface NewTipoArchivo
 */
export interface NewTipoArchivo {
    /**
     * 
     * @type {number}
     * @memberof NewTipoArchivo
     */
    'empresaId': number;
    /**
     * 
     * @type {number}
     * @memberof NewTipoArchivo
     */
    'seccionId'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof NewTipoArchivo
     */
    'nombre'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewTipoArchivo
     */
    'tipo'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof NewTipoArchivo
     */
    'orden'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof NewTipoArchivo
     */
    'multiple'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewTipoArchivo
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewTipoArchivo
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof NewTipoArchivo
     */
    'usuCreacion'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof NewTipoArchivo
     */
    'usuModificacion'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof NewTipoArchivo
     */
    'activoSn'?: string | null;
}
/**
 * (tsType: Omit<Traduccion, \'id\'>, schemaOptions: { title: \'NewTraduccion\', exclude: [ \'id\' ] })
 * @export
 * @interface NewTraduccion
 */
export interface NewTraduccion {
    /**
     * 
     * @type {number}
     * @memberof NewTraduccion
     */
    'idiomaId': number;
    /**
     * 
     * @type {string}
     * @memberof NewTraduccion
     */
    'clave'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewTraduccion
     */
    'valor'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewTraduccion
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewTraduccion
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof NewTraduccion
     */
    'usuCreacion'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof NewTraduccion
     */
    'usuModificacion'?: number | null;
}
/**
 * (tsType: Omit<Usuario, \'id\'>, schemaOptions: { title: \'NewUsuario\', exclude: [ \'id\' ] })
 * @export
 * @interface NewUsuario
 */
export interface NewUsuario {
    /**
     * 
     * @type {number}
     * @memberof NewUsuario
     */
    'empresaId': number;
    /**
     * 
     * @type {number}
     * @memberof NewUsuario
     */
    'rolId': number;
    /**
     * 
     * @type {number}
     * @memberof NewUsuario
     */
    'idiomaId': number;
    /**
     * 
     * @type {string}
     * @memberof NewUsuario
     */
    'nombre'?: string;
    /**
     * 
     * @type {string}
     * @memberof NewUsuario
     */
    'mail'?: string;
    /**
     * 
     * @type {string}
     * @memberof NewUsuario
     */
    'activoSn'?: string;
    /**
     * 
     * @type {string}
     * @memberof NewUsuario
     */
    'telefono'?: string;
    /**
     * 
     * @type {string}
     * @memberof NewUsuario
     */
    'avatar'?: string;
    /**
     * 
     * @type {string}
     * @memberof NewUsuario
     */
    'fechaCreacion'?: string;
    /**
     * 
     * @type {string}
     * @memberof NewUsuario
     */
    'fechaModificacion'?: string;
    /**
     * 
     * @type {number}
     * @memberof NewUsuario
     */
    'usuCreacion'?: number;
    /**
     * 
     * @type {number}
     * @memberof NewUsuario
     */
    'usuModificacion'?: number;
    /**
     * 
     * @type {string}
     * @memberof NewUsuario
     */
    'fechaInactivo'?: string;
    /**
     * 
     * @type {number}
     * @memberof NewUsuario
     */
    'usuInactivo'?: number;
    /**
     * 
     * @type {string}
     * @memberof NewUsuario
     */
    'roles'?: string;
}
/**
 * (tsType: Omit<UsuarioCredenciales, \'id\'>, schemaOptions: { title: \'NewUsuarioCredenciales\', exclude: [ \'id\' ] })
 * @export
 * @interface NewUsuarioCredenciales
 */
export interface NewUsuarioCredenciales {
    /**
     * 
     * @type {string}
     * @memberof NewUsuarioCredenciales
     */
    'password': string;
    /**
     * 
     * @type {number}
     * @memberof NewUsuarioCredenciales
     */
    'usuarioId'?: number | null;
}
/**
 * (tsType: Omit<UsuarioPasswordHistorico, \'id\'>, schemaOptions: { title: \'NewUsuarioPasswordHistorico\', exclude: [ \'id\' ] })
 * @export
 * @interface NewUsuarioPasswordHistorico
 */
export interface NewUsuarioPasswordHistorico {
    /**
     * 
     * @type {number}
     * @memberof NewUsuarioPasswordHistorico
     */
    'usuarioId': number;
    /**
     * 
     * @type {string}
     * @memberof NewUsuarioPasswordHistorico
     */
    'password'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewUsuarioPasswordHistorico
     */
    'fechaInicio'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewUsuarioPasswordHistorico
     */
    'fechaFin'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewUsuarioPasswordHistorico
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewUsuarioPasswordHistorico
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof NewUsuarioPasswordHistorico
     */
    'usuCreacion'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof NewUsuarioPasswordHistorico
     */
    'usuModificacion'?: number | null;
}
/**
 * (tsType: Omit<UsuarioRestablecerPassword, \'id\'>, schemaOptions: { title: \'NewUsuarioRestablecerPassword\', exclude: [ \'id\' ] })
 * @export
 * @interface NewUsuarioRestablecerPassword
 */
export interface NewUsuarioRestablecerPassword {
    /**
     * 
     * @type {number}
     * @memberof NewUsuarioRestablecerPassword
     */
    'usuarioId'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof NewUsuarioRestablecerPassword
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof NewUsuarioRestablecerPassword
     */
    'codigoRecuperacion'?: string;
    /**
     * 
     * @type {string}
     * @memberof NewUsuarioRestablecerPassword
     */
    'expiraEn'?: string;
}
/**
 * 
 * @export
 * @interface Permiso
 */
export interface Permiso {
    /**
     * 
     * @type {number}
     * @memberof Permiso
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof Permiso
     */
    'rolId': number;
    /**
     * 
     * @type {string}
     * @memberof Permiso
     */
    'modulo'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Permiso
     */
    'controlador'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Permiso
     */
    'accion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Permiso
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Permiso
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Permiso
     */
    'usuCreacion'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof Permiso
     */
    'usuModificacion'?: number | null;
}
/**
 * 
 * @export
 * @interface PermisoFilter
 */
export interface PermisoFilter {
    /**
     * 
     * @type {number}
     * @memberof PermisoFilter
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof PermisoFilter
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof PermisoFilter
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof PermisoFilter
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {object | Set<string>}
     * @memberof PermisoFilter
     */
    'fields'?: object | Set<string>;
}
/**
 * 
 * @export
 * @interface PermisoFilter1
 */
export interface PermisoFilter1 {
    /**
     * 
     * @type {number}
     * @memberof PermisoFilter1
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof PermisoFilter1
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof PermisoFilter1
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof PermisoFilter1
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof PermisoFilter1
     */
    'where'?: { [key: string]: object; };
    /**
     * 
     * @type {object | Set<string>}
     * @memberof PermisoFilter1
     */
    'fields'?: object | Set<string>;
}
/**
 * (tsType: Partial<Permiso>, schemaOptions: { partial: true })
 * @export
 * @interface PermisoPartial
 */
export interface PermisoPartial {
    /**
     * 
     * @type {number}
     * @memberof PermisoPartial
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof PermisoPartial
     */
    'rolId'?: number;
    /**
     * 
     * @type {string}
     * @memberof PermisoPartial
     */
    'modulo'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PermisoPartial
     */
    'controlador'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PermisoPartial
     */
    'accion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PermisoPartial
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PermisoPartial
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof PermisoPartial
     */
    'usuCreacion'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof PermisoPartial
     */
    'usuModificacion'?: number | null;
}
/**
 * (tsType: PermisoWithRelations, schemaOptions: { includeRelations: true })
 * @export
 * @interface PermisoWithRelations
 */
export interface PermisoWithRelations {
    /**
     * 
     * @type {number}
     * @memberof PermisoWithRelations
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof PermisoWithRelations
     */
    'rolId': number;
    /**
     * 
     * @type {string}
     * @memberof PermisoWithRelations
     */
    'modulo'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PermisoWithRelations
     */
    'controlador'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PermisoWithRelations
     */
    'accion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PermisoWithRelations
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PermisoWithRelations
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof PermisoWithRelations
     */
    'usuCreacion'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof PermisoWithRelations
     */
    'usuModificacion'?: number | null;
}
/**
 * 
 * @export
 * @interface RefrescarToken
 */
export interface RefrescarToken {
    /**
     * 
     * @type {number}
     * @memberof RefrescarToken
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof RefrescarToken
     */
    'usuarioId'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof RefrescarToken
     */
    'refreshToken'?: string | null;
}
/**
 * 
 * @export
 * @interface RefrescarTokenFilter
 */
export interface RefrescarTokenFilter {
    /**
     * 
     * @type {number}
     * @memberof RefrescarTokenFilter
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof RefrescarTokenFilter
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof RefrescarTokenFilter
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof RefrescarTokenFilter
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {object | Set<string>}
     * @memberof RefrescarTokenFilter
     */
    'fields'?: object | Set<string>;
}
/**
 * 
 * @export
 * @interface RefrescarTokenFilter1
 */
export interface RefrescarTokenFilter1 {
    /**
     * 
     * @type {number}
     * @memberof RefrescarTokenFilter1
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof RefrescarTokenFilter1
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof RefrescarTokenFilter1
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof RefrescarTokenFilter1
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof RefrescarTokenFilter1
     */
    'where'?: { [key: string]: object; };
    /**
     * 
     * @type {object | Set<string>}
     * @memberof RefrescarTokenFilter1
     */
    'fields'?: object | Set<string>;
}
/**
 * (tsType: Partial<RefrescarToken>, schemaOptions: { partial: true })
 * @export
 * @interface RefrescarTokenPartial
 */
export interface RefrescarTokenPartial {
    /**
     * 
     * @type {number}
     * @memberof RefrescarTokenPartial
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof RefrescarTokenPartial
     */
    'usuarioId'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof RefrescarTokenPartial
     */
    'refreshToken'?: string | null;
}
/**
 * (tsType: RefrescarTokenWithRelations, schemaOptions: { includeRelations: true })
 * @export
 * @interface RefrescarTokenWithRelations
 */
export interface RefrescarTokenWithRelations {
    /**
     * 
     * @type {number}
     * @memberof RefrescarTokenWithRelations
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof RefrescarTokenWithRelations
     */
    'usuarioId'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof RefrescarTokenWithRelations
     */
    'refreshToken'?: string | null;
}
/**
 * 
 * @export
 * @interface Rol
 */
export interface Rol {
    /**
     * 
     * @type {number}
     * @memberof Rol
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof Rol
     */
    'empresaId': number;
    /**
     * 
     * @type {string}
     * @memberof Rol
     */
    'nombre'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Rol
     */
    'activoSn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Rol
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Rol
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Rol
     */
    'usuCreacion'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof Rol
     */
    'usuModificacion'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof Rol
     */
    'fechaInactivo'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Rol
     */
    'usuInactivo'?: number | null;
}
/**
 * 
 * @export
 * @interface RolFilter
 */
export interface RolFilter {
    /**
     * 
     * @type {number}
     * @memberof RolFilter
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof RolFilter
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof RolFilter
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof RolFilter
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {object | Set<string>}
     * @memberof RolFilter
     */
    'fields'?: object | Set<string>;
}
/**
 * 
 * @export
 * @interface RolFilter1
 */
export interface RolFilter1 {
    /**
     * 
     * @type {number}
     * @memberof RolFilter1
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof RolFilter1
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof RolFilter1
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof RolFilter1
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof RolFilter1
     */
    'where'?: { [key: string]: object; };
    /**
     * 
     * @type {object | Set<string>}
     * @memberof RolFilter1
     */
    'fields'?: object | Set<string>;
}
/**
 * (tsType: Partial<Rol>, schemaOptions: { partial: true })
 * @export
 * @interface RolPartial
 */
export interface RolPartial {
    /**
     * 
     * @type {number}
     * @memberof RolPartial
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof RolPartial
     */
    'empresaId'?: number;
    /**
     * 
     * @type {string}
     * @memberof RolPartial
     */
    'nombre'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof RolPartial
     */
    'activoSn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof RolPartial
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof RolPartial
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof RolPartial
     */
    'usuCreacion'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof RolPartial
     */
    'usuModificacion'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof RolPartial
     */
    'fechaInactivo'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof RolPartial
     */
    'usuInactivo'?: number | null;
}
/**
 * (tsType: RolWithRelations, schemaOptions: { includeRelations: true })
 * @export
 * @interface RolWithRelations
 */
export interface RolWithRelations {
    /**
     * 
     * @type {number}
     * @memberof RolWithRelations
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof RolWithRelations
     */
    'empresaId': number;
    /**
     * 
     * @type {string}
     * @memberof RolWithRelations
     */
    'nombre'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof RolWithRelations
     */
    'activoSn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof RolWithRelations
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof RolWithRelations
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof RolWithRelations
     */
    'usuCreacion'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof RolWithRelations
     */
    'usuModificacion'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof RolWithRelations
     */
    'fechaInactivo'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof RolWithRelations
     */
    'usuInactivo'?: number | null;
}
/**
 * 
 * @export
 * @interface Seccion
 */
export interface Seccion {
    /**
     * 
     * @type {number}
     * @memberof Seccion
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Seccion
     */
    'nombre'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Seccion
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Seccion
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Seccion
     */
    'usuCreacion'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof Seccion
     */
    'usuModificacion'?: number | null;
}
/**
 * 
 * @export
 * @interface SeccionFilter
 */
export interface SeccionFilter {
    /**
     * 
     * @type {number}
     * @memberof SeccionFilter
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof SeccionFilter
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof SeccionFilter
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof SeccionFilter
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {object | Set<string>}
     * @memberof SeccionFilter
     */
    'fields'?: object | Set<string>;
}
/**
 * 
 * @export
 * @interface SeccionFilter1
 */
export interface SeccionFilter1 {
    /**
     * 
     * @type {number}
     * @memberof SeccionFilter1
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof SeccionFilter1
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof SeccionFilter1
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof SeccionFilter1
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof SeccionFilter1
     */
    'where'?: { [key: string]: object; };
    /**
     * 
     * @type {object | Set<string>}
     * @memberof SeccionFilter1
     */
    'fields'?: object | Set<string>;
}
/**
 * (tsType: Partial<Seccion>, schemaOptions: { partial: true })
 * @export
 * @interface SeccionPartial
 */
export interface SeccionPartial {
    /**
     * 
     * @type {number}
     * @memberof SeccionPartial
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof SeccionPartial
     */
    'nombre'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SeccionPartial
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SeccionPartial
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof SeccionPartial
     */
    'usuCreacion'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof SeccionPartial
     */
    'usuModificacion'?: number | null;
}
/**
 * (tsType: SeccionWithRelations, schemaOptions: { includeRelations: true })
 * @export
 * @interface SeccionWithRelations
 */
export interface SeccionWithRelations {
    /**
     * 
     * @type {number}
     * @memberof SeccionWithRelations
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof SeccionWithRelations
     */
    'nombre'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SeccionWithRelations
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SeccionWithRelations
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof SeccionWithRelations
     */
    'usuCreacion'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof SeccionWithRelations
     */
    'usuModificacion'?: number | null;
}
/**
 * 
 * @export
 * @interface TipoArchivo
 */
export interface TipoArchivo {
    /**
     * 
     * @type {number}
     * @memberof TipoArchivo
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof TipoArchivo
     */
    'empresaId': number;
    /**
     * 
     * @type {number}
     * @memberof TipoArchivo
     */
    'seccionId'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof TipoArchivo
     */
    'nombre'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TipoArchivo
     */
    'tipo'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof TipoArchivo
     */
    'orden'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof TipoArchivo
     */
    'multiple'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TipoArchivo
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TipoArchivo
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof TipoArchivo
     */
    'usuCreacion'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof TipoArchivo
     */
    'usuModificacion'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof TipoArchivo
     */
    'activoSn'?: string | null;
}
/**
 * 
 * @export
 * @interface TipoArchivoFilter
 */
export interface TipoArchivoFilter {
    /**
     * 
     * @type {number}
     * @memberof TipoArchivoFilter
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof TipoArchivoFilter
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof TipoArchivoFilter
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof TipoArchivoFilter
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {object | Set<string>}
     * @memberof TipoArchivoFilter
     */
    'fields'?: object | Set<string>;
}
/**
 * 
 * @export
 * @interface TipoArchivoFilter1
 */
export interface TipoArchivoFilter1 {
    /**
     * 
     * @type {number}
     * @memberof TipoArchivoFilter1
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof TipoArchivoFilter1
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof TipoArchivoFilter1
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof TipoArchivoFilter1
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof TipoArchivoFilter1
     */
    'where'?: { [key: string]: object; };
    /**
     * 
     * @type {object | Set<string>}
     * @memberof TipoArchivoFilter1
     */
    'fields'?: object | Set<string>;
}
/**
 * (tsType: Partial<TipoArchivo>, schemaOptions: { partial: true })
 * @export
 * @interface TipoArchivoPartial
 */
export interface TipoArchivoPartial {
    /**
     * 
     * @type {number}
     * @memberof TipoArchivoPartial
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof TipoArchivoPartial
     */
    'empresaId'?: number;
    /**
     * 
     * @type {number}
     * @memberof TipoArchivoPartial
     */
    'seccionId'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof TipoArchivoPartial
     */
    'nombre'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TipoArchivoPartial
     */
    'tipo'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof TipoArchivoPartial
     */
    'orden'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof TipoArchivoPartial
     */
    'multiple'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TipoArchivoPartial
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TipoArchivoPartial
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof TipoArchivoPartial
     */
    'usuCreacion'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof TipoArchivoPartial
     */
    'usuModificacion'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof TipoArchivoPartial
     */
    'activoSn'?: string | null;
}
/**
 * (tsType: TipoArchivoWithRelations, schemaOptions: { includeRelations: true })
 * @export
 * @interface TipoArchivoWithRelations
 */
export interface TipoArchivoWithRelations {
    /**
     * 
     * @type {number}
     * @memberof TipoArchivoWithRelations
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof TipoArchivoWithRelations
     */
    'empresaId': number;
    /**
     * 
     * @type {number}
     * @memberof TipoArchivoWithRelations
     */
    'seccionId'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof TipoArchivoWithRelations
     */
    'nombre'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TipoArchivoWithRelations
     */
    'tipo'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof TipoArchivoWithRelations
     */
    'orden'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof TipoArchivoWithRelations
     */
    'multiple'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TipoArchivoWithRelations
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TipoArchivoWithRelations
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof TipoArchivoWithRelations
     */
    'usuCreacion'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof TipoArchivoWithRelations
     */
    'usuModificacion'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof TipoArchivoWithRelations
     */
    'activoSn'?: string | null;
}
/**
 * 
 * @export
 * @interface Traduccion
 */
export interface Traduccion {
    /**
     * 
     * @type {number}
     * @memberof Traduccion
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof Traduccion
     */
    'idiomaId': number;
    /**
     * 
     * @type {string}
     * @memberof Traduccion
     */
    'clave'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Traduccion
     */
    'valor'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Traduccion
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Traduccion
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Traduccion
     */
    'usuCreacion'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof Traduccion
     */
    'usuModificacion'?: number | null;
}
/**
 * 
 * @export
 * @interface TraduccionFilter
 */
export interface TraduccionFilter {
    /**
     * 
     * @type {number}
     * @memberof TraduccionFilter
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof TraduccionFilter
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof TraduccionFilter
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof TraduccionFilter
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {object | Set<string>}
     * @memberof TraduccionFilter
     */
    'fields'?: object | Set<string>;
}
/**
 * 
 * @export
 * @interface TraduccionFilter1
 */
export interface TraduccionFilter1 {
    /**
     * 
     * @type {number}
     * @memberof TraduccionFilter1
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof TraduccionFilter1
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof TraduccionFilter1
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof TraduccionFilter1
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof TraduccionFilter1
     */
    'where'?: { [key: string]: object; };
    /**
     * 
     * @type {object | Set<string>}
     * @memberof TraduccionFilter1
     */
    'fields'?: object | Set<string>;
}
/**
 * (tsType: Partial<Traduccion>, schemaOptions: { partial: true })
 * @export
 * @interface TraduccionPartial
 */
export interface TraduccionPartial {
    /**
     * 
     * @type {number}
     * @memberof TraduccionPartial
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof TraduccionPartial
     */
    'idiomaId'?: number;
    /**
     * 
     * @type {string}
     * @memberof TraduccionPartial
     */
    'clave'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TraduccionPartial
     */
    'valor'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TraduccionPartial
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TraduccionPartial
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof TraduccionPartial
     */
    'usuCreacion'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof TraduccionPartial
     */
    'usuModificacion'?: number | null;
}
/**
 * (tsType: TraduccionWithRelations, schemaOptions: { includeRelations: true })
 * @export
 * @interface TraduccionWithRelations
 */
export interface TraduccionWithRelations {
    /**
     * 
     * @type {number}
     * @memberof TraduccionWithRelations
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof TraduccionWithRelations
     */
    'idiomaId': number;
    /**
     * 
     * @type {string}
     * @memberof TraduccionWithRelations
     */
    'clave'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TraduccionWithRelations
     */
    'valor'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TraduccionWithRelations
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TraduccionWithRelations
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof TraduccionWithRelations
     */
    'usuCreacion'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof TraduccionWithRelations
     */
    'usuModificacion'?: number | null;
}
/**
 * 
 * @export
 * @interface Usuario
 */
export interface Usuario {
    /**
     * 
     * @type {number}
     * @memberof Usuario
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof Usuario
     */
    'empresaId': number;
    /**
     * 
     * @type {number}
     * @memberof Usuario
     */
    'rolId': number;
    /**
     * 
     * @type {number}
     * @memberof Usuario
     */
    'idiomaId': number;
    /**
     * 
     * @type {string}
     * @memberof Usuario
     */
    'nombre'?: string;
    /**
     * 
     * @type {string}
     * @memberof Usuario
     */
    'mail'?: string;
    /**
     * 
     * @type {string}
     * @memberof Usuario
     */
    'activoSn'?: string;
    /**
     * 
     * @type {string}
     * @memberof Usuario
     */
    'telefono'?: string;
    /**
     * 
     * @type {string}
     * @memberof Usuario
     */
    'avatar'?: string;
    /**
     * 
     * @type {string}
     * @memberof Usuario
     */
    'fechaCreacion'?: string;
    /**
     * 
     * @type {string}
     * @memberof Usuario
     */
    'fechaModificacion'?: string;
    /**
     * 
     * @type {number}
     * @memberof Usuario
     */
    'usuCreacion'?: number;
    /**
     * 
     * @type {number}
     * @memberof Usuario
     */
    'usuModificacion'?: number;
    /**
     * 
     * @type {string}
     * @memberof Usuario
     */
    'fechaInactivo'?: string;
    /**
     * 
     * @type {number}
     * @memberof Usuario
     */
    'usuInactivo'?: number;
    /**
     * 
     * @type {string}
     * @memberof Usuario
     */
    'roles'?: string;
}
/**
 * 
 * @export
 * @interface UsuarioCredenciales
 */
export interface UsuarioCredenciales {
    /**
     * 
     * @type {number}
     * @memberof UsuarioCredenciales
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof UsuarioCredenciales
     */
    'password': string;
    /**
     * 
     * @type {number}
     * @memberof UsuarioCredenciales
     */
    'usuarioId'?: number | null;
}
/**
 * 
 * @export
 * @interface UsuarioCredencialesFilter
 */
export interface UsuarioCredencialesFilter {
    /**
     * 
     * @type {number}
     * @memberof UsuarioCredencialesFilter
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof UsuarioCredencialesFilter
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof UsuarioCredencialesFilter
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof UsuarioCredencialesFilter
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {object | Set<string>}
     * @memberof UsuarioCredencialesFilter
     */
    'fields'?: object | Set<string>;
}
/**
 * 
 * @export
 * @interface UsuarioCredencialesFilter1
 */
export interface UsuarioCredencialesFilter1 {
    /**
     * 
     * @type {number}
     * @memberof UsuarioCredencialesFilter1
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof UsuarioCredencialesFilter1
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof UsuarioCredencialesFilter1
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof UsuarioCredencialesFilter1
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof UsuarioCredencialesFilter1
     */
    'where'?: { [key: string]: object; };
    /**
     * 
     * @type {object | Set<string>}
     * @memberof UsuarioCredencialesFilter1
     */
    'fields'?: object | Set<string>;
}
/**
 * (tsType: Partial<UsuarioCredenciales>, schemaOptions: { partial: true })
 * @export
 * @interface UsuarioCredencialesPartial
 */
export interface UsuarioCredencialesPartial {
    /**
     * 
     * @type {number}
     * @memberof UsuarioCredencialesPartial
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof UsuarioCredencialesPartial
     */
    'password'?: string;
    /**
     * 
     * @type {number}
     * @memberof UsuarioCredencialesPartial
     */
    'usuarioId'?: number | null;
}
/**
 * (tsType: UsuarioCredencialesWithRelations, schemaOptions: { includeRelations: true })
 * @export
 * @interface UsuarioCredencialesWithRelations
 */
export interface UsuarioCredencialesWithRelations {
    /**
     * 
     * @type {number}
     * @memberof UsuarioCredencialesWithRelations
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof UsuarioCredencialesWithRelations
     */
    'password': string;
    /**
     * 
     * @type {number}
     * @memberof UsuarioCredencialesWithRelations
     */
    'usuarioId'?: number | null;
}
/**
 * 
 * @export
 * @interface UsuarioFilter
 */
export interface UsuarioFilter {
    /**
     * 
     * @type {number}
     * @memberof UsuarioFilter
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof UsuarioFilter
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof UsuarioFilter
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof UsuarioFilter
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {object | Set<string>}
     * @memberof UsuarioFilter
     */
    'fields'?: object | Set<string>;
    /**
     * 
     * @type {Array<UsuarioIncludeFilterItems | string>}
     * @memberof UsuarioFilter
     */
    'include'?: Array<UsuarioIncludeFilterItems | string>;
}
/**
 * 
 * @export
 * @interface UsuarioFilter1
 */
export interface UsuarioFilter1 {
    /**
     * 
     * @type {number}
     * @memberof UsuarioFilter1
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof UsuarioFilter1
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof UsuarioFilter1
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof UsuarioFilter1
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof UsuarioFilter1
     */
    'where'?: { [key: string]: object; };
    /**
     * 
     * @type {object | Set<string>}
     * @memberof UsuarioFilter1
     */
    'fields'?: object | Set<string>;
    /**
     * 
     * @type {Array<UsuarioIncludeFilterItems | string>}
     * @memberof UsuarioFilter1
     */
    'include'?: Array<UsuarioIncludeFilterItems | string>;
}
/**
 * 
 * @export
 * @interface UsuarioIncludeFilterItems
 */
export interface UsuarioIncludeFilterItems {
    /**
     * 
     * @type {string}
     * @memberof UsuarioIncludeFilterItems
     */
    'relation'?: UsuarioIncludeFilterItemsRelationEnum;
    /**
     * 
     * @type {UsuarioScopeFilter}
     * @memberof UsuarioIncludeFilterItems
     */
    'scope'?: UsuarioScopeFilter;
}

/**
    * @export
    * @enum {string}
    */
export enum UsuarioIncludeFilterItemsRelationEnum {
    UserCredentials = 'userCredentials'
}

/**
 * (tsType: Partial<Usuario>, schemaOptions: { partial: true })
 * @export
 * @interface UsuarioPartial
 */
export interface UsuarioPartial {
    /**
     * 
     * @type {number}
     * @memberof UsuarioPartial
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof UsuarioPartial
     */
    'empresaId'?: number;
    /**
     * 
     * @type {number}
     * @memberof UsuarioPartial
     */
    'rolId'?: number;
    /**
     * 
     * @type {number}
     * @memberof UsuarioPartial
     */
    'idiomaId'?: number;
    /**
     * 
     * @type {string}
     * @memberof UsuarioPartial
     */
    'nombre'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsuarioPartial
     */
    'mail'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsuarioPartial
     */
    'activoSn'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsuarioPartial
     */
    'telefono'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsuarioPartial
     */
    'avatar'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsuarioPartial
     */
    'fechaCreacion'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsuarioPartial
     */
    'fechaModificacion'?: string;
    /**
     * 
     * @type {number}
     * @memberof UsuarioPartial
     */
    'usuCreacion'?: number;
    /**
     * 
     * @type {number}
     * @memberof UsuarioPartial
     */
    'usuModificacion'?: number;
    /**
     * 
     * @type {string}
     * @memberof UsuarioPartial
     */
    'fechaInactivo'?: string;
    /**
     * 
     * @type {number}
     * @memberof UsuarioPartial
     */
    'usuInactivo'?: number;
    /**
     * 
     * @type {string}
     * @memberof UsuarioPartial
     */
    'roles'?: string;
}
/**
 * 
 * @export
 * @interface UsuarioPasswordHistorico
 */
export interface UsuarioPasswordHistorico {
    /**
     * 
     * @type {number}
     * @memberof UsuarioPasswordHistorico
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof UsuarioPasswordHistorico
     */
    'usuarioId': number;
    /**
     * 
     * @type {string}
     * @memberof UsuarioPasswordHistorico
     */
    'password'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UsuarioPasswordHistorico
     */
    'fechaInicio'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UsuarioPasswordHistorico
     */
    'fechaFin'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UsuarioPasswordHistorico
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UsuarioPasswordHistorico
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof UsuarioPasswordHistorico
     */
    'usuCreacion'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof UsuarioPasswordHistorico
     */
    'usuModificacion'?: number | null;
}
/**
 * 
 * @export
 * @interface UsuarioPasswordHistoricoFilter
 */
export interface UsuarioPasswordHistoricoFilter {
    /**
     * 
     * @type {number}
     * @memberof UsuarioPasswordHistoricoFilter
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof UsuarioPasswordHistoricoFilter
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof UsuarioPasswordHistoricoFilter
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof UsuarioPasswordHistoricoFilter
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {object | Set<string>}
     * @memberof UsuarioPasswordHistoricoFilter
     */
    'fields'?: object | Set<string>;
}
/**
 * 
 * @export
 * @interface UsuarioPasswordHistoricoFilter1
 */
export interface UsuarioPasswordHistoricoFilter1 {
    /**
     * 
     * @type {number}
     * @memberof UsuarioPasswordHistoricoFilter1
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof UsuarioPasswordHistoricoFilter1
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof UsuarioPasswordHistoricoFilter1
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof UsuarioPasswordHistoricoFilter1
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof UsuarioPasswordHistoricoFilter1
     */
    'where'?: { [key: string]: object; };
    /**
     * 
     * @type {object | Set<string>}
     * @memberof UsuarioPasswordHistoricoFilter1
     */
    'fields'?: object | Set<string>;
}
/**
 * (tsType: Partial<UsuarioPasswordHistorico>, schemaOptions: { partial: true })
 * @export
 * @interface UsuarioPasswordHistoricoPartial
 */
export interface UsuarioPasswordHistoricoPartial {
    /**
     * 
     * @type {number}
     * @memberof UsuarioPasswordHistoricoPartial
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof UsuarioPasswordHistoricoPartial
     */
    'usuarioId'?: number;
    /**
     * 
     * @type {string}
     * @memberof UsuarioPasswordHistoricoPartial
     */
    'password'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UsuarioPasswordHistoricoPartial
     */
    'fechaInicio'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UsuarioPasswordHistoricoPartial
     */
    'fechaFin'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UsuarioPasswordHistoricoPartial
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UsuarioPasswordHistoricoPartial
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof UsuarioPasswordHistoricoPartial
     */
    'usuCreacion'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof UsuarioPasswordHistoricoPartial
     */
    'usuModificacion'?: number | null;
}
/**
 * (tsType: UsuarioPasswordHistoricoWithRelations, schemaOptions: { includeRelations: true })
 * @export
 * @interface UsuarioPasswordHistoricoWithRelations
 */
export interface UsuarioPasswordHistoricoWithRelations {
    /**
     * 
     * @type {number}
     * @memberof UsuarioPasswordHistoricoWithRelations
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof UsuarioPasswordHistoricoWithRelations
     */
    'usuarioId': number;
    /**
     * 
     * @type {string}
     * @memberof UsuarioPasswordHistoricoWithRelations
     */
    'password'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UsuarioPasswordHistoricoWithRelations
     */
    'fechaInicio'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UsuarioPasswordHistoricoWithRelations
     */
    'fechaFin'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UsuarioPasswordHistoricoWithRelations
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UsuarioPasswordHistoricoWithRelations
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof UsuarioPasswordHistoricoWithRelations
     */
    'usuCreacion'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof UsuarioPasswordHistoricoWithRelations
     */
    'usuModificacion'?: number | null;
}
/**
 * 
 * @export
 * @interface UsuarioRestablecerPassword
 */
export interface UsuarioRestablecerPassword {
    /**
     * 
     * @type {number}
     * @memberof UsuarioRestablecerPassword
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof UsuarioRestablecerPassword
     */
    'usuarioId'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof UsuarioRestablecerPassword
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsuarioRestablecerPassword
     */
    'codigoRecuperacion'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsuarioRestablecerPassword
     */
    'expiraEn'?: string;
}
/**
 * 
 * @export
 * @interface UsuarioRestablecerPasswordFilter
 */
export interface UsuarioRestablecerPasswordFilter {
    /**
     * 
     * @type {number}
     * @memberof UsuarioRestablecerPasswordFilter
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof UsuarioRestablecerPasswordFilter
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof UsuarioRestablecerPasswordFilter
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof UsuarioRestablecerPasswordFilter
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {object | Set<string>}
     * @memberof UsuarioRestablecerPasswordFilter
     */
    'fields'?: object | Set<string>;
}
/**
 * 
 * @export
 * @interface UsuarioRestablecerPasswordFilter1
 */
export interface UsuarioRestablecerPasswordFilter1 {
    /**
     * 
     * @type {number}
     * @memberof UsuarioRestablecerPasswordFilter1
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof UsuarioRestablecerPasswordFilter1
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof UsuarioRestablecerPasswordFilter1
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof UsuarioRestablecerPasswordFilter1
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof UsuarioRestablecerPasswordFilter1
     */
    'where'?: { [key: string]: object; };
    /**
     * 
     * @type {object | Set<string>}
     * @memberof UsuarioRestablecerPasswordFilter1
     */
    'fields'?: object | Set<string>;
}
/**
 * (tsType: Partial<UsuarioRestablecerPassword>, schemaOptions: { partial: true })
 * @export
 * @interface UsuarioRestablecerPasswordPartial
 */
export interface UsuarioRestablecerPasswordPartial {
    /**
     * 
     * @type {number}
     * @memberof UsuarioRestablecerPasswordPartial
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof UsuarioRestablecerPasswordPartial
     */
    'usuarioId'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof UsuarioRestablecerPasswordPartial
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsuarioRestablecerPasswordPartial
     */
    'codigoRecuperacion'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsuarioRestablecerPasswordPartial
     */
    'expiraEn'?: string;
}
/**
 * (tsType: UsuarioRestablecerPasswordWithRelations, schemaOptions: { includeRelations: true })
 * @export
 * @interface UsuarioRestablecerPasswordWithRelations
 */
export interface UsuarioRestablecerPasswordWithRelations {
    /**
     * 
     * @type {number}
     * @memberof UsuarioRestablecerPasswordWithRelations
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof UsuarioRestablecerPasswordWithRelations
     */
    'usuarioId'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof UsuarioRestablecerPasswordWithRelations
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsuarioRestablecerPasswordWithRelations
     */
    'codigoRecuperacion'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsuarioRestablecerPasswordWithRelations
     */
    'expiraEn'?: string;
}
/**
 * 
 * @export
 * @interface UsuarioScopeFilter
 */
export interface UsuarioScopeFilter {
    /**
     * 
     * @type {number}
     * @memberof UsuarioScopeFilter
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof UsuarioScopeFilter
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof UsuarioScopeFilter
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof UsuarioScopeFilter
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof UsuarioScopeFilter
     */
    'where'?: { [key: string]: object; };
    /**
     * 
     * @type {any | Set<string>}
     * @memberof UsuarioScopeFilter
     */
    'fields'?: any | Set<string>;
    /**
     * 
     * @type {Array<{ [key: string]: object; }>}
     * @memberof UsuarioScopeFilter
     */
    'include'?: Array<{ [key: string]: object; }>;
}
/**
 * (tsType: UsuarioWithRelations, schemaOptions: { includeRelations: true })
 * @export
 * @interface UsuarioWithRelations
 */
export interface UsuarioWithRelations {
    /**
     * 
     * @type {number}
     * @memberof UsuarioWithRelations
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof UsuarioWithRelations
     */
    'empresaId': number;
    /**
     * 
     * @type {number}
     * @memberof UsuarioWithRelations
     */
    'rolId': number;
    /**
     * 
     * @type {number}
     * @memberof UsuarioWithRelations
     */
    'idiomaId': number;
    /**
     * 
     * @type {string}
     * @memberof UsuarioWithRelations
     */
    'nombre'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsuarioWithRelations
     */
    'mail'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsuarioWithRelations
     */
    'activoSn'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsuarioWithRelations
     */
    'telefono'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsuarioWithRelations
     */
    'avatar'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsuarioWithRelations
     */
    'fechaCreacion'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsuarioWithRelations
     */
    'fechaModificacion'?: string;
    /**
     * 
     * @type {number}
     * @memberof UsuarioWithRelations
     */
    'usuCreacion'?: number;
    /**
     * 
     * @type {number}
     * @memberof UsuarioWithRelations
     */
    'usuModificacion'?: number;
    /**
     * 
     * @type {string}
     * @memberof UsuarioWithRelations
     */
    'fechaInactivo'?: string;
    /**
     * 
     * @type {number}
     * @memberof UsuarioWithRelations
     */
    'usuInactivo'?: number;
    /**
     * 
     * @type {string}
     * @memberof UsuarioWithRelations
     */
    'roles'?: string;
    /**
     * 
     * @type {UsuarioCredencialesWithRelations}
     * @memberof UsuarioWithRelations
     */
    'userCredentials'?: UsuarioCredencialesWithRelations;
}

/**
 * ArchivoControllerApi - axios parameter creator
 * @export
 */
export const ArchivoControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archivoControllerCount: async (where?: { [key: string]: object; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/archivos/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NewArchivo} [newArchivo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archivoControllerCreate: async (newArchivo?: NewArchivo, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/archivos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newArchivo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archivoControllerDeleteById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('archivoControllerDeleteById', 'id', id)
            const localVarPath = `/archivos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ArchivoFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archivoControllerFind: async (filter?: ArchivoFilter1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/archivos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {ArchivoFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archivoControllerFindById: async (id: number, filter?: ArchivoFilter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('archivoControllerFindById', 'id', id)
            const localVarPath = `/archivos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {Archivo} [archivo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archivoControllerReplaceById: async (id: number, archivo?: Archivo, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('archivoControllerReplaceById', 'id', id)
            const localVarPath = `/archivos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(archivo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {ArchivoPartial} [archivoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archivoControllerUpdateAll: async (where?: { [key: string]: object; }, archivoPartial?: ArchivoPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/archivos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(archivoPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {ArchivoPartial} [archivoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archivoControllerUpdateById: async (id: number, archivoPartial?: ArchivoPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('archivoControllerUpdateById', 'id', id)
            const localVarPath = `/archivos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(archivoPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ArchivoControllerApi - functional programming interface
 * @export
 */
export const ArchivoControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ArchivoControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async archivoControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.archivoControllerCount(where, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {NewArchivo} [newArchivo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async archivoControllerCreate(newArchivo?: NewArchivo, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Archivo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.archivoControllerCreate(newArchivo, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async archivoControllerDeleteById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.archivoControllerDeleteById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ArchivoFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async archivoControllerFind(filter?: ArchivoFilter1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ArchivoWithRelations>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.archivoControllerFind(filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {ArchivoFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async archivoControllerFindById(id: number, filter?: ArchivoFilter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ArchivoWithRelations>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.archivoControllerFindById(id, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {Archivo} [archivo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async archivoControllerReplaceById(id: number, archivo?: Archivo, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.archivoControllerReplaceById(id, archivo, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {ArchivoPartial} [archivoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async archivoControllerUpdateAll(where?: { [key: string]: object; }, archivoPartial?: ArchivoPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.archivoControllerUpdateAll(where, archivoPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {ArchivoPartial} [archivoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async archivoControllerUpdateById(id: number, archivoPartial?: ArchivoPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.archivoControllerUpdateById(id, archivoPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ArchivoControllerApi - factory interface
 * @export
 */
export const ArchivoControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ArchivoControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archivoControllerCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.archivoControllerCount(where, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NewArchivo} [newArchivo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archivoControllerCreate(newArchivo?: NewArchivo, options?: any): AxiosPromise<Archivo> {
            return localVarFp.archivoControllerCreate(newArchivo, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archivoControllerDeleteById(id: number, options?: any): AxiosPromise<any> {
            return localVarFp.archivoControllerDeleteById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ArchivoFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archivoControllerFind(filter?: ArchivoFilter1, options?: any): AxiosPromise<Array<ArchivoWithRelations>> {
            return localVarFp.archivoControllerFind(filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {ArchivoFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archivoControllerFindById(id: number, filter?: ArchivoFilter, options?: any): AxiosPromise<ArchivoWithRelations> {
            return localVarFp.archivoControllerFindById(id, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {Archivo} [archivo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archivoControllerReplaceById(id: number, archivo?: Archivo, options?: any): AxiosPromise<any> {
            return localVarFp.archivoControllerReplaceById(id, archivo, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {ArchivoPartial} [archivoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archivoControllerUpdateAll(where?: { [key: string]: object; }, archivoPartial?: ArchivoPartial, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.archivoControllerUpdateAll(where, archivoPartial, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {ArchivoPartial} [archivoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archivoControllerUpdateById(id: number, archivoPartial?: ArchivoPartial, options?: any): AxiosPromise<any> {
            return localVarFp.archivoControllerUpdateById(id, archivoPartial, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ArchivoControllerApi - object-oriented interface
 * @export
 * @class ArchivoControllerApi
 * @extends {BaseAPI}
 */
export class ArchivoControllerApi extends BaseAPI {
    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArchivoControllerApi
     */
    public archivoControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig) {
        return ArchivoControllerApiFp(this.configuration).archivoControllerCount(where, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NewArchivo} [newArchivo] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArchivoControllerApi
     */
    public archivoControllerCreate(newArchivo?: NewArchivo, options?: AxiosRequestConfig) {
        return ArchivoControllerApiFp(this.configuration).archivoControllerCreate(newArchivo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArchivoControllerApi
     */
    public archivoControllerDeleteById(id: number, options?: AxiosRequestConfig) {
        return ArchivoControllerApiFp(this.configuration).archivoControllerDeleteById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ArchivoFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArchivoControllerApi
     */
    public archivoControllerFind(filter?: ArchivoFilter1, options?: AxiosRequestConfig) {
        return ArchivoControllerApiFp(this.configuration).archivoControllerFind(filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {ArchivoFilter} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArchivoControllerApi
     */
    public archivoControllerFindById(id: number, filter?: ArchivoFilter, options?: AxiosRequestConfig) {
        return ArchivoControllerApiFp(this.configuration).archivoControllerFindById(id, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {Archivo} [archivo] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArchivoControllerApi
     */
    public archivoControllerReplaceById(id: number, archivo?: Archivo, options?: AxiosRequestConfig) {
        return ArchivoControllerApiFp(this.configuration).archivoControllerReplaceById(id, archivo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {ArchivoPartial} [archivoPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArchivoControllerApi
     */
    public archivoControllerUpdateAll(where?: { [key: string]: object; }, archivoPartial?: ArchivoPartial, options?: AxiosRequestConfig) {
        return ArchivoControllerApiFp(this.configuration).archivoControllerUpdateAll(where, archivoPartial, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {ArchivoPartial} [archivoPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArchivoControllerApi
     */
    public archivoControllerUpdateById(id: number, archivoPartial?: ArchivoPartial, options?: AxiosRequestConfig) {
        return ArchivoControllerApiFp(this.configuration).archivoControllerUpdateById(id, archivoPartial, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CompruebaImagenControllerApi - axios parameter creator
 * @export
 */
export const CompruebaImagenControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} imagenUrl 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        compruebaImagenControllerCompruebaImagenEndpoint: async (imagenUrl: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'imagenUrl' is not null or undefined
            assertParamExists('compruebaImagenControllerCompruebaImagenEndpoint', 'imagenUrl', imagenUrl)
            const localVarPath = `/compruebaImagen/{imagenUrl}`
                .replace(`{${"imagenUrl"}}`, encodeURIComponent(String(imagenUrl)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CompruebaImagenControllerApi - functional programming interface
 * @export
 */
export const CompruebaImagenControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CompruebaImagenControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} imagenUrl 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async compruebaImagenControllerCompruebaImagenEndpoint(imagenUrl: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.compruebaImagenControllerCompruebaImagenEndpoint(imagenUrl, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CompruebaImagenControllerApi - factory interface
 * @export
 */
export const CompruebaImagenControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CompruebaImagenControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {number} imagenUrl 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        compruebaImagenControllerCompruebaImagenEndpoint(imagenUrl: number, options?: any): AxiosPromise<object> {
            return localVarFp.compruebaImagenControllerCompruebaImagenEndpoint(imagenUrl, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CompruebaImagenControllerApi - object-oriented interface
 * @export
 * @class CompruebaImagenControllerApi
 * @extends {BaseAPI}
 */
export class CompruebaImagenControllerApi extends BaseAPI {
    /**
     * 
     * @param {number} imagenUrl 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompruebaImagenControllerApi
     */
    public compruebaImagenControllerCompruebaImagenEndpoint(imagenUrl: number, options?: AxiosRequestConfig) {
        return CompruebaImagenControllerApiFp(this.configuration).compruebaImagenControllerCompruebaImagenEndpoint(imagenUrl, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * EmpresaControllerApi - axios parameter creator
 * @export
 */
export const EmpresaControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        empresaControllerCount: async (where?: { [key: string]: object; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/empresas/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NewEmpresa} [newEmpresa] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        empresaControllerCreate: async (newEmpresa?: NewEmpresa, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/empresas`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newEmpresa, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        empresaControllerDeleteById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('empresaControllerDeleteById', 'id', id)
            const localVarPath = `/empresas/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {EmpresaFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        empresaControllerFind: async (filter?: EmpresaFilter1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/empresas`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {EmpresaFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        empresaControllerFindById: async (id: number, filter?: EmpresaFilter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('empresaControllerFindById', 'id', id)
            const localVarPath = `/empresas/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {Empresa} [empresa] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        empresaControllerReplaceById: async (id: number, empresa?: Empresa, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('empresaControllerReplaceById', 'id', id)
            const localVarPath = `/empresas/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(empresa, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {EmpresaPartial} [empresaPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        empresaControllerUpdateAll: async (where?: { [key: string]: object; }, empresaPartial?: EmpresaPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/empresas`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(empresaPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {EmpresaPartial} [empresaPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        empresaControllerUpdateById: async (id: number, empresaPartial?: EmpresaPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('empresaControllerUpdateById', 'id', id)
            const localVarPath = `/empresas/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(empresaPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EmpresaControllerApi - functional programming interface
 * @export
 */
export const EmpresaControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EmpresaControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async empresaControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.empresaControllerCount(where, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {NewEmpresa} [newEmpresa] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async empresaControllerCreate(newEmpresa?: NewEmpresa, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Empresa>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.empresaControllerCreate(newEmpresa, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async empresaControllerDeleteById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.empresaControllerDeleteById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {EmpresaFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async empresaControllerFind(filter?: EmpresaFilter1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<EmpresaWithRelations>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.empresaControllerFind(filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {EmpresaFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async empresaControllerFindById(id: number, filter?: EmpresaFilter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmpresaWithRelations>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.empresaControllerFindById(id, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {Empresa} [empresa] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async empresaControllerReplaceById(id: number, empresa?: Empresa, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.empresaControllerReplaceById(id, empresa, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {EmpresaPartial} [empresaPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async empresaControllerUpdateAll(where?: { [key: string]: object; }, empresaPartial?: EmpresaPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.empresaControllerUpdateAll(where, empresaPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {EmpresaPartial} [empresaPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async empresaControllerUpdateById(id: number, empresaPartial?: EmpresaPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.empresaControllerUpdateById(id, empresaPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EmpresaControllerApi - factory interface
 * @export
 */
export const EmpresaControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EmpresaControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        empresaControllerCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.empresaControllerCount(where, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NewEmpresa} [newEmpresa] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        empresaControllerCreate(newEmpresa?: NewEmpresa, options?: any): AxiosPromise<Empresa> {
            return localVarFp.empresaControllerCreate(newEmpresa, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        empresaControllerDeleteById(id: number, options?: any): AxiosPromise<any> {
            return localVarFp.empresaControllerDeleteById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {EmpresaFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        empresaControllerFind(filter?: EmpresaFilter1, options?: any): AxiosPromise<Array<EmpresaWithRelations>> {
            return localVarFp.empresaControllerFind(filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {EmpresaFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        empresaControllerFindById(id: number, filter?: EmpresaFilter, options?: any): AxiosPromise<EmpresaWithRelations> {
            return localVarFp.empresaControllerFindById(id, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {Empresa} [empresa] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        empresaControllerReplaceById(id: number, empresa?: Empresa, options?: any): AxiosPromise<any> {
            return localVarFp.empresaControllerReplaceById(id, empresa, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {EmpresaPartial} [empresaPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        empresaControllerUpdateAll(where?: { [key: string]: object; }, empresaPartial?: EmpresaPartial, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.empresaControllerUpdateAll(where, empresaPartial, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {EmpresaPartial} [empresaPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        empresaControllerUpdateById(id: number, empresaPartial?: EmpresaPartial, options?: any): AxiosPromise<any> {
            return localVarFp.empresaControllerUpdateById(id, empresaPartial, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EmpresaControllerApi - object-oriented interface
 * @export
 * @class EmpresaControllerApi
 * @extends {BaseAPI}
 */
export class EmpresaControllerApi extends BaseAPI {
    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmpresaControllerApi
     */
    public empresaControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig) {
        return EmpresaControllerApiFp(this.configuration).empresaControllerCount(where, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NewEmpresa} [newEmpresa] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmpresaControllerApi
     */
    public empresaControllerCreate(newEmpresa?: NewEmpresa, options?: AxiosRequestConfig) {
        return EmpresaControllerApiFp(this.configuration).empresaControllerCreate(newEmpresa, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmpresaControllerApi
     */
    public empresaControllerDeleteById(id: number, options?: AxiosRequestConfig) {
        return EmpresaControllerApiFp(this.configuration).empresaControllerDeleteById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {EmpresaFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmpresaControllerApi
     */
    public empresaControllerFind(filter?: EmpresaFilter1, options?: AxiosRequestConfig) {
        return EmpresaControllerApiFp(this.configuration).empresaControllerFind(filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {EmpresaFilter} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmpresaControllerApi
     */
    public empresaControllerFindById(id: number, filter?: EmpresaFilter, options?: AxiosRequestConfig) {
        return EmpresaControllerApiFp(this.configuration).empresaControllerFindById(id, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {Empresa} [empresa] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmpresaControllerApi
     */
    public empresaControllerReplaceById(id: number, empresa?: Empresa, options?: AxiosRequestConfig) {
        return EmpresaControllerApiFp(this.configuration).empresaControllerReplaceById(id, empresa, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {EmpresaPartial} [empresaPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmpresaControllerApi
     */
    public empresaControllerUpdateAll(where?: { [key: string]: object; }, empresaPartial?: EmpresaPartial, options?: AxiosRequestConfig) {
        return EmpresaControllerApiFp(this.configuration).empresaControllerUpdateAll(where, empresaPartial, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {EmpresaPartial} [empresaPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmpresaControllerApi
     */
    public empresaControllerUpdateById(id: number, empresaPartial?: EmpresaPartial, options?: AxiosRequestConfig) {
        return EmpresaControllerApiFp(this.configuration).empresaControllerUpdateById(id, empresaPartial, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * FileUploadControllerApi - axios parameter creator
 * @export
 */
export const FileUploadControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} folderPathDir 
         * @param {string} fileName 
         * @param {any} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fileUploadControllerAvatarUpload: async (folderPathDir: string, fileName: string, file?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'folderPathDir' is not null or undefined
            assertParamExists('fileUploadControllerAvatarUpload', 'folderPathDir', folderPathDir)
            // verify required parameter 'fileName' is not null or undefined
            assertParamExists('fileUploadControllerAvatarUpload', 'fileName', fileName)
            const localVarPath = `/avatar-upload/{folderPathDir}/{fileName}`
                .replace(`{${"folderPathDir"}}`, encodeURIComponent(String(folderPathDir)))
                .replace(`{${"fileName"}}`, encodeURIComponent(String(fileName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} imagen 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fileUploadControllerDeleteFileByName: async (imagen: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'imagen' is not null or undefined
            assertParamExists('fileUploadControllerDeleteFileByName', 'imagen', imagen)
            const localVarPath = `/files/{imagen}`
                .replace(`{${"imagen"}}`, encodeURIComponent(String(imagen)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} folderPathDir 
         * @param {string} fileName 
         * @param {any} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fileUploadControllerFileUpload: async (folderPathDir: string, fileName: string, file?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'folderPathDir' is not null or undefined
            assertParamExists('fileUploadControllerFileUpload', 'folderPathDir', folderPathDir)
            // verify required parameter 'fileName' is not null or undefined
            assertParamExists('fileUploadControllerFileUpload', 'fileName', fileName)
            const localVarPath = `/files-upload/{folderPathDir}/{fileName}`
                .replace(`{${"folderPathDir"}}`, encodeURIComponent(String(folderPathDir)))
                .replace(`{${"fileName"}}`, encodeURIComponent(String(fileName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} folderPathDir 
         * @param {string} fileName 
         * @param {any} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fileUploadControllerImageUpload: async (folderPathDir: string, fileName: string, file?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'folderPathDir' is not null or undefined
            assertParamExists('fileUploadControllerImageUpload', 'folderPathDir', folderPathDir)
            // verify required parameter 'fileName' is not null or undefined
            assertParamExists('fileUploadControllerImageUpload', 'fileName', fileName)
            const localVarPath = `/images-upload/{folderPathDir}/{fileName}`
                .replace(`{${"folderPathDir"}}`, encodeURIComponent(String(folderPathDir)))
                .replace(`{${"fileName"}}`, encodeURIComponent(String(fileName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FileUploadControllerApi - functional programming interface
 * @export
 */
export const FileUploadControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FileUploadControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} folderPathDir 
         * @param {string} fileName 
         * @param {any} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fileUploadControllerAvatarUpload(folderPathDir: string, fileName: string, file?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fileUploadControllerAvatarUpload(folderPathDir, fileName, file, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} imagen 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fileUploadControllerDeleteFileByName(imagen: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fileUploadControllerDeleteFileByName(imagen, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} folderPathDir 
         * @param {string} fileName 
         * @param {any} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fileUploadControllerFileUpload(folderPathDir: string, fileName: string, file?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fileUploadControllerFileUpload(folderPathDir, fileName, file, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} folderPathDir 
         * @param {string} fileName 
         * @param {any} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fileUploadControllerImageUpload(folderPathDir: string, fileName: string, file?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fileUploadControllerImageUpload(folderPathDir, fileName, file, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FileUploadControllerApi - factory interface
 * @export
 */
export const FileUploadControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FileUploadControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {string} folderPathDir 
         * @param {string} fileName 
         * @param {any} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fileUploadControllerAvatarUpload(folderPathDir: string, fileName: string, file?: any, options?: any): AxiosPromise<object> {
            return localVarFp.fileUploadControllerAvatarUpload(folderPathDir, fileName, file, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} imagen 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fileUploadControllerDeleteFileByName(imagen: string, options?: any): AxiosPromise<any> {
            return localVarFp.fileUploadControllerDeleteFileByName(imagen, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} folderPathDir 
         * @param {string} fileName 
         * @param {any} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fileUploadControllerFileUpload(folderPathDir: string, fileName: string, file?: any, options?: any): AxiosPromise<object> {
            return localVarFp.fileUploadControllerFileUpload(folderPathDir, fileName, file, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} folderPathDir 
         * @param {string} fileName 
         * @param {any} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fileUploadControllerImageUpload(folderPathDir: string, fileName: string, file?: any, options?: any): AxiosPromise<object> {
            return localVarFp.fileUploadControllerImageUpload(folderPathDir, fileName, file, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FileUploadControllerApi - object-oriented interface
 * @export
 * @class FileUploadControllerApi
 * @extends {BaseAPI}
 */
export class FileUploadControllerApi extends BaseAPI {
    /**
     * 
     * @param {string} folderPathDir 
     * @param {string} fileName 
     * @param {any} [file] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileUploadControllerApi
     */
    public fileUploadControllerAvatarUpload(folderPathDir: string, fileName: string, file?: any, options?: AxiosRequestConfig) {
        return FileUploadControllerApiFp(this.configuration).fileUploadControllerAvatarUpload(folderPathDir, fileName, file, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} imagen 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileUploadControllerApi
     */
    public fileUploadControllerDeleteFileByName(imagen: string, options?: AxiosRequestConfig) {
        return FileUploadControllerApiFp(this.configuration).fileUploadControllerDeleteFileByName(imagen, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} folderPathDir 
     * @param {string} fileName 
     * @param {any} [file] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileUploadControllerApi
     */
    public fileUploadControllerFileUpload(folderPathDir: string, fileName: string, file?: any, options?: AxiosRequestConfig) {
        return FileUploadControllerApiFp(this.configuration).fileUploadControllerFileUpload(folderPathDir, fileName, file, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} folderPathDir 
     * @param {string} fileName 
     * @param {any} [file] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileUploadControllerApi
     */
    public fileUploadControllerImageUpload(folderPathDir: string, fileName: string, file?: any, options?: AxiosRequestConfig) {
        return FileUploadControllerApiFp(this.configuration).fileUploadControllerImageUpload(folderPathDir, fileName, file, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * IdiomaControllerApi - axios parameter creator
 * @export
 */
export const IdiomaControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        idiomaControllerCount: async (where?: { [key: string]: object; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/idiomas/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NewIdioma} [newIdioma] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        idiomaControllerCreate: async (newIdioma?: NewIdioma, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/idiomas`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newIdioma, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        idiomaControllerDeleteById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('idiomaControllerDeleteById', 'id', id)
            const localVarPath = `/idiomas/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {IdiomaFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        idiomaControllerFind: async (filter?: IdiomaFilter1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/idiomas`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {IdiomaFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        idiomaControllerFindById: async (id: number, filter?: IdiomaFilter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('idiomaControllerFindById', 'id', id)
            const localVarPath = `/idiomas/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {Idioma} [idioma] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        idiomaControllerReplaceById: async (id: number, idioma?: Idioma, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('idiomaControllerReplaceById', 'id', id)
            const localVarPath = `/idiomas/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(idioma, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {IdiomaPartial} [idiomaPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        idiomaControllerUpdateAll: async (where?: { [key: string]: object; }, idiomaPartial?: IdiomaPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/idiomas`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(idiomaPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {IdiomaPartial} [idiomaPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        idiomaControllerUpdateById: async (id: number, idiomaPartial?: IdiomaPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('idiomaControllerUpdateById', 'id', id)
            const localVarPath = `/idiomas/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(idiomaPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * IdiomaControllerApi - functional programming interface
 * @export
 */
export const IdiomaControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = IdiomaControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async idiomaControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.idiomaControllerCount(where, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {NewIdioma} [newIdioma] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async idiomaControllerCreate(newIdioma?: NewIdioma, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Idioma>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.idiomaControllerCreate(newIdioma, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async idiomaControllerDeleteById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.idiomaControllerDeleteById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {IdiomaFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async idiomaControllerFind(filter?: IdiomaFilter1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<IdiomaWithRelations>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.idiomaControllerFind(filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {IdiomaFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async idiomaControllerFindById(id: number, filter?: IdiomaFilter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdiomaWithRelations>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.idiomaControllerFindById(id, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {Idioma} [idioma] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async idiomaControllerReplaceById(id: number, idioma?: Idioma, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.idiomaControllerReplaceById(id, idioma, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {IdiomaPartial} [idiomaPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async idiomaControllerUpdateAll(where?: { [key: string]: object; }, idiomaPartial?: IdiomaPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.idiomaControllerUpdateAll(where, idiomaPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {IdiomaPartial} [idiomaPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async idiomaControllerUpdateById(id: number, idiomaPartial?: IdiomaPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.idiomaControllerUpdateById(id, idiomaPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * IdiomaControllerApi - factory interface
 * @export
 */
export const IdiomaControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = IdiomaControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        idiomaControllerCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.idiomaControllerCount(where, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NewIdioma} [newIdioma] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        idiomaControllerCreate(newIdioma?: NewIdioma, options?: any): AxiosPromise<Idioma> {
            return localVarFp.idiomaControllerCreate(newIdioma, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        idiomaControllerDeleteById(id: number, options?: any): AxiosPromise<any> {
            return localVarFp.idiomaControllerDeleteById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {IdiomaFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        idiomaControllerFind(filter?: IdiomaFilter1, options?: any): AxiosPromise<Array<IdiomaWithRelations>> {
            return localVarFp.idiomaControllerFind(filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {IdiomaFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        idiomaControllerFindById(id: number, filter?: IdiomaFilter, options?: any): AxiosPromise<IdiomaWithRelations> {
            return localVarFp.idiomaControllerFindById(id, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {Idioma} [idioma] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        idiomaControllerReplaceById(id: number, idioma?: Idioma, options?: any): AxiosPromise<any> {
            return localVarFp.idiomaControllerReplaceById(id, idioma, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {IdiomaPartial} [idiomaPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        idiomaControllerUpdateAll(where?: { [key: string]: object; }, idiomaPartial?: IdiomaPartial, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.idiomaControllerUpdateAll(where, idiomaPartial, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {IdiomaPartial} [idiomaPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        idiomaControllerUpdateById(id: number, idiomaPartial?: IdiomaPartial, options?: any): AxiosPromise<any> {
            return localVarFp.idiomaControllerUpdateById(id, idiomaPartial, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * IdiomaControllerApi - object-oriented interface
 * @export
 * @class IdiomaControllerApi
 * @extends {BaseAPI}
 */
export class IdiomaControllerApi extends BaseAPI {
    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdiomaControllerApi
     */
    public idiomaControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig) {
        return IdiomaControllerApiFp(this.configuration).idiomaControllerCount(where, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NewIdioma} [newIdioma] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdiomaControllerApi
     */
    public idiomaControllerCreate(newIdioma?: NewIdioma, options?: AxiosRequestConfig) {
        return IdiomaControllerApiFp(this.configuration).idiomaControllerCreate(newIdioma, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdiomaControllerApi
     */
    public idiomaControllerDeleteById(id: number, options?: AxiosRequestConfig) {
        return IdiomaControllerApiFp(this.configuration).idiomaControllerDeleteById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {IdiomaFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdiomaControllerApi
     */
    public idiomaControllerFind(filter?: IdiomaFilter1, options?: AxiosRequestConfig) {
        return IdiomaControllerApiFp(this.configuration).idiomaControllerFind(filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {IdiomaFilter} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdiomaControllerApi
     */
    public idiomaControllerFindById(id: number, filter?: IdiomaFilter, options?: AxiosRequestConfig) {
        return IdiomaControllerApiFp(this.configuration).idiomaControllerFindById(id, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {Idioma} [idioma] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdiomaControllerApi
     */
    public idiomaControllerReplaceById(id: number, idioma?: Idioma, options?: AxiosRequestConfig) {
        return IdiomaControllerApiFp(this.configuration).idiomaControllerReplaceById(id, idioma, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {IdiomaPartial} [idiomaPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdiomaControllerApi
     */
    public idiomaControllerUpdateAll(where?: { [key: string]: object; }, idiomaPartial?: IdiomaPartial, options?: AxiosRequestConfig) {
        return IdiomaControllerApiFp(this.configuration).idiomaControllerUpdateAll(where, idiomaPartial, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {IdiomaPartial} [idiomaPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdiomaControllerApi
     */
    public idiomaControllerUpdateById(id: number, idiomaPartial?: IdiomaPartial, options?: AxiosRequestConfig) {
        return IdiomaControllerApiFp(this.configuration).idiomaControllerUpdateById(id, idiomaPartial, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ListaPermisosControllerApi - axios parameter creator
 * @export
 */
export const ListaPermisosControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listaPermisosControllerCount: async (where?: { [key: string]: object; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/lista-permisos/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NewListaPermisos} [newListaPermisos] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listaPermisosControllerCreate: async (newListaPermisos?: NewListaPermisos, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/lista-permisos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newListaPermisos, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listaPermisosControllerDeleteById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listaPermisosControllerDeleteById', 'id', id)
            const localVarPath = `/lista-permisos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ListaPermisosFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listaPermisosControllerFind: async (filter?: ListaPermisosFilter1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/lista-permisos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {ListaPermisosFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listaPermisosControllerFindById: async (id: number, filter?: ListaPermisosFilter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listaPermisosControllerFindById', 'id', id)
            const localVarPath = `/lista-permisos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {ListaPermisos} [listaPermisos] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listaPermisosControllerReplaceById: async (id: number, listaPermisos?: ListaPermisos, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listaPermisosControllerReplaceById', 'id', id)
            const localVarPath = `/lista-permisos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(listaPermisos, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {ListaPermisosPartial} [listaPermisosPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listaPermisosControllerUpdateAll: async (where?: { [key: string]: object; }, listaPermisosPartial?: ListaPermisosPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/lista-permisos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(listaPermisosPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {ListaPermisosPartial} [listaPermisosPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listaPermisosControllerUpdateById: async (id: number, listaPermisosPartial?: ListaPermisosPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listaPermisosControllerUpdateById', 'id', id)
            const localVarPath = `/lista-permisos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(listaPermisosPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListaPermisosControllerApi - functional programming interface
 * @export
 */
export const ListaPermisosControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListaPermisosControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listaPermisosControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listaPermisosControllerCount(where, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {NewListaPermisos} [newListaPermisos] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listaPermisosControllerCreate(newListaPermisos?: NewListaPermisos, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListaPermisos>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listaPermisosControllerCreate(newListaPermisos, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listaPermisosControllerDeleteById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listaPermisosControllerDeleteById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ListaPermisosFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listaPermisosControllerFind(filter?: ListaPermisosFilter1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ListaPermisosWithRelations>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listaPermisosControllerFind(filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {ListaPermisosFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listaPermisosControllerFindById(id: number, filter?: ListaPermisosFilter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListaPermisosWithRelations>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listaPermisosControllerFindById(id, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {ListaPermisos} [listaPermisos] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listaPermisosControllerReplaceById(id: number, listaPermisos?: ListaPermisos, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listaPermisosControllerReplaceById(id, listaPermisos, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {ListaPermisosPartial} [listaPermisosPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listaPermisosControllerUpdateAll(where?: { [key: string]: object; }, listaPermisosPartial?: ListaPermisosPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listaPermisosControllerUpdateAll(where, listaPermisosPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {ListaPermisosPartial} [listaPermisosPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listaPermisosControllerUpdateById(id: number, listaPermisosPartial?: ListaPermisosPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listaPermisosControllerUpdateById(id, listaPermisosPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListaPermisosControllerApi - factory interface
 * @export
 */
export const ListaPermisosControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListaPermisosControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listaPermisosControllerCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.listaPermisosControllerCount(where, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NewListaPermisos} [newListaPermisos] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listaPermisosControllerCreate(newListaPermisos?: NewListaPermisos, options?: any): AxiosPromise<ListaPermisos> {
            return localVarFp.listaPermisosControllerCreate(newListaPermisos, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listaPermisosControllerDeleteById(id: number, options?: any): AxiosPromise<any> {
            return localVarFp.listaPermisosControllerDeleteById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ListaPermisosFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listaPermisosControllerFind(filter?: ListaPermisosFilter1, options?: any): AxiosPromise<Array<ListaPermisosWithRelations>> {
            return localVarFp.listaPermisosControllerFind(filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {ListaPermisosFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listaPermisosControllerFindById(id: number, filter?: ListaPermisosFilter, options?: any): AxiosPromise<ListaPermisosWithRelations> {
            return localVarFp.listaPermisosControllerFindById(id, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {ListaPermisos} [listaPermisos] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listaPermisosControllerReplaceById(id: number, listaPermisos?: ListaPermisos, options?: any): AxiosPromise<any> {
            return localVarFp.listaPermisosControllerReplaceById(id, listaPermisos, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {ListaPermisosPartial} [listaPermisosPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listaPermisosControllerUpdateAll(where?: { [key: string]: object; }, listaPermisosPartial?: ListaPermisosPartial, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.listaPermisosControllerUpdateAll(where, listaPermisosPartial, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {ListaPermisosPartial} [listaPermisosPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listaPermisosControllerUpdateById(id: number, listaPermisosPartial?: ListaPermisosPartial, options?: any): AxiosPromise<any> {
            return localVarFp.listaPermisosControllerUpdateById(id, listaPermisosPartial, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListaPermisosControllerApi - object-oriented interface
 * @export
 * @class ListaPermisosControllerApi
 * @extends {BaseAPI}
 */
export class ListaPermisosControllerApi extends BaseAPI {
    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListaPermisosControllerApi
     */
    public listaPermisosControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig) {
        return ListaPermisosControllerApiFp(this.configuration).listaPermisosControllerCount(where, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NewListaPermisos} [newListaPermisos] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListaPermisosControllerApi
     */
    public listaPermisosControllerCreate(newListaPermisos?: NewListaPermisos, options?: AxiosRequestConfig) {
        return ListaPermisosControllerApiFp(this.configuration).listaPermisosControllerCreate(newListaPermisos, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListaPermisosControllerApi
     */
    public listaPermisosControllerDeleteById(id: number, options?: AxiosRequestConfig) {
        return ListaPermisosControllerApiFp(this.configuration).listaPermisosControllerDeleteById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ListaPermisosFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListaPermisosControllerApi
     */
    public listaPermisosControllerFind(filter?: ListaPermisosFilter1, options?: AxiosRequestConfig) {
        return ListaPermisosControllerApiFp(this.configuration).listaPermisosControllerFind(filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {ListaPermisosFilter} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListaPermisosControllerApi
     */
    public listaPermisosControllerFindById(id: number, filter?: ListaPermisosFilter, options?: AxiosRequestConfig) {
        return ListaPermisosControllerApiFp(this.configuration).listaPermisosControllerFindById(id, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {ListaPermisos} [listaPermisos] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListaPermisosControllerApi
     */
    public listaPermisosControllerReplaceById(id: number, listaPermisos?: ListaPermisos, options?: AxiosRequestConfig) {
        return ListaPermisosControllerApiFp(this.configuration).listaPermisosControllerReplaceById(id, listaPermisos, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {ListaPermisosPartial} [listaPermisosPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListaPermisosControllerApi
     */
    public listaPermisosControllerUpdateAll(where?: { [key: string]: object; }, listaPermisosPartial?: ListaPermisosPartial, options?: AxiosRequestConfig) {
        return ListaPermisosControllerApiFp(this.configuration).listaPermisosControllerUpdateAll(where, listaPermisosPartial, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {ListaPermisosPartial} [listaPermisosPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListaPermisosControllerApi
     */
    public listaPermisosControllerUpdateById(id: number, listaPermisosPartial?: ListaPermisosPartial, options?: AxiosRequestConfig) {
        return ListaPermisosControllerApiFp(this.configuration).listaPermisosControllerUpdateById(id, listaPermisosPartial, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * LogUsuarioControllerApi - axios parameter creator
 * @export
 */
export const LogUsuarioControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logUsuarioControllerCount: async (where?: { [key: string]: object; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/log-usuarios/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NewLogUsuario} [newLogUsuario] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logUsuarioControllerCreate: async (newLogUsuario?: NewLogUsuario, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/log-usuarios`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newLogUsuario, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logUsuarioControllerDeleteById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('logUsuarioControllerDeleteById', 'id', id)
            const localVarPath = `/log-usuarios/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {LogUsuarioFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logUsuarioControllerFind: async (filter?: LogUsuarioFilter1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/log-usuarios`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {LogUsuarioFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logUsuarioControllerFindById: async (id: number, filter?: LogUsuarioFilter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('logUsuarioControllerFindById', 'id', id)
            const localVarPath = `/log-usuarios/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {LogUsuario} [logUsuario] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logUsuarioControllerReplaceById: async (id: number, logUsuario?: LogUsuario, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('logUsuarioControllerReplaceById', 'id', id)
            const localVarPath = `/log-usuarios/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(logUsuario, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {LogUsuarioPartial} [logUsuarioPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logUsuarioControllerUpdateAll: async (where?: { [key: string]: object; }, logUsuarioPartial?: LogUsuarioPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/log-usuarios`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(logUsuarioPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {LogUsuarioPartial} [logUsuarioPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logUsuarioControllerUpdateById: async (id: number, logUsuarioPartial?: LogUsuarioPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('logUsuarioControllerUpdateById', 'id', id)
            const localVarPath = `/log-usuarios/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(logUsuarioPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LogUsuarioControllerApi - functional programming interface
 * @export
 */
export const LogUsuarioControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LogUsuarioControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logUsuarioControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logUsuarioControllerCount(where, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {NewLogUsuario} [newLogUsuario] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logUsuarioControllerCreate(newLogUsuario?: NewLogUsuario, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LogUsuario>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logUsuarioControllerCreate(newLogUsuario, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logUsuarioControllerDeleteById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logUsuarioControllerDeleteById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {LogUsuarioFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logUsuarioControllerFind(filter?: LogUsuarioFilter1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<LogUsuarioWithRelations>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logUsuarioControllerFind(filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {LogUsuarioFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logUsuarioControllerFindById(id: number, filter?: LogUsuarioFilter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LogUsuarioWithRelations>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logUsuarioControllerFindById(id, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {LogUsuario} [logUsuario] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logUsuarioControllerReplaceById(id: number, logUsuario?: LogUsuario, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logUsuarioControllerReplaceById(id, logUsuario, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {LogUsuarioPartial} [logUsuarioPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logUsuarioControllerUpdateAll(where?: { [key: string]: object; }, logUsuarioPartial?: LogUsuarioPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logUsuarioControllerUpdateAll(where, logUsuarioPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {LogUsuarioPartial} [logUsuarioPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logUsuarioControllerUpdateById(id: number, logUsuarioPartial?: LogUsuarioPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logUsuarioControllerUpdateById(id, logUsuarioPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LogUsuarioControllerApi - factory interface
 * @export
 */
export const LogUsuarioControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LogUsuarioControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logUsuarioControllerCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.logUsuarioControllerCount(where, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NewLogUsuario} [newLogUsuario] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logUsuarioControllerCreate(newLogUsuario?: NewLogUsuario, options?: any): AxiosPromise<LogUsuario> {
            return localVarFp.logUsuarioControllerCreate(newLogUsuario, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logUsuarioControllerDeleteById(id: number, options?: any): AxiosPromise<any> {
            return localVarFp.logUsuarioControllerDeleteById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {LogUsuarioFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logUsuarioControllerFind(filter?: LogUsuarioFilter1, options?: any): AxiosPromise<Array<LogUsuarioWithRelations>> {
            return localVarFp.logUsuarioControllerFind(filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {LogUsuarioFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logUsuarioControllerFindById(id: number, filter?: LogUsuarioFilter, options?: any): AxiosPromise<LogUsuarioWithRelations> {
            return localVarFp.logUsuarioControllerFindById(id, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {LogUsuario} [logUsuario] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logUsuarioControllerReplaceById(id: number, logUsuario?: LogUsuario, options?: any): AxiosPromise<any> {
            return localVarFp.logUsuarioControllerReplaceById(id, logUsuario, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {LogUsuarioPartial} [logUsuarioPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logUsuarioControllerUpdateAll(where?: { [key: string]: object; }, logUsuarioPartial?: LogUsuarioPartial, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.logUsuarioControllerUpdateAll(where, logUsuarioPartial, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {LogUsuarioPartial} [logUsuarioPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logUsuarioControllerUpdateById(id: number, logUsuarioPartial?: LogUsuarioPartial, options?: any): AxiosPromise<any> {
            return localVarFp.logUsuarioControllerUpdateById(id, logUsuarioPartial, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LogUsuarioControllerApi - object-oriented interface
 * @export
 * @class LogUsuarioControllerApi
 * @extends {BaseAPI}
 */
export class LogUsuarioControllerApi extends BaseAPI {
    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogUsuarioControllerApi
     */
    public logUsuarioControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig) {
        return LogUsuarioControllerApiFp(this.configuration).logUsuarioControllerCount(where, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NewLogUsuario} [newLogUsuario] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogUsuarioControllerApi
     */
    public logUsuarioControllerCreate(newLogUsuario?: NewLogUsuario, options?: AxiosRequestConfig) {
        return LogUsuarioControllerApiFp(this.configuration).logUsuarioControllerCreate(newLogUsuario, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogUsuarioControllerApi
     */
    public logUsuarioControllerDeleteById(id: number, options?: AxiosRequestConfig) {
        return LogUsuarioControllerApiFp(this.configuration).logUsuarioControllerDeleteById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {LogUsuarioFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogUsuarioControllerApi
     */
    public logUsuarioControllerFind(filter?: LogUsuarioFilter1, options?: AxiosRequestConfig) {
        return LogUsuarioControllerApiFp(this.configuration).logUsuarioControllerFind(filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {LogUsuarioFilter} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogUsuarioControllerApi
     */
    public logUsuarioControllerFindById(id: number, filter?: LogUsuarioFilter, options?: AxiosRequestConfig) {
        return LogUsuarioControllerApiFp(this.configuration).logUsuarioControllerFindById(id, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {LogUsuario} [logUsuario] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogUsuarioControllerApi
     */
    public logUsuarioControllerReplaceById(id: number, logUsuario?: LogUsuario, options?: AxiosRequestConfig) {
        return LogUsuarioControllerApiFp(this.configuration).logUsuarioControllerReplaceById(id, logUsuario, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {LogUsuarioPartial} [logUsuarioPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogUsuarioControllerApi
     */
    public logUsuarioControllerUpdateAll(where?: { [key: string]: object; }, logUsuarioPartial?: LogUsuarioPartial, options?: AxiosRequestConfig) {
        return LogUsuarioControllerApiFp(this.configuration).logUsuarioControllerUpdateAll(where, logUsuarioPartial, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {LogUsuarioPartial} [logUsuarioPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogUsuarioControllerApi
     */
    public logUsuarioControllerUpdateById(id: number, logUsuarioPartial?: LogUsuarioPartial, options?: AxiosRequestConfig) {
        return LogUsuarioControllerApiFp(this.configuration).logUsuarioControllerUpdateById(id, logUsuarioPartial, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * PermisoControllerApi - axios parameter creator
 * @export
 */
export const PermisoControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [rolId] 
         * @param {string} [modulo] 
         * @param {string} [controlador] 
         * @param {string} [accion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        permisoControllerBuscarPermiso: async (rolId?: string, modulo?: string, controlador?: string, accion?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/buscarPermiso`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (rolId !== undefined) {
                localVarQueryParameter['rolId'] = rolId;
            }

            if (modulo !== undefined) {
                localVarQueryParameter['modulo'] = modulo;
            }

            if (controlador !== undefined) {
                localVarQueryParameter['controlador'] = controlador;
            }

            if (accion !== undefined) {
                localVarQueryParameter['accion'] = accion;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        permisoControllerCount: async (where?: { [key: string]: object; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/permisos/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NewPermiso} [newPermiso] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        permisoControllerCreate: async (newPermiso?: NewPermiso, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/permisos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newPermiso, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        permisoControllerDeleteById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('permisoControllerDeleteById', 'id', id)
            const localVarPath = `/permisos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {PermisoFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        permisoControllerFind: async (filter?: PermisoFilter1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/permisos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {PermisoFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        permisoControllerFindById: async (id: number, filter?: PermisoFilter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('permisoControllerFindById', 'id', id)
            const localVarPath = `/permisos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {Permiso} [permiso] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        permisoControllerReplaceById: async (id: number, permiso?: Permiso, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('permisoControllerReplaceById', 'id', id)
            const localVarPath = `/permisos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(permiso, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {PermisoPartial} [permisoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        permisoControllerUpdateAll: async (where?: { [key: string]: object; }, permisoPartial?: PermisoPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/permisos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(permisoPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {PermisoPartial} [permisoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        permisoControllerUpdateById: async (id: number, permisoPartial?: PermisoPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('permisoControllerUpdateById', 'id', id)
            const localVarPath = `/permisos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(permisoPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        permisoControllerVistaEmpresaRolPermiso: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/vistaEmpresaRolPermiso`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PermisoControllerApi - functional programming interface
 * @export
 */
export const PermisoControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PermisoControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} [rolId] 
         * @param {string} [modulo] 
         * @param {string} [controlador] 
         * @param {string} [accion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async permisoControllerBuscarPermiso(rolId?: string, modulo?: string, controlador?: string, accion?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PermisoWithRelations>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.permisoControllerBuscarPermiso(rolId, modulo, controlador, accion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async permisoControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.permisoControllerCount(where, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {NewPermiso} [newPermiso] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async permisoControllerCreate(newPermiso?: NewPermiso, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Permiso>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.permisoControllerCreate(newPermiso, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async permisoControllerDeleteById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.permisoControllerDeleteById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {PermisoFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async permisoControllerFind(filter?: PermisoFilter1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PermisoWithRelations>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.permisoControllerFind(filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {PermisoFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async permisoControllerFindById(id: number, filter?: PermisoFilter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PermisoWithRelations>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.permisoControllerFindById(id, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {Permiso} [permiso] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async permisoControllerReplaceById(id: number, permiso?: Permiso, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.permisoControllerReplaceById(id, permiso, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {PermisoPartial} [permisoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async permisoControllerUpdateAll(where?: { [key: string]: object; }, permisoPartial?: PermisoPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.permisoControllerUpdateAll(where, permisoPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {PermisoPartial} [permisoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async permisoControllerUpdateById(id: number, permisoPartial?: PermisoPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.permisoControllerUpdateById(id, permisoPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async permisoControllerVistaEmpresaRolPermiso(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.permisoControllerVistaEmpresaRolPermiso(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PermisoControllerApi - factory interface
 * @export
 */
export const PermisoControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PermisoControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {string} [rolId] 
         * @param {string} [modulo] 
         * @param {string} [controlador] 
         * @param {string} [accion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        permisoControllerBuscarPermiso(rolId?: string, modulo?: string, controlador?: string, accion?: string, options?: any): AxiosPromise<Array<PermisoWithRelations>> {
            return localVarFp.permisoControllerBuscarPermiso(rolId, modulo, controlador, accion, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        permisoControllerCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.permisoControllerCount(where, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NewPermiso} [newPermiso] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        permisoControllerCreate(newPermiso?: NewPermiso, options?: any): AxiosPromise<Permiso> {
            return localVarFp.permisoControllerCreate(newPermiso, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        permisoControllerDeleteById(id: number, options?: any): AxiosPromise<any> {
            return localVarFp.permisoControllerDeleteById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PermisoFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        permisoControllerFind(filter?: PermisoFilter1, options?: any): AxiosPromise<Array<PermisoWithRelations>> {
            return localVarFp.permisoControllerFind(filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {PermisoFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        permisoControllerFindById(id: number, filter?: PermisoFilter, options?: any): AxiosPromise<PermisoWithRelations> {
            return localVarFp.permisoControllerFindById(id, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {Permiso} [permiso] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        permisoControllerReplaceById(id: number, permiso?: Permiso, options?: any): AxiosPromise<any> {
            return localVarFp.permisoControllerReplaceById(id, permiso, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {PermisoPartial} [permisoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        permisoControllerUpdateAll(where?: { [key: string]: object; }, permisoPartial?: PermisoPartial, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.permisoControllerUpdateAll(where, permisoPartial, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {PermisoPartial} [permisoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        permisoControllerUpdateById(id: number, permisoPartial?: PermisoPartial, options?: any): AxiosPromise<any> {
            return localVarFp.permisoControllerUpdateById(id, permisoPartial, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        permisoControllerVistaEmpresaRolPermiso(options?: any): AxiosPromise<object> {
            return localVarFp.permisoControllerVistaEmpresaRolPermiso(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PermisoControllerApi - object-oriented interface
 * @export
 * @class PermisoControllerApi
 * @extends {BaseAPI}
 */
export class PermisoControllerApi extends BaseAPI {
    /**
     * 
     * @param {string} [rolId] 
     * @param {string} [modulo] 
     * @param {string} [controlador] 
     * @param {string} [accion] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermisoControllerApi
     */
    public permisoControllerBuscarPermiso(rolId?: string, modulo?: string, controlador?: string, accion?: string, options?: AxiosRequestConfig) {
        return PermisoControllerApiFp(this.configuration).permisoControllerBuscarPermiso(rolId, modulo, controlador, accion, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermisoControllerApi
     */
    public permisoControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig) {
        return PermisoControllerApiFp(this.configuration).permisoControllerCount(where, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NewPermiso} [newPermiso] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermisoControllerApi
     */
    public permisoControllerCreate(newPermiso?: NewPermiso, options?: AxiosRequestConfig) {
        return PermisoControllerApiFp(this.configuration).permisoControllerCreate(newPermiso, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermisoControllerApi
     */
    public permisoControllerDeleteById(id: number, options?: AxiosRequestConfig) {
        return PermisoControllerApiFp(this.configuration).permisoControllerDeleteById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PermisoFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermisoControllerApi
     */
    public permisoControllerFind(filter?: PermisoFilter1, options?: AxiosRequestConfig) {
        return PermisoControllerApiFp(this.configuration).permisoControllerFind(filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {PermisoFilter} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermisoControllerApi
     */
    public permisoControllerFindById(id: number, filter?: PermisoFilter, options?: AxiosRequestConfig) {
        return PermisoControllerApiFp(this.configuration).permisoControllerFindById(id, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {Permiso} [permiso] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermisoControllerApi
     */
    public permisoControllerReplaceById(id: number, permiso?: Permiso, options?: AxiosRequestConfig) {
        return PermisoControllerApiFp(this.configuration).permisoControllerReplaceById(id, permiso, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {PermisoPartial} [permisoPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermisoControllerApi
     */
    public permisoControllerUpdateAll(where?: { [key: string]: object; }, permisoPartial?: PermisoPartial, options?: AxiosRequestConfig) {
        return PermisoControllerApiFp(this.configuration).permisoControllerUpdateAll(where, permisoPartial, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {PermisoPartial} [permisoPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermisoControllerApi
     */
    public permisoControllerUpdateById(id: number, permisoPartial?: PermisoPartial, options?: AxiosRequestConfig) {
        return PermisoControllerApiFp(this.configuration).permisoControllerUpdateById(id, permisoPartial, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermisoControllerApi
     */
    public permisoControllerVistaEmpresaRolPermiso(options?: AxiosRequestConfig) {
        return PermisoControllerApiFp(this.configuration).permisoControllerVistaEmpresaRolPermiso(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * RefrescarTokenControllerApi - axios parameter creator
 * @export
 */
export const RefrescarTokenControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refrescarTokenControllerCount: async (where?: { [key: string]: object; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/refrescar-tokens/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NewRefrescarToken} [newRefrescarToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refrescarTokenControllerCreate: async (newRefrescarToken?: NewRefrescarToken, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/refrescar-tokens`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newRefrescarToken, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refrescarTokenControllerDeleteById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('refrescarTokenControllerDeleteById', 'id', id)
            const localVarPath = `/refrescar-tokens/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RefrescarTokenFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refrescarTokenControllerFind: async (filter?: RefrescarTokenFilter1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/refrescar-tokens`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {RefrescarTokenFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refrescarTokenControllerFindById: async (id: number, filter?: RefrescarTokenFilter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('refrescarTokenControllerFindById', 'id', id)
            const localVarPath = `/refrescar-tokens/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {RefrescarToken} [refrescarToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refrescarTokenControllerReplaceById: async (id: number, refrescarToken?: RefrescarToken, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('refrescarTokenControllerReplaceById', 'id', id)
            const localVarPath = `/refrescar-tokens/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(refrescarToken, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {RefrescarTokenPartial} [refrescarTokenPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refrescarTokenControllerUpdateAll: async (where?: { [key: string]: object; }, refrescarTokenPartial?: RefrescarTokenPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/refrescar-tokens`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(refrescarTokenPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {RefrescarTokenPartial} [refrescarTokenPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refrescarTokenControllerUpdateById: async (id: number, refrescarTokenPartial?: RefrescarTokenPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('refrescarTokenControllerUpdateById', 'id', id)
            const localVarPath = `/refrescar-tokens/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(refrescarTokenPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RefrescarTokenControllerApi - functional programming interface
 * @export
 */
export const RefrescarTokenControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RefrescarTokenControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async refrescarTokenControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.refrescarTokenControllerCount(where, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {NewRefrescarToken} [newRefrescarToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async refrescarTokenControllerCreate(newRefrescarToken?: NewRefrescarToken, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RefrescarToken>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.refrescarTokenControllerCreate(newRefrescarToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async refrescarTokenControllerDeleteById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.refrescarTokenControllerDeleteById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {RefrescarTokenFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async refrescarTokenControllerFind(filter?: RefrescarTokenFilter1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RefrescarTokenWithRelations>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.refrescarTokenControllerFind(filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {RefrescarTokenFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async refrescarTokenControllerFindById(id: number, filter?: RefrescarTokenFilter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RefrescarTokenWithRelations>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.refrescarTokenControllerFindById(id, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {RefrescarToken} [refrescarToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async refrescarTokenControllerReplaceById(id: number, refrescarToken?: RefrescarToken, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.refrescarTokenControllerReplaceById(id, refrescarToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {RefrescarTokenPartial} [refrescarTokenPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async refrescarTokenControllerUpdateAll(where?: { [key: string]: object; }, refrescarTokenPartial?: RefrescarTokenPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.refrescarTokenControllerUpdateAll(where, refrescarTokenPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {RefrescarTokenPartial} [refrescarTokenPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async refrescarTokenControllerUpdateById(id: number, refrescarTokenPartial?: RefrescarTokenPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.refrescarTokenControllerUpdateById(id, refrescarTokenPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RefrescarTokenControllerApi - factory interface
 * @export
 */
export const RefrescarTokenControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RefrescarTokenControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refrescarTokenControllerCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.refrescarTokenControllerCount(where, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NewRefrescarToken} [newRefrescarToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refrescarTokenControllerCreate(newRefrescarToken?: NewRefrescarToken, options?: any): AxiosPromise<RefrescarToken> {
            return localVarFp.refrescarTokenControllerCreate(newRefrescarToken, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refrescarTokenControllerDeleteById(id: number, options?: any): AxiosPromise<any> {
            return localVarFp.refrescarTokenControllerDeleteById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RefrescarTokenFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refrescarTokenControllerFind(filter?: RefrescarTokenFilter1, options?: any): AxiosPromise<Array<RefrescarTokenWithRelations>> {
            return localVarFp.refrescarTokenControllerFind(filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {RefrescarTokenFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refrescarTokenControllerFindById(id: number, filter?: RefrescarTokenFilter, options?: any): AxiosPromise<RefrescarTokenWithRelations> {
            return localVarFp.refrescarTokenControllerFindById(id, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {RefrescarToken} [refrescarToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refrescarTokenControllerReplaceById(id: number, refrescarToken?: RefrescarToken, options?: any): AxiosPromise<any> {
            return localVarFp.refrescarTokenControllerReplaceById(id, refrescarToken, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {RefrescarTokenPartial} [refrescarTokenPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refrescarTokenControllerUpdateAll(where?: { [key: string]: object; }, refrescarTokenPartial?: RefrescarTokenPartial, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.refrescarTokenControllerUpdateAll(where, refrescarTokenPartial, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {RefrescarTokenPartial} [refrescarTokenPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refrescarTokenControllerUpdateById(id: number, refrescarTokenPartial?: RefrescarTokenPartial, options?: any): AxiosPromise<any> {
            return localVarFp.refrescarTokenControllerUpdateById(id, refrescarTokenPartial, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RefrescarTokenControllerApi - object-oriented interface
 * @export
 * @class RefrescarTokenControllerApi
 * @extends {BaseAPI}
 */
export class RefrescarTokenControllerApi extends BaseAPI {
    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RefrescarTokenControllerApi
     */
    public refrescarTokenControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig) {
        return RefrescarTokenControllerApiFp(this.configuration).refrescarTokenControllerCount(where, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NewRefrescarToken} [newRefrescarToken] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RefrescarTokenControllerApi
     */
    public refrescarTokenControllerCreate(newRefrescarToken?: NewRefrescarToken, options?: AxiosRequestConfig) {
        return RefrescarTokenControllerApiFp(this.configuration).refrescarTokenControllerCreate(newRefrescarToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RefrescarTokenControllerApi
     */
    public refrescarTokenControllerDeleteById(id: number, options?: AxiosRequestConfig) {
        return RefrescarTokenControllerApiFp(this.configuration).refrescarTokenControllerDeleteById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RefrescarTokenFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RefrescarTokenControllerApi
     */
    public refrescarTokenControllerFind(filter?: RefrescarTokenFilter1, options?: AxiosRequestConfig) {
        return RefrescarTokenControllerApiFp(this.configuration).refrescarTokenControllerFind(filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {RefrescarTokenFilter} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RefrescarTokenControllerApi
     */
    public refrescarTokenControllerFindById(id: number, filter?: RefrescarTokenFilter, options?: AxiosRequestConfig) {
        return RefrescarTokenControllerApiFp(this.configuration).refrescarTokenControllerFindById(id, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {RefrescarToken} [refrescarToken] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RefrescarTokenControllerApi
     */
    public refrescarTokenControllerReplaceById(id: number, refrescarToken?: RefrescarToken, options?: AxiosRequestConfig) {
        return RefrescarTokenControllerApiFp(this.configuration).refrescarTokenControllerReplaceById(id, refrescarToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {RefrescarTokenPartial} [refrescarTokenPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RefrescarTokenControllerApi
     */
    public refrescarTokenControllerUpdateAll(where?: { [key: string]: object; }, refrescarTokenPartial?: RefrescarTokenPartial, options?: AxiosRequestConfig) {
        return RefrescarTokenControllerApiFp(this.configuration).refrescarTokenControllerUpdateAll(where, refrescarTokenPartial, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {RefrescarTokenPartial} [refrescarTokenPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RefrescarTokenControllerApi
     */
    public refrescarTokenControllerUpdateById(id: number, refrescarTokenPartial?: RefrescarTokenPartial, options?: AxiosRequestConfig) {
        return RefrescarTokenControllerApiFp(this.configuration).refrescarTokenControllerUpdateById(id, refrescarTokenPartial, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * RolControllerApi - axios parameter creator
 * @export
 */
export const RolControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [nombre] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolControllerBuscarIdRol: async (nombre?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/buscarIdRol`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (nombre !== undefined) {
                localVarQueryParameter['nombre'] = nombre;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolControllerCount: async (where?: { [key: string]: object; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/roles/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NewRol} [newRol] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolControllerCreate: async (newRol?: NewRol, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/roles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newRol, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolControllerDeleteById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('rolControllerDeleteById', 'id', id)
            const localVarPath = `/roles/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RolFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolControllerFind: async (filter?: RolFilter1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/roles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {RolFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolControllerFindById: async (id: number, filter?: RolFilter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('rolControllerFindById', 'id', id)
            const localVarPath = `/roles/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {Rol} [rol] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolControllerReplaceById: async (id: number, rol?: Rol, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('rolControllerReplaceById', 'id', id)
            const localVarPath = `/roles/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(rol, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {RolPartial} [rolPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolControllerUpdateAll: async (where?: { [key: string]: object; }, rolPartial?: RolPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/roles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(rolPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {RolPartial} [rolPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolControllerUpdateById: async (id: number, rolPartial?: RolPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('rolControllerUpdateById', 'id', id)
            const localVarPath = `/roles/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(rolPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RolFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolControllerVistaEmpresaRol: async (filter?: RolFilter1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/vistaEmpresaRol`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolControllerVistaEmpresaRolCount: async (where?: { [key: string]: object; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/vistaEmpresaRolCount`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RolControllerApi - functional programming interface
 * @export
 */
export const RolControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RolControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} [nombre] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rolControllerBuscarIdRol(nombre?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RolWithRelations>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rolControllerBuscarIdRol(nombre, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rolControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rolControllerCount(where, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {NewRol} [newRol] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rolControllerCreate(newRol?: NewRol, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Rol>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rolControllerCreate(newRol, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rolControllerDeleteById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rolControllerDeleteById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {RolFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rolControllerFind(filter?: RolFilter1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RolWithRelations>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rolControllerFind(filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {RolFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rolControllerFindById(id: number, filter?: RolFilter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RolWithRelations>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rolControllerFindById(id, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {Rol} [rol] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rolControllerReplaceById(id: number, rol?: Rol, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rolControllerReplaceById(id, rol, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {RolPartial} [rolPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rolControllerUpdateAll(where?: { [key: string]: object; }, rolPartial?: RolPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rolControllerUpdateAll(where, rolPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {RolPartial} [rolPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rolControllerUpdateById(id: number, rolPartial?: RolPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rolControllerUpdateById(id, rolPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {RolFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rolControllerVistaEmpresaRol(filter?: RolFilter1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rolControllerVistaEmpresaRol(filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rolControllerVistaEmpresaRolCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rolControllerVistaEmpresaRolCount(where, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RolControllerApi - factory interface
 * @export
 */
export const RolControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RolControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {string} [nombre] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolControllerBuscarIdRol(nombre?: string, options?: any): AxiosPromise<Array<RolWithRelations>> {
            return localVarFp.rolControllerBuscarIdRol(nombre, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolControllerCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.rolControllerCount(where, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NewRol} [newRol] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolControllerCreate(newRol?: NewRol, options?: any): AxiosPromise<Rol> {
            return localVarFp.rolControllerCreate(newRol, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolControllerDeleteById(id: number, options?: any): AxiosPromise<any> {
            return localVarFp.rolControllerDeleteById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RolFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolControllerFind(filter?: RolFilter1, options?: any): AxiosPromise<Array<RolWithRelations>> {
            return localVarFp.rolControllerFind(filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {RolFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolControllerFindById(id: number, filter?: RolFilter, options?: any): AxiosPromise<RolWithRelations> {
            return localVarFp.rolControllerFindById(id, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {Rol} [rol] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolControllerReplaceById(id: number, rol?: Rol, options?: any): AxiosPromise<any> {
            return localVarFp.rolControllerReplaceById(id, rol, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {RolPartial} [rolPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolControllerUpdateAll(where?: { [key: string]: object; }, rolPartial?: RolPartial, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.rolControllerUpdateAll(where, rolPartial, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {RolPartial} [rolPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolControllerUpdateById(id: number, rolPartial?: RolPartial, options?: any): AxiosPromise<any> {
            return localVarFp.rolControllerUpdateById(id, rolPartial, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RolFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolControllerVistaEmpresaRol(filter?: RolFilter1, options?: any): AxiosPromise<object> {
            return localVarFp.rolControllerVistaEmpresaRol(filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolControllerVistaEmpresaRolCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<object> {
            return localVarFp.rolControllerVistaEmpresaRolCount(where, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RolControllerApi - object-oriented interface
 * @export
 * @class RolControllerApi
 * @extends {BaseAPI}
 */
export class RolControllerApi extends BaseAPI {
    /**
     * 
     * @param {string} [nombre] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolControllerApi
     */
    public rolControllerBuscarIdRol(nombre?: string, options?: AxiosRequestConfig) {
        return RolControllerApiFp(this.configuration).rolControllerBuscarIdRol(nombre, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolControllerApi
     */
    public rolControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig) {
        return RolControllerApiFp(this.configuration).rolControllerCount(where, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NewRol} [newRol] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolControllerApi
     */
    public rolControllerCreate(newRol?: NewRol, options?: AxiosRequestConfig) {
        return RolControllerApiFp(this.configuration).rolControllerCreate(newRol, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolControllerApi
     */
    public rolControllerDeleteById(id: number, options?: AxiosRequestConfig) {
        return RolControllerApiFp(this.configuration).rolControllerDeleteById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RolFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolControllerApi
     */
    public rolControllerFind(filter?: RolFilter1, options?: AxiosRequestConfig) {
        return RolControllerApiFp(this.configuration).rolControllerFind(filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {RolFilter} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolControllerApi
     */
    public rolControllerFindById(id: number, filter?: RolFilter, options?: AxiosRequestConfig) {
        return RolControllerApiFp(this.configuration).rolControllerFindById(id, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {Rol} [rol] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolControllerApi
     */
    public rolControllerReplaceById(id: number, rol?: Rol, options?: AxiosRequestConfig) {
        return RolControllerApiFp(this.configuration).rolControllerReplaceById(id, rol, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {RolPartial} [rolPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolControllerApi
     */
    public rolControllerUpdateAll(where?: { [key: string]: object; }, rolPartial?: RolPartial, options?: AxiosRequestConfig) {
        return RolControllerApiFp(this.configuration).rolControllerUpdateAll(where, rolPartial, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {RolPartial} [rolPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolControllerApi
     */
    public rolControllerUpdateById(id: number, rolPartial?: RolPartial, options?: AxiosRequestConfig) {
        return RolControllerApiFp(this.configuration).rolControllerUpdateById(id, rolPartial, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RolFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolControllerApi
     */
    public rolControllerVistaEmpresaRol(filter?: RolFilter1, options?: AxiosRequestConfig) {
        return RolControllerApiFp(this.configuration).rolControllerVistaEmpresaRol(filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolControllerApi
     */
    public rolControllerVistaEmpresaRolCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig) {
        return RolControllerApiFp(this.configuration).rolControllerVistaEmpresaRolCount(where, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SeccionControllerApi - axios parameter creator
 * @export
 */
export const SeccionControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seccionControllerCount: async (where?: { [key: string]: object; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/seccions/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NewSeccion} [newSeccion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seccionControllerCreate: async (newSeccion?: NewSeccion, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/seccions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newSeccion, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seccionControllerDeleteById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('seccionControllerDeleteById', 'id', id)
            const localVarPath = `/seccions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SeccionFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seccionControllerFind: async (filter?: SeccionFilter1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/seccions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {SeccionFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seccionControllerFindById: async (id: number, filter?: SeccionFilter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('seccionControllerFindById', 'id', id)
            const localVarPath = `/seccions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {Seccion} [seccion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seccionControllerReplaceById: async (id: number, seccion?: Seccion, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('seccionControllerReplaceById', 'id', id)
            const localVarPath = `/seccions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(seccion, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {SeccionPartial} [seccionPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seccionControllerUpdateAll: async (where?: { [key: string]: object; }, seccionPartial?: SeccionPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/seccions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(seccionPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {SeccionPartial} [seccionPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seccionControllerUpdateById: async (id: number, seccionPartial?: SeccionPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('seccionControllerUpdateById', 'id', id)
            const localVarPath = `/seccions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(seccionPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SeccionControllerApi - functional programming interface
 * @export
 */
export const SeccionControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SeccionControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async seccionControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.seccionControllerCount(where, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {NewSeccion} [newSeccion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async seccionControllerCreate(newSeccion?: NewSeccion, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Seccion>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.seccionControllerCreate(newSeccion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async seccionControllerDeleteById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.seccionControllerDeleteById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {SeccionFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async seccionControllerFind(filter?: SeccionFilter1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SeccionWithRelations>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.seccionControllerFind(filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {SeccionFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async seccionControllerFindById(id: number, filter?: SeccionFilter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SeccionWithRelations>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.seccionControllerFindById(id, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {Seccion} [seccion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async seccionControllerReplaceById(id: number, seccion?: Seccion, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.seccionControllerReplaceById(id, seccion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {SeccionPartial} [seccionPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async seccionControllerUpdateAll(where?: { [key: string]: object; }, seccionPartial?: SeccionPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.seccionControllerUpdateAll(where, seccionPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {SeccionPartial} [seccionPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async seccionControllerUpdateById(id: number, seccionPartial?: SeccionPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.seccionControllerUpdateById(id, seccionPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SeccionControllerApi - factory interface
 * @export
 */
export const SeccionControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SeccionControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seccionControllerCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.seccionControllerCount(where, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NewSeccion} [newSeccion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seccionControllerCreate(newSeccion?: NewSeccion, options?: any): AxiosPromise<Seccion> {
            return localVarFp.seccionControllerCreate(newSeccion, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seccionControllerDeleteById(id: number, options?: any): AxiosPromise<any> {
            return localVarFp.seccionControllerDeleteById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SeccionFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seccionControllerFind(filter?: SeccionFilter1, options?: any): AxiosPromise<Array<SeccionWithRelations>> {
            return localVarFp.seccionControllerFind(filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {SeccionFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seccionControllerFindById(id: number, filter?: SeccionFilter, options?: any): AxiosPromise<SeccionWithRelations> {
            return localVarFp.seccionControllerFindById(id, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {Seccion} [seccion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seccionControllerReplaceById(id: number, seccion?: Seccion, options?: any): AxiosPromise<any> {
            return localVarFp.seccionControllerReplaceById(id, seccion, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {SeccionPartial} [seccionPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seccionControllerUpdateAll(where?: { [key: string]: object; }, seccionPartial?: SeccionPartial, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.seccionControllerUpdateAll(where, seccionPartial, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {SeccionPartial} [seccionPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seccionControllerUpdateById(id: number, seccionPartial?: SeccionPartial, options?: any): AxiosPromise<any> {
            return localVarFp.seccionControllerUpdateById(id, seccionPartial, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SeccionControllerApi - object-oriented interface
 * @export
 * @class SeccionControllerApi
 * @extends {BaseAPI}
 */
export class SeccionControllerApi extends BaseAPI {
    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SeccionControllerApi
     */
    public seccionControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig) {
        return SeccionControllerApiFp(this.configuration).seccionControllerCount(where, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NewSeccion} [newSeccion] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SeccionControllerApi
     */
    public seccionControllerCreate(newSeccion?: NewSeccion, options?: AxiosRequestConfig) {
        return SeccionControllerApiFp(this.configuration).seccionControllerCreate(newSeccion, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SeccionControllerApi
     */
    public seccionControllerDeleteById(id: number, options?: AxiosRequestConfig) {
        return SeccionControllerApiFp(this.configuration).seccionControllerDeleteById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SeccionFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SeccionControllerApi
     */
    public seccionControllerFind(filter?: SeccionFilter1, options?: AxiosRequestConfig) {
        return SeccionControllerApiFp(this.configuration).seccionControllerFind(filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {SeccionFilter} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SeccionControllerApi
     */
    public seccionControllerFindById(id: number, filter?: SeccionFilter, options?: AxiosRequestConfig) {
        return SeccionControllerApiFp(this.configuration).seccionControllerFindById(id, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {Seccion} [seccion] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SeccionControllerApi
     */
    public seccionControllerReplaceById(id: number, seccion?: Seccion, options?: AxiosRequestConfig) {
        return SeccionControllerApiFp(this.configuration).seccionControllerReplaceById(id, seccion, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {SeccionPartial} [seccionPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SeccionControllerApi
     */
    public seccionControllerUpdateAll(where?: { [key: string]: object; }, seccionPartial?: SeccionPartial, options?: AxiosRequestConfig) {
        return SeccionControllerApiFp(this.configuration).seccionControllerUpdateAll(where, seccionPartial, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {SeccionPartial} [seccionPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SeccionControllerApi
     */
    public seccionControllerUpdateById(id: number, seccionPartial?: SeccionPartial, options?: AxiosRequestConfig) {
        return SeccionControllerApiFp(this.configuration).seccionControllerUpdateById(id, seccionPartial, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TipoArchivoControllerApi - axios parameter creator
 * @export
 */
export const TipoArchivoControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tipoArchivoControllerCount: async (where?: { [key: string]: object; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tipo-archivos/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NewTipoArchivo} [newTipoArchivo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tipoArchivoControllerCreate: async (newTipoArchivo?: NewTipoArchivo, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tipo-archivos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newTipoArchivo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tipoArchivoControllerDeleteById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('tipoArchivoControllerDeleteById', 'id', id)
            const localVarPath = `/tipo-archivos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {TipoArchivoFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tipoArchivoControllerFind: async (filter?: TipoArchivoFilter1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tipo-archivos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {TipoArchivoFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tipoArchivoControllerFindById: async (id: number, filter?: TipoArchivoFilter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('tipoArchivoControllerFindById', 'id', id)
            const localVarPath = `/tipo-archivos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {TipoArchivo} [tipoArchivo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tipoArchivoControllerReplaceById: async (id: number, tipoArchivo?: TipoArchivo, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('tipoArchivoControllerReplaceById', 'id', id)
            const localVarPath = `/tipo-archivos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(tipoArchivo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {TipoArchivoPartial} [tipoArchivoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tipoArchivoControllerUpdateAll: async (where?: { [key: string]: object; }, tipoArchivoPartial?: TipoArchivoPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tipo-archivos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(tipoArchivoPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {TipoArchivoPartial} [tipoArchivoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tipoArchivoControllerUpdateById: async (id: number, tipoArchivoPartial?: TipoArchivoPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('tipoArchivoControllerUpdateById', 'id', id)
            const localVarPath = `/tipo-archivos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(tipoArchivoPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TipoArchivoControllerApi - functional programming interface
 * @export
 */
export const TipoArchivoControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TipoArchivoControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tipoArchivoControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tipoArchivoControllerCount(where, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {NewTipoArchivo} [newTipoArchivo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tipoArchivoControllerCreate(newTipoArchivo?: NewTipoArchivo, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TipoArchivo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tipoArchivoControllerCreate(newTipoArchivo, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tipoArchivoControllerDeleteById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tipoArchivoControllerDeleteById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {TipoArchivoFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tipoArchivoControllerFind(filter?: TipoArchivoFilter1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TipoArchivoWithRelations>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tipoArchivoControllerFind(filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {TipoArchivoFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tipoArchivoControllerFindById(id: number, filter?: TipoArchivoFilter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TipoArchivoWithRelations>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tipoArchivoControllerFindById(id, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {TipoArchivo} [tipoArchivo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tipoArchivoControllerReplaceById(id: number, tipoArchivo?: TipoArchivo, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tipoArchivoControllerReplaceById(id, tipoArchivo, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {TipoArchivoPartial} [tipoArchivoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tipoArchivoControllerUpdateAll(where?: { [key: string]: object; }, tipoArchivoPartial?: TipoArchivoPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tipoArchivoControllerUpdateAll(where, tipoArchivoPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {TipoArchivoPartial} [tipoArchivoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tipoArchivoControllerUpdateById(id: number, tipoArchivoPartial?: TipoArchivoPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tipoArchivoControllerUpdateById(id, tipoArchivoPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TipoArchivoControllerApi - factory interface
 * @export
 */
export const TipoArchivoControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TipoArchivoControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tipoArchivoControllerCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.tipoArchivoControllerCount(where, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NewTipoArchivo} [newTipoArchivo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tipoArchivoControllerCreate(newTipoArchivo?: NewTipoArchivo, options?: any): AxiosPromise<TipoArchivo> {
            return localVarFp.tipoArchivoControllerCreate(newTipoArchivo, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tipoArchivoControllerDeleteById(id: number, options?: any): AxiosPromise<any> {
            return localVarFp.tipoArchivoControllerDeleteById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {TipoArchivoFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tipoArchivoControllerFind(filter?: TipoArchivoFilter1, options?: any): AxiosPromise<Array<TipoArchivoWithRelations>> {
            return localVarFp.tipoArchivoControllerFind(filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {TipoArchivoFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tipoArchivoControllerFindById(id: number, filter?: TipoArchivoFilter, options?: any): AxiosPromise<TipoArchivoWithRelations> {
            return localVarFp.tipoArchivoControllerFindById(id, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {TipoArchivo} [tipoArchivo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tipoArchivoControllerReplaceById(id: number, tipoArchivo?: TipoArchivo, options?: any): AxiosPromise<any> {
            return localVarFp.tipoArchivoControllerReplaceById(id, tipoArchivo, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {TipoArchivoPartial} [tipoArchivoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tipoArchivoControllerUpdateAll(where?: { [key: string]: object; }, tipoArchivoPartial?: TipoArchivoPartial, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.tipoArchivoControllerUpdateAll(where, tipoArchivoPartial, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {TipoArchivoPartial} [tipoArchivoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tipoArchivoControllerUpdateById(id: number, tipoArchivoPartial?: TipoArchivoPartial, options?: any): AxiosPromise<any> {
            return localVarFp.tipoArchivoControllerUpdateById(id, tipoArchivoPartial, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TipoArchivoControllerApi - object-oriented interface
 * @export
 * @class TipoArchivoControllerApi
 * @extends {BaseAPI}
 */
export class TipoArchivoControllerApi extends BaseAPI {
    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TipoArchivoControllerApi
     */
    public tipoArchivoControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig) {
        return TipoArchivoControllerApiFp(this.configuration).tipoArchivoControllerCount(where, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NewTipoArchivo} [newTipoArchivo] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TipoArchivoControllerApi
     */
    public tipoArchivoControllerCreate(newTipoArchivo?: NewTipoArchivo, options?: AxiosRequestConfig) {
        return TipoArchivoControllerApiFp(this.configuration).tipoArchivoControllerCreate(newTipoArchivo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TipoArchivoControllerApi
     */
    public tipoArchivoControllerDeleteById(id: number, options?: AxiosRequestConfig) {
        return TipoArchivoControllerApiFp(this.configuration).tipoArchivoControllerDeleteById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TipoArchivoFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TipoArchivoControllerApi
     */
    public tipoArchivoControllerFind(filter?: TipoArchivoFilter1, options?: AxiosRequestConfig) {
        return TipoArchivoControllerApiFp(this.configuration).tipoArchivoControllerFind(filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {TipoArchivoFilter} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TipoArchivoControllerApi
     */
    public tipoArchivoControllerFindById(id: number, filter?: TipoArchivoFilter, options?: AxiosRequestConfig) {
        return TipoArchivoControllerApiFp(this.configuration).tipoArchivoControllerFindById(id, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {TipoArchivo} [tipoArchivo] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TipoArchivoControllerApi
     */
    public tipoArchivoControllerReplaceById(id: number, tipoArchivo?: TipoArchivo, options?: AxiosRequestConfig) {
        return TipoArchivoControllerApiFp(this.configuration).tipoArchivoControllerReplaceById(id, tipoArchivo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {TipoArchivoPartial} [tipoArchivoPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TipoArchivoControllerApi
     */
    public tipoArchivoControllerUpdateAll(where?: { [key: string]: object; }, tipoArchivoPartial?: TipoArchivoPartial, options?: AxiosRequestConfig) {
        return TipoArchivoControllerApiFp(this.configuration).tipoArchivoControllerUpdateAll(where, tipoArchivoPartial, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {TipoArchivoPartial} [tipoArchivoPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TipoArchivoControllerApi
     */
    public tipoArchivoControllerUpdateById(id: number, tipoArchivoPartial?: TipoArchivoPartial, options?: AxiosRequestConfig) {
        return TipoArchivoControllerApiFp(this.configuration).tipoArchivoControllerUpdateById(id, tipoArchivoPartial, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TraduccionControllerApi - axios parameter creator
 * @export
 */
export const TraduccionControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        traduccionControllerCount: async (where?: { [key: string]: object; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/traduccions/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NewTraduccion} [newTraduccion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        traduccionControllerCreate: async (newTraduccion?: NewTraduccion, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/traduccions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newTraduccion, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        traduccionControllerDeleteById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('traduccionControllerDeleteById', 'id', id)
            const localVarPath = `/traduccions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {TraduccionFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        traduccionControllerFind: async (filter?: TraduccionFilter1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/traduccions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {TraduccionFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        traduccionControllerFindById: async (id: number, filter?: TraduccionFilter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('traduccionControllerFindById', 'id', id)
            const localVarPath = `/traduccions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {Traduccion} [traduccion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        traduccionControllerReplaceById: async (id: number, traduccion?: Traduccion, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('traduccionControllerReplaceById', 'id', id)
            const localVarPath = `/traduccions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(traduccion, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {TraduccionPartial} [traduccionPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        traduccionControllerUpdateAll: async (where?: { [key: string]: object; }, traduccionPartial?: TraduccionPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/traduccions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(traduccionPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {TraduccionPartial} [traduccionPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        traduccionControllerUpdateById: async (id: number, traduccionPartial?: TraduccionPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('traduccionControllerUpdateById', 'id', id)
            const localVarPath = `/traduccions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(traduccionPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TraduccionControllerApi - functional programming interface
 * @export
 */
export const TraduccionControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TraduccionControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async traduccionControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.traduccionControllerCount(where, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {NewTraduccion} [newTraduccion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async traduccionControllerCreate(newTraduccion?: NewTraduccion, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Traduccion>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.traduccionControllerCreate(newTraduccion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async traduccionControllerDeleteById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.traduccionControllerDeleteById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {TraduccionFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async traduccionControllerFind(filter?: TraduccionFilter1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TraduccionWithRelations>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.traduccionControllerFind(filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {TraduccionFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async traduccionControllerFindById(id: number, filter?: TraduccionFilter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TraduccionWithRelations>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.traduccionControllerFindById(id, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {Traduccion} [traduccion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async traduccionControllerReplaceById(id: number, traduccion?: Traduccion, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.traduccionControllerReplaceById(id, traduccion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {TraduccionPartial} [traduccionPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async traduccionControllerUpdateAll(where?: { [key: string]: object; }, traduccionPartial?: TraduccionPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.traduccionControllerUpdateAll(where, traduccionPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {TraduccionPartial} [traduccionPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async traduccionControllerUpdateById(id: number, traduccionPartial?: TraduccionPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.traduccionControllerUpdateById(id, traduccionPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TraduccionControllerApi - factory interface
 * @export
 */
export const TraduccionControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TraduccionControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        traduccionControllerCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.traduccionControllerCount(where, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NewTraduccion} [newTraduccion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        traduccionControllerCreate(newTraduccion?: NewTraduccion, options?: any): AxiosPromise<Traduccion> {
            return localVarFp.traduccionControllerCreate(newTraduccion, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        traduccionControllerDeleteById(id: number, options?: any): AxiosPromise<any> {
            return localVarFp.traduccionControllerDeleteById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {TraduccionFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        traduccionControllerFind(filter?: TraduccionFilter1, options?: any): AxiosPromise<Array<TraduccionWithRelations>> {
            return localVarFp.traduccionControllerFind(filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {TraduccionFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        traduccionControllerFindById(id: number, filter?: TraduccionFilter, options?: any): AxiosPromise<TraduccionWithRelations> {
            return localVarFp.traduccionControllerFindById(id, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {Traduccion} [traduccion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        traduccionControllerReplaceById(id: number, traduccion?: Traduccion, options?: any): AxiosPromise<any> {
            return localVarFp.traduccionControllerReplaceById(id, traduccion, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {TraduccionPartial} [traduccionPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        traduccionControllerUpdateAll(where?: { [key: string]: object; }, traduccionPartial?: TraduccionPartial, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.traduccionControllerUpdateAll(where, traduccionPartial, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {TraduccionPartial} [traduccionPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        traduccionControllerUpdateById(id: number, traduccionPartial?: TraduccionPartial, options?: any): AxiosPromise<any> {
            return localVarFp.traduccionControllerUpdateById(id, traduccionPartial, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TraduccionControllerApi - object-oriented interface
 * @export
 * @class TraduccionControllerApi
 * @extends {BaseAPI}
 */
export class TraduccionControllerApi extends BaseAPI {
    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TraduccionControllerApi
     */
    public traduccionControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig) {
        return TraduccionControllerApiFp(this.configuration).traduccionControllerCount(where, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NewTraduccion} [newTraduccion] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TraduccionControllerApi
     */
    public traduccionControllerCreate(newTraduccion?: NewTraduccion, options?: AxiosRequestConfig) {
        return TraduccionControllerApiFp(this.configuration).traduccionControllerCreate(newTraduccion, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TraduccionControllerApi
     */
    public traduccionControllerDeleteById(id: number, options?: AxiosRequestConfig) {
        return TraduccionControllerApiFp(this.configuration).traduccionControllerDeleteById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TraduccionFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TraduccionControllerApi
     */
    public traduccionControllerFind(filter?: TraduccionFilter1, options?: AxiosRequestConfig) {
        return TraduccionControllerApiFp(this.configuration).traduccionControllerFind(filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {TraduccionFilter} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TraduccionControllerApi
     */
    public traduccionControllerFindById(id: number, filter?: TraduccionFilter, options?: AxiosRequestConfig) {
        return TraduccionControllerApiFp(this.configuration).traduccionControllerFindById(id, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {Traduccion} [traduccion] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TraduccionControllerApi
     */
    public traduccionControllerReplaceById(id: number, traduccion?: Traduccion, options?: AxiosRequestConfig) {
        return TraduccionControllerApiFp(this.configuration).traduccionControllerReplaceById(id, traduccion, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {TraduccionPartial} [traduccionPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TraduccionControllerApi
     */
    public traduccionControllerUpdateAll(where?: { [key: string]: object; }, traduccionPartial?: TraduccionPartial, options?: AxiosRequestConfig) {
        return TraduccionControllerApiFp(this.configuration).traduccionControllerUpdateAll(where, traduccionPartial, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {TraduccionPartial} [traduccionPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TraduccionControllerApi
     */
    public traduccionControllerUpdateById(id: number, traduccionPartial?: TraduccionPartial, options?: AxiosRequestConfig) {
        return TraduccionControllerApiFp(this.configuration).traduccionControllerUpdateById(id, traduccionPartial, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UsuarioCredencialesControllerApi - axios parameter creator
 * @export
 */
export const UsuarioCredencialesControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuarioCredencialesControllerCount: async (where?: { [key: string]: object; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/usuario-credenciales/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NewUsuarioCredenciales} [newUsuarioCredenciales] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuarioCredencialesControllerCreate: async (newUsuarioCredenciales?: NewUsuarioCredenciales, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/usuario-credenciales`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newUsuarioCredenciales, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuarioCredencialesControllerDeleteById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usuarioCredencialesControllerDeleteById', 'id', id)
            const localVarPath = `/usuario-credenciales/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UsuarioCredencialesFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuarioCredencialesControllerFind: async (filter?: UsuarioCredencialesFilter1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/usuario-credenciales`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {UsuarioCredencialesFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuarioCredencialesControllerFindById: async (id: number, filter?: UsuarioCredencialesFilter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usuarioCredencialesControllerFindById', 'id', id)
            const localVarPath = `/usuario-credenciales/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {UsuarioCredenciales} [usuarioCredenciales] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuarioCredencialesControllerReplaceById: async (id: number, usuarioCredenciales?: UsuarioCredenciales, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usuarioCredencialesControllerReplaceById', 'id', id)
            const localVarPath = `/usuario-credenciales/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(usuarioCredenciales, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {UsuarioCredencialesPartial} [usuarioCredencialesPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuarioCredencialesControllerUpdateAll: async (where?: { [key: string]: object; }, usuarioCredencialesPartial?: UsuarioCredencialesPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/usuario-credenciales`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(usuarioCredencialesPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {UsuarioCredencialesPartial} [usuarioCredencialesPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuarioCredencialesControllerUpdateById: async (id: number, usuarioCredencialesPartial?: UsuarioCredencialesPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usuarioCredencialesControllerUpdateById', 'id', id)
            const localVarPath = `/usuario-credenciales/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(usuarioCredencialesPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsuarioCredencialesControllerApi - functional programming interface
 * @export
 */
export const UsuarioCredencialesControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsuarioCredencialesControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usuarioCredencialesControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usuarioCredencialesControllerCount(where, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {NewUsuarioCredenciales} [newUsuarioCredenciales] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usuarioCredencialesControllerCreate(newUsuarioCredenciales?: NewUsuarioCredenciales, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsuarioCredenciales>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usuarioCredencialesControllerCreate(newUsuarioCredenciales, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usuarioCredencialesControllerDeleteById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usuarioCredencialesControllerDeleteById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {UsuarioCredencialesFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usuarioCredencialesControllerFind(filter?: UsuarioCredencialesFilter1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UsuarioCredencialesWithRelations>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usuarioCredencialesControllerFind(filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {UsuarioCredencialesFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usuarioCredencialesControllerFindById(id: number, filter?: UsuarioCredencialesFilter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsuarioCredencialesWithRelations>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usuarioCredencialesControllerFindById(id, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {UsuarioCredenciales} [usuarioCredenciales] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usuarioCredencialesControllerReplaceById(id: number, usuarioCredenciales?: UsuarioCredenciales, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usuarioCredencialesControllerReplaceById(id, usuarioCredenciales, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {UsuarioCredencialesPartial} [usuarioCredencialesPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usuarioCredencialesControllerUpdateAll(where?: { [key: string]: object; }, usuarioCredencialesPartial?: UsuarioCredencialesPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usuarioCredencialesControllerUpdateAll(where, usuarioCredencialesPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {UsuarioCredencialesPartial} [usuarioCredencialesPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usuarioCredencialesControllerUpdateById(id: number, usuarioCredencialesPartial?: UsuarioCredencialesPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usuarioCredencialesControllerUpdateById(id, usuarioCredencialesPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UsuarioCredencialesControllerApi - factory interface
 * @export
 */
export const UsuarioCredencialesControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsuarioCredencialesControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuarioCredencialesControllerCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.usuarioCredencialesControllerCount(where, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NewUsuarioCredenciales} [newUsuarioCredenciales] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuarioCredencialesControllerCreate(newUsuarioCredenciales?: NewUsuarioCredenciales, options?: any): AxiosPromise<UsuarioCredenciales> {
            return localVarFp.usuarioCredencialesControllerCreate(newUsuarioCredenciales, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuarioCredencialesControllerDeleteById(id: number, options?: any): AxiosPromise<any> {
            return localVarFp.usuarioCredencialesControllerDeleteById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UsuarioCredencialesFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuarioCredencialesControllerFind(filter?: UsuarioCredencialesFilter1, options?: any): AxiosPromise<Array<UsuarioCredencialesWithRelations>> {
            return localVarFp.usuarioCredencialesControllerFind(filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {UsuarioCredencialesFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuarioCredencialesControllerFindById(id: number, filter?: UsuarioCredencialesFilter, options?: any): AxiosPromise<UsuarioCredencialesWithRelations> {
            return localVarFp.usuarioCredencialesControllerFindById(id, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {UsuarioCredenciales} [usuarioCredenciales] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuarioCredencialesControllerReplaceById(id: number, usuarioCredenciales?: UsuarioCredenciales, options?: any): AxiosPromise<any> {
            return localVarFp.usuarioCredencialesControllerReplaceById(id, usuarioCredenciales, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {UsuarioCredencialesPartial} [usuarioCredencialesPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuarioCredencialesControllerUpdateAll(where?: { [key: string]: object; }, usuarioCredencialesPartial?: UsuarioCredencialesPartial, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.usuarioCredencialesControllerUpdateAll(where, usuarioCredencialesPartial, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {UsuarioCredencialesPartial} [usuarioCredencialesPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuarioCredencialesControllerUpdateById(id: number, usuarioCredencialesPartial?: UsuarioCredencialesPartial, options?: any): AxiosPromise<any> {
            return localVarFp.usuarioCredencialesControllerUpdateById(id, usuarioCredencialesPartial, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UsuarioCredencialesControllerApi - object-oriented interface
 * @export
 * @class UsuarioCredencialesControllerApi
 * @extends {BaseAPI}
 */
export class UsuarioCredencialesControllerApi extends BaseAPI {
    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsuarioCredencialesControllerApi
     */
    public usuarioCredencialesControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig) {
        return UsuarioCredencialesControllerApiFp(this.configuration).usuarioCredencialesControllerCount(where, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NewUsuarioCredenciales} [newUsuarioCredenciales] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsuarioCredencialesControllerApi
     */
    public usuarioCredencialesControllerCreate(newUsuarioCredenciales?: NewUsuarioCredenciales, options?: AxiosRequestConfig) {
        return UsuarioCredencialesControllerApiFp(this.configuration).usuarioCredencialesControllerCreate(newUsuarioCredenciales, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsuarioCredencialesControllerApi
     */
    public usuarioCredencialesControllerDeleteById(id: number, options?: AxiosRequestConfig) {
        return UsuarioCredencialesControllerApiFp(this.configuration).usuarioCredencialesControllerDeleteById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UsuarioCredencialesFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsuarioCredencialesControllerApi
     */
    public usuarioCredencialesControllerFind(filter?: UsuarioCredencialesFilter1, options?: AxiosRequestConfig) {
        return UsuarioCredencialesControllerApiFp(this.configuration).usuarioCredencialesControllerFind(filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {UsuarioCredencialesFilter} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsuarioCredencialesControllerApi
     */
    public usuarioCredencialesControllerFindById(id: number, filter?: UsuarioCredencialesFilter, options?: AxiosRequestConfig) {
        return UsuarioCredencialesControllerApiFp(this.configuration).usuarioCredencialesControllerFindById(id, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {UsuarioCredenciales} [usuarioCredenciales] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsuarioCredencialesControllerApi
     */
    public usuarioCredencialesControllerReplaceById(id: number, usuarioCredenciales?: UsuarioCredenciales, options?: AxiosRequestConfig) {
        return UsuarioCredencialesControllerApiFp(this.configuration).usuarioCredencialesControllerReplaceById(id, usuarioCredenciales, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {UsuarioCredencialesPartial} [usuarioCredencialesPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsuarioCredencialesControllerApi
     */
    public usuarioCredencialesControllerUpdateAll(where?: { [key: string]: object; }, usuarioCredencialesPartial?: UsuarioCredencialesPartial, options?: AxiosRequestConfig) {
        return UsuarioCredencialesControllerApiFp(this.configuration).usuarioCredencialesControllerUpdateAll(where, usuarioCredencialesPartial, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {UsuarioCredencialesPartial} [usuarioCredencialesPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsuarioCredencialesControllerApi
     */
    public usuarioCredencialesControllerUpdateById(id: number, usuarioCredencialesPartial?: UsuarioCredencialesPartial, options?: AxiosRequestConfig) {
        return UsuarioCredencialesControllerApiFp(this.configuration).usuarioCredencialesControllerUpdateById(id, usuarioCredencialesPartial, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UsuarioPasswordHistoricoControllerApi - axios parameter creator
 * @export
 */
export const UsuarioPasswordHistoricoControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuarioPasswordHistoricoControllerCount: async (where?: { [key: string]: object; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/usuario-password-historicos/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NewUsuarioPasswordHistorico} [newUsuarioPasswordHistorico] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuarioPasswordHistoricoControllerCreate: async (newUsuarioPasswordHistorico?: NewUsuarioPasswordHistorico, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/usuario-password-historicos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newUsuarioPasswordHistorico, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuarioPasswordHistoricoControllerDeleteById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usuarioPasswordHistoricoControllerDeleteById', 'id', id)
            const localVarPath = `/usuario-password-historicos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UsuarioPasswordHistoricoFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuarioPasswordHistoricoControllerFind: async (filter?: UsuarioPasswordHistoricoFilter1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/usuario-password-historicos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {UsuarioPasswordHistoricoFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuarioPasswordHistoricoControllerFindById: async (id: number, filter?: UsuarioPasswordHistoricoFilter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usuarioPasswordHistoricoControllerFindById', 'id', id)
            const localVarPath = `/usuario-password-historicos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {UsuarioPasswordHistorico} [usuarioPasswordHistorico] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuarioPasswordHistoricoControllerReplaceById: async (id: number, usuarioPasswordHistorico?: UsuarioPasswordHistorico, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usuarioPasswordHistoricoControllerReplaceById', 'id', id)
            const localVarPath = `/usuario-password-historicos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(usuarioPasswordHistorico, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {UsuarioPasswordHistoricoPartial} [usuarioPasswordHistoricoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuarioPasswordHistoricoControllerUpdateAll: async (where?: { [key: string]: object; }, usuarioPasswordHistoricoPartial?: UsuarioPasswordHistoricoPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/usuario-password-historicos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(usuarioPasswordHistoricoPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {UsuarioPasswordHistoricoPartial} [usuarioPasswordHistoricoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuarioPasswordHistoricoControllerUpdateById: async (id: number, usuarioPasswordHistoricoPartial?: UsuarioPasswordHistoricoPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usuarioPasswordHistoricoControllerUpdateById', 'id', id)
            const localVarPath = `/usuario-password-historicos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(usuarioPasswordHistoricoPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsuarioPasswordHistoricoControllerApi - functional programming interface
 * @export
 */
export const UsuarioPasswordHistoricoControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsuarioPasswordHistoricoControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usuarioPasswordHistoricoControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usuarioPasswordHistoricoControllerCount(where, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {NewUsuarioPasswordHistorico} [newUsuarioPasswordHistorico] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usuarioPasswordHistoricoControllerCreate(newUsuarioPasswordHistorico?: NewUsuarioPasswordHistorico, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsuarioPasswordHistorico>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usuarioPasswordHistoricoControllerCreate(newUsuarioPasswordHistorico, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usuarioPasswordHistoricoControllerDeleteById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usuarioPasswordHistoricoControllerDeleteById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {UsuarioPasswordHistoricoFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usuarioPasswordHistoricoControllerFind(filter?: UsuarioPasswordHistoricoFilter1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UsuarioPasswordHistoricoWithRelations>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usuarioPasswordHistoricoControllerFind(filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {UsuarioPasswordHistoricoFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usuarioPasswordHistoricoControllerFindById(id: number, filter?: UsuarioPasswordHistoricoFilter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsuarioPasswordHistoricoWithRelations>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usuarioPasswordHistoricoControllerFindById(id, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {UsuarioPasswordHistorico} [usuarioPasswordHistorico] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usuarioPasswordHistoricoControllerReplaceById(id: number, usuarioPasswordHistorico?: UsuarioPasswordHistorico, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usuarioPasswordHistoricoControllerReplaceById(id, usuarioPasswordHistorico, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {UsuarioPasswordHistoricoPartial} [usuarioPasswordHistoricoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usuarioPasswordHistoricoControllerUpdateAll(where?: { [key: string]: object; }, usuarioPasswordHistoricoPartial?: UsuarioPasswordHistoricoPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usuarioPasswordHistoricoControllerUpdateAll(where, usuarioPasswordHistoricoPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {UsuarioPasswordHistoricoPartial} [usuarioPasswordHistoricoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usuarioPasswordHistoricoControllerUpdateById(id: number, usuarioPasswordHistoricoPartial?: UsuarioPasswordHistoricoPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usuarioPasswordHistoricoControllerUpdateById(id, usuarioPasswordHistoricoPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UsuarioPasswordHistoricoControllerApi - factory interface
 * @export
 */
export const UsuarioPasswordHistoricoControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsuarioPasswordHistoricoControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuarioPasswordHistoricoControllerCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.usuarioPasswordHistoricoControllerCount(where, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NewUsuarioPasswordHistorico} [newUsuarioPasswordHistorico] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuarioPasswordHistoricoControllerCreate(newUsuarioPasswordHistorico?: NewUsuarioPasswordHistorico, options?: any): AxiosPromise<UsuarioPasswordHistorico> {
            return localVarFp.usuarioPasswordHistoricoControllerCreate(newUsuarioPasswordHistorico, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuarioPasswordHistoricoControllerDeleteById(id: number, options?: any): AxiosPromise<any> {
            return localVarFp.usuarioPasswordHistoricoControllerDeleteById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UsuarioPasswordHistoricoFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuarioPasswordHistoricoControllerFind(filter?: UsuarioPasswordHistoricoFilter1, options?: any): AxiosPromise<Array<UsuarioPasswordHistoricoWithRelations>> {
            return localVarFp.usuarioPasswordHistoricoControllerFind(filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {UsuarioPasswordHistoricoFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuarioPasswordHistoricoControllerFindById(id: number, filter?: UsuarioPasswordHistoricoFilter, options?: any): AxiosPromise<UsuarioPasswordHistoricoWithRelations> {
            return localVarFp.usuarioPasswordHistoricoControllerFindById(id, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {UsuarioPasswordHistorico} [usuarioPasswordHistorico] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuarioPasswordHistoricoControllerReplaceById(id: number, usuarioPasswordHistorico?: UsuarioPasswordHistorico, options?: any): AxiosPromise<any> {
            return localVarFp.usuarioPasswordHistoricoControllerReplaceById(id, usuarioPasswordHistorico, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {UsuarioPasswordHistoricoPartial} [usuarioPasswordHistoricoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuarioPasswordHistoricoControllerUpdateAll(where?: { [key: string]: object; }, usuarioPasswordHistoricoPartial?: UsuarioPasswordHistoricoPartial, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.usuarioPasswordHistoricoControllerUpdateAll(where, usuarioPasswordHistoricoPartial, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {UsuarioPasswordHistoricoPartial} [usuarioPasswordHistoricoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuarioPasswordHistoricoControllerUpdateById(id: number, usuarioPasswordHistoricoPartial?: UsuarioPasswordHistoricoPartial, options?: any): AxiosPromise<any> {
            return localVarFp.usuarioPasswordHistoricoControllerUpdateById(id, usuarioPasswordHistoricoPartial, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UsuarioPasswordHistoricoControllerApi - object-oriented interface
 * @export
 * @class UsuarioPasswordHistoricoControllerApi
 * @extends {BaseAPI}
 */
export class UsuarioPasswordHistoricoControllerApi extends BaseAPI {
    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsuarioPasswordHistoricoControllerApi
     */
    public usuarioPasswordHistoricoControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig) {
        return UsuarioPasswordHistoricoControllerApiFp(this.configuration).usuarioPasswordHistoricoControllerCount(where, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NewUsuarioPasswordHistorico} [newUsuarioPasswordHistorico] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsuarioPasswordHistoricoControllerApi
     */
    public usuarioPasswordHistoricoControllerCreate(newUsuarioPasswordHistorico?: NewUsuarioPasswordHistorico, options?: AxiosRequestConfig) {
        return UsuarioPasswordHistoricoControllerApiFp(this.configuration).usuarioPasswordHistoricoControllerCreate(newUsuarioPasswordHistorico, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsuarioPasswordHistoricoControllerApi
     */
    public usuarioPasswordHistoricoControllerDeleteById(id: number, options?: AxiosRequestConfig) {
        return UsuarioPasswordHistoricoControllerApiFp(this.configuration).usuarioPasswordHistoricoControllerDeleteById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UsuarioPasswordHistoricoFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsuarioPasswordHistoricoControllerApi
     */
    public usuarioPasswordHistoricoControllerFind(filter?: UsuarioPasswordHistoricoFilter1, options?: AxiosRequestConfig) {
        return UsuarioPasswordHistoricoControllerApiFp(this.configuration).usuarioPasswordHistoricoControllerFind(filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {UsuarioPasswordHistoricoFilter} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsuarioPasswordHistoricoControllerApi
     */
    public usuarioPasswordHistoricoControllerFindById(id: number, filter?: UsuarioPasswordHistoricoFilter, options?: AxiosRequestConfig) {
        return UsuarioPasswordHistoricoControllerApiFp(this.configuration).usuarioPasswordHistoricoControllerFindById(id, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {UsuarioPasswordHistorico} [usuarioPasswordHistorico] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsuarioPasswordHistoricoControllerApi
     */
    public usuarioPasswordHistoricoControllerReplaceById(id: number, usuarioPasswordHistorico?: UsuarioPasswordHistorico, options?: AxiosRequestConfig) {
        return UsuarioPasswordHistoricoControllerApiFp(this.configuration).usuarioPasswordHistoricoControllerReplaceById(id, usuarioPasswordHistorico, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {UsuarioPasswordHistoricoPartial} [usuarioPasswordHistoricoPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsuarioPasswordHistoricoControllerApi
     */
    public usuarioPasswordHistoricoControllerUpdateAll(where?: { [key: string]: object; }, usuarioPasswordHistoricoPartial?: UsuarioPasswordHistoricoPartial, options?: AxiosRequestConfig) {
        return UsuarioPasswordHistoricoControllerApiFp(this.configuration).usuarioPasswordHistoricoControllerUpdateAll(where, usuarioPasswordHistoricoPartial, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {UsuarioPasswordHistoricoPartial} [usuarioPasswordHistoricoPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsuarioPasswordHistoricoControllerApi
     */
    public usuarioPasswordHistoricoControllerUpdateById(id: number, usuarioPasswordHistoricoPartial?: UsuarioPasswordHistoricoPartial, options?: AxiosRequestConfig) {
        return UsuarioPasswordHistoricoControllerApiFp(this.configuration).usuarioPasswordHistoricoControllerUpdateById(id, usuarioPasswordHistoricoPartial, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UsuarioRestablecerPasswordControllerApi - axios parameter creator
 * @export
 */
export const UsuarioRestablecerPasswordControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuarioRestablecerPasswordControllerCount: async (where?: { [key: string]: object; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/usuario-restablecer-passwords/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NewUsuarioRestablecerPassword} [newUsuarioRestablecerPassword] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuarioRestablecerPasswordControllerCreate: async (newUsuarioRestablecerPassword?: NewUsuarioRestablecerPassword, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/usuario-restablecer-passwords`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newUsuarioRestablecerPassword, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuarioRestablecerPasswordControllerDeleteById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usuarioRestablecerPasswordControllerDeleteById', 'id', id)
            const localVarPath = `/usuario-restablecer-passwords/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UsuarioRestablecerPasswordFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuarioRestablecerPasswordControllerFind: async (filter?: UsuarioRestablecerPasswordFilter1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/usuario-restablecer-passwords`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {UsuarioRestablecerPasswordFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuarioRestablecerPasswordControllerFindById: async (id: number, filter?: UsuarioRestablecerPasswordFilter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usuarioRestablecerPasswordControllerFindById', 'id', id)
            const localVarPath = `/usuario-restablecer-passwords/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {UsuarioRestablecerPassword} [usuarioRestablecerPassword] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuarioRestablecerPasswordControllerReplaceById: async (id: number, usuarioRestablecerPassword?: UsuarioRestablecerPassword, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usuarioRestablecerPasswordControllerReplaceById', 'id', id)
            const localVarPath = `/usuario-restablecer-passwords/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(usuarioRestablecerPassword, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {UsuarioRestablecerPasswordPartial} [usuarioRestablecerPasswordPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuarioRestablecerPasswordControllerUpdateAll: async (where?: { [key: string]: object; }, usuarioRestablecerPasswordPartial?: UsuarioRestablecerPasswordPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/usuario-restablecer-passwords`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(usuarioRestablecerPasswordPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {UsuarioRestablecerPasswordPartial} [usuarioRestablecerPasswordPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuarioRestablecerPasswordControllerUpdateById: async (id: number, usuarioRestablecerPasswordPartial?: UsuarioRestablecerPasswordPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usuarioRestablecerPasswordControllerUpdateById', 'id', id)
            const localVarPath = `/usuario-restablecer-passwords/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(usuarioRestablecerPasswordPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsuarioRestablecerPasswordControllerApi - functional programming interface
 * @export
 */
export const UsuarioRestablecerPasswordControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsuarioRestablecerPasswordControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usuarioRestablecerPasswordControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usuarioRestablecerPasswordControllerCount(where, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {NewUsuarioRestablecerPassword} [newUsuarioRestablecerPassword] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usuarioRestablecerPasswordControllerCreate(newUsuarioRestablecerPassword?: NewUsuarioRestablecerPassword, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsuarioRestablecerPassword>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usuarioRestablecerPasswordControllerCreate(newUsuarioRestablecerPassword, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usuarioRestablecerPasswordControllerDeleteById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usuarioRestablecerPasswordControllerDeleteById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {UsuarioRestablecerPasswordFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usuarioRestablecerPasswordControllerFind(filter?: UsuarioRestablecerPasswordFilter1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UsuarioRestablecerPasswordWithRelations>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usuarioRestablecerPasswordControllerFind(filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {UsuarioRestablecerPasswordFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usuarioRestablecerPasswordControllerFindById(id: number, filter?: UsuarioRestablecerPasswordFilter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsuarioRestablecerPasswordWithRelations>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usuarioRestablecerPasswordControllerFindById(id, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {UsuarioRestablecerPassword} [usuarioRestablecerPassword] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usuarioRestablecerPasswordControllerReplaceById(id: number, usuarioRestablecerPassword?: UsuarioRestablecerPassword, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usuarioRestablecerPasswordControllerReplaceById(id, usuarioRestablecerPassword, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {UsuarioRestablecerPasswordPartial} [usuarioRestablecerPasswordPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usuarioRestablecerPasswordControllerUpdateAll(where?: { [key: string]: object; }, usuarioRestablecerPasswordPartial?: UsuarioRestablecerPasswordPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usuarioRestablecerPasswordControllerUpdateAll(where, usuarioRestablecerPasswordPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {UsuarioRestablecerPasswordPartial} [usuarioRestablecerPasswordPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usuarioRestablecerPasswordControllerUpdateById(id: number, usuarioRestablecerPasswordPartial?: UsuarioRestablecerPasswordPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usuarioRestablecerPasswordControllerUpdateById(id, usuarioRestablecerPasswordPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UsuarioRestablecerPasswordControllerApi - factory interface
 * @export
 */
export const UsuarioRestablecerPasswordControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsuarioRestablecerPasswordControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuarioRestablecerPasswordControllerCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.usuarioRestablecerPasswordControllerCount(where, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NewUsuarioRestablecerPassword} [newUsuarioRestablecerPassword] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuarioRestablecerPasswordControllerCreate(newUsuarioRestablecerPassword?: NewUsuarioRestablecerPassword, options?: any): AxiosPromise<UsuarioRestablecerPassword> {
            return localVarFp.usuarioRestablecerPasswordControllerCreate(newUsuarioRestablecerPassword, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuarioRestablecerPasswordControllerDeleteById(id: number, options?: any): AxiosPromise<any> {
            return localVarFp.usuarioRestablecerPasswordControllerDeleteById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UsuarioRestablecerPasswordFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuarioRestablecerPasswordControllerFind(filter?: UsuarioRestablecerPasswordFilter1, options?: any): AxiosPromise<Array<UsuarioRestablecerPasswordWithRelations>> {
            return localVarFp.usuarioRestablecerPasswordControllerFind(filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {UsuarioRestablecerPasswordFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuarioRestablecerPasswordControllerFindById(id: number, filter?: UsuarioRestablecerPasswordFilter, options?: any): AxiosPromise<UsuarioRestablecerPasswordWithRelations> {
            return localVarFp.usuarioRestablecerPasswordControllerFindById(id, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {UsuarioRestablecerPassword} [usuarioRestablecerPassword] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuarioRestablecerPasswordControllerReplaceById(id: number, usuarioRestablecerPassword?: UsuarioRestablecerPassword, options?: any): AxiosPromise<any> {
            return localVarFp.usuarioRestablecerPasswordControllerReplaceById(id, usuarioRestablecerPassword, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {UsuarioRestablecerPasswordPartial} [usuarioRestablecerPasswordPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuarioRestablecerPasswordControllerUpdateAll(where?: { [key: string]: object; }, usuarioRestablecerPasswordPartial?: UsuarioRestablecerPasswordPartial, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.usuarioRestablecerPasswordControllerUpdateAll(where, usuarioRestablecerPasswordPartial, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {UsuarioRestablecerPasswordPartial} [usuarioRestablecerPasswordPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuarioRestablecerPasswordControllerUpdateById(id: number, usuarioRestablecerPasswordPartial?: UsuarioRestablecerPasswordPartial, options?: any): AxiosPromise<any> {
            return localVarFp.usuarioRestablecerPasswordControllerUpdateById(id, usuarioRestablecerPasswordPartial, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UsuarioRestablecerPasswordControllerApi - object-oriented interface
 * @export
 * @class UsuarioRestablecerPasswordControllerApi
 * @extends {BaseAPI}
 */
export class UsuarioRestablecerPasswordControllerApi extends BaseAPI {
    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsuarioRestablecerPasswordControllerApi
     */
    public usuarioRestablecerPasswordControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig) {
        return UsuarioRestablecerPasswordControllerApiFp(this.configuration).usuarioRestablecerPasswordControllerCount(where, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NewUsuarioRestablecerPassword} [newUsuarioRestablecerPassword] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsuarioRestablecerPasswordControllerApi
     */
    public usuarioRestablecerPasswordControllerCreate(newUsuarioRestablecerPassword?: NewUsuarioRestablecerPassword, options?: AxiosRequestConfig) {
        return UsuarioRestablecerPasswordControllerApiFp(this.configuration).usuarioRestablecerPasswordControllerCreate(newUsuarioRestablecerPassword, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsuarioRestablecerPasswordControllerApi
     */
    public usuarioRestablecerPasswordControllerDeleteById(id: number, options?: AxiosRequestConfig) {
        return UsuarioRestablecerPasswordControllerApiFp(this.configuration).usuarioRestablecerPasswordControllerDeleteById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UsuarioRestablecerPasswordFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsuarioRestablecerPasswordControllerApi
     */
    public usuarioRestablecerPasswordControllerFind(filter?: UsuarioRestablecerPasswordFilter1, options?: AxiosRequestConfig) {
        return UsuarioRestablecerPasswordControllerApiFp(this.configuration).usuarioRestablecerPasswordControllerFind(filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {UsuarioRestablecerPasswordFilter} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsuarioRestablecerPasswordControllerApi
     */
    public usuarioRestablecerPasswordControllerFindById(id: number, filter?: UsuarioRestablecerPasswordFilter, options?: AxiosRequestConfig) {
        return UsuarioRestablecerPasswordControllerApiFp(this.configuration).usuarioRestablecerPasswordControllerFindById(id, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {UsuarioRestablecerPassword} [usuarioRestablecerPassword] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsuarioRestablecerPasswordControllerApi
     */
    public usuarioRestablecerPasswordControllerReplaceById(id: number, usuarioRestablecerPassword?: UsuarioRestablecerPassword, options?: AxiosRequestConfig) {
        return UsuarioRestablecerPasswordControllerApiFp(this.configuration).usuarioRestablecerPasswordControllerReplaceById(id, usuarioRestablecerPassword, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {UsuarioRestablecerPasswordPartial} [usuarioRestablecerPasswordPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsuarioRestablecerPasswordControllerApi
     */
    public usuarioRestablecerPasswordControllerUpdateAll(where?: { [key: string]: object; }, usuarioRestablecerPasswordPartial?: UsuarioRestablecerPasswordPartial, options?: AxiosRequestConfig) {
        return UsuarioRestablecerPasswordControllerApiFp(this.configuration).usuarioRestablecerPasswordControllerUpdateAll(where, usuarioRestablecerPasswordPartial, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {UsuarioRestablecerPasswordPartial} [usuarioRestablecerPasswordPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsuarioRestablecerPasswordControllerApi
     */
    public usuarioRestablecerPasswordControllerUpdateById(id: number, usuarioRestablecerPasswordPartial?: UsuarioRestablecerPasswordPartial, options?: AxiosRequestConfig) {
        return UsuarioRestablecerPasswordControllerApiFp(this.configuration).usuarioRestablecerPasswordControllerUpdateById(id, usuarioRestablecerPasswordPartial, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UsuariosControllerApi - axios parameter creator
 * @export
 */
export const UsuariosControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuariosControllerCount: async (where?: { [key: string]: object; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/usuarios/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NewUsuario} [newUsuario] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuariosControllerCreate: async (newUsuario?: NewUsuario, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/usuarios`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newUsuario, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuariosControllerDeleteById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usuariosControllerDeleteById', 'id', id)
            const localVarPath = `/usuarios/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UsuarioFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuariosControllerFind: async (filter?: UsuarioFilter1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/usuarios`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {UsuarioFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuariosControllerFindById: async (id: number, filter?: UsuarioFilter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usuariosControllerFindById', 'id', id)
            const localVarPath = `/usuarios/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {InlineObject3} inlineObject3 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuariosControllerLogin: async (inlineObject3: InlineObject3, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inlineObject3' is not null or undefined
            assertParamExists('usuariosControllerLogin', 'inlineObject3', inlineObject3)
            const localVarPath = `/usuarios/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inlineObject3, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuariosControllerObtenerUsuarioAvatar: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usuariosControllerObtenerUsuarioAvatar', 'id', id)
            const localVarPath = `/obtenerUsuarioAvatar/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {InlineObject4} [inlineObject4] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuariosControllerRegister: async (inlineObject4?: InlineObject4, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/usuarios/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inlineObject4, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {Usuario} [usuario] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuariosControllerReplaceById: async (id: number, usuario?: Usuario, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usuariosControllerReplaceById', 'id', id)
            const localVarPath = `/usuarios/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(usuario, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {UsuarioPartial} [usuarioPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuariosControllerUpdateAll: async (where?: { [key: string]: object; }, usuarioPartial?: UsuarioPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/usuarios`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(usuarioPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {UsuarioPartial} [usuarioPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuariosControllerUpdateById: async (id: number, usuarioPartial?: UsuarioPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usuariosControllerUpdateById', 'id', id)
            const localVarPath = `/usuarios/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(usuarioPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} idUsuario 
         * @param {UsuarioCredencialesPartial} [usuarioCredencialesPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuariosControllerUpdateByIdCredenciales: async (idUsuario: number, usuarioCredencialesPartial?: UsuarioCredencialesPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idUsuario' is not null or undefined
            assertParamExists('usuariosControllerUpdateByIdCredenciales', 'idUsuario', idUsuario)
            const localVarPath = `/usuarioCredenciales/{idUsuario}`
                .replace(`{${"idUsuario"}}`, encodeURIComponent(String(idUsuario)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(usuarioCredencialesPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UsuarioFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuariosControllerVistaEmpresaRolUsuario: async (filter?: UsuarioFilter1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/vistaEmpresaRolUsuario`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuariosControllerVistaEmpresaRolUsuarioCount: async (where?: { [key: string]: object; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/vistaEmpresaRolUsuarioCount`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsuariosControllerApi - functional programming interface
 * @export
 */
export const UsuariosControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsuariosControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usuariosControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usuariosControllerCount(where, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {NewUsuario} [newUsuario] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usuariosControllerCreate(newUsuario?: NewUsuario, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Usuario>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usuariosControllerCreate(newUsuario, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usuariosControllerDeleteById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usuariosControllerDeleteById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {UsuarioFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usuariosControllerFind(filter?: UsuarioFilter1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UsuarioWithRelations>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usuariosControllerFind(filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {UsuarioFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usuariosControllerFindById(id: number, filter?: UsuarioFilter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsuarioWithRelations>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usuariosControllerFindById(id, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {InlineObject3} inlineObject3 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usuariosControllerLogin(inlineObject3: InlineObject3, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usuariosControllerLogin(inlineObject3, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usuariosControllerObtenerUsuarioAvatar(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usuariosControllerObtenerUsuarioAvatar(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {InlineObject4} [inlineObject4] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usuariosControllerRegister(inlineObject4?: InlineObject4, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2001>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usuariosControllerRegister(inlineObject4, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {Usuario} [usuario] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usuariosControllerReplaceById(id: number, usuario?: Usuario, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usuariosControllerReplaceById(id, usuario, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {UsuarioPartial} [usuarioPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usuariosControllerUpdateAll(where?: { [key: string]: object; }, usuarioPartial?: UsuarioPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usuariosControllerUpdateAll(where, usuarioPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {UsuarioPartial} [usuarioPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usuariosControllerUpdateById(id: number, usuarioPartial?: UsuarioPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usuariosControllerUpdateById(id, usuarioPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} idUsuario 
         * @param {UsuarioCredencialesPartial} [usuarioCredencialesPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usuariosControllerUpdateByIdCredenciales(idUsuario: number, usuarioCredencialesPartial?: UsuarioCredencialesPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usuariosControllerUpdateByIdCredenciales(idUsuario, usuarioCredencialesPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {UsuarioFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usuariosControllerVistaEmpresaRolUsuario(filter?: UsuarioFilter1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usuariosControllerVistaEmpresaRolUsuario(filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usuariosControllerVistaEmpresaRolUsuarioCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usuariosControllerVistaEmpresaRolUsuarioCount(where, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UsuariosControllerApi - factory interface
 * @export
 */
export const UsuariosControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsuariosControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuariosControllerCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.usuariosControllerCount(where, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NewUsuario} [newUsuario] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuariosControllerCreate(newUsuario?: NewUsuario, options?: any): AxiosPromise<Usuario> {
            return localVarFp.usuariosControllerCreate(newUsuario, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuariosControllerDeleteById(id: number, options?: any): AxiosPromise<any> {
            return localVarFp.usuariosControllerDeleteById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UsuarioFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuariosControllerFind(filter?: UsuarioFilter1, options?: any): AxiosPromise<Array<UsuarioWithRelations>> {
            return localVarFp.usuariosControllerFind(filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {UsuarioFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuariosControllerFindById(id: number, filter?: UsuarioFilter, options?: any): AxiosPromise<UsuarioWithRelations> {
            return localVarFp.usuariosControllerFindById(id, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {InlineObject3} inlineObject3 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuariosControllerLogin(inlineObject3: InlineObject3, options?: any): AxiosPromise<InlineResponse200> {
            return localVarFp.usuariosControllerLogin(inlineObject3, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuariosControllerObtenerUsuarioAvatar(id: number, options?: any): AxiosPromise<object> {
            return localVarFp.usuariosControllerObtenerUsuarioAvatar(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {InlineObject4} [inlineObject4] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuariosControllerRegister(inlineObject4?: InlineObject4, options?: any): AxiosPromise<InlineResponse2001> {
            return localVarFp.usuariosControllerRegister(inlineObject4, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {Usuario} [usuario] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuariosControllerReplaceById(id: number, usuario?: Usuario, options?: any): AxiosPromise<any> {
            return localVarFp.usuariosControllerReplaceById(id, usuario, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {UsuarioPartial} [usuarioPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuariosControllerUpdateAll(where?: { [key: string]: object; }, usuarioPartial?: UsuarioPartial, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.usuariosControllerUpdateAll(where, usuarioPartial, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {UsuarioPartial} [usuarioPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuariosControllerUpdateById(id: number, usuarioPartial?: UsuarioPartial, options?: any): AxiosPromise<any> {
            return localVarFp.usuariosControllerUpdateById(id, usuarioPartial, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} idUsuario 
         * @param {UsuarioCredencialesPartial} [usuarioCredencialesPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuariosControllerUpdateByIdCredenciales(idUsuario: number, usuarioCredencialesPartial?: UsuarioCredencialesPartial, options?: any): AxiosPromise<any> {
            return localVarFp.usuariosControllerUpdateByIdCredenciales(idUsuario, usuarioCredencialesPartial, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UsuarioFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuariosControllerVistaEmpresaRolUsuario(filter?: UsuarioFilter1, options?: any): AxiosPromise<object> {
            return localVarFp.usuariosControllerVistaEmpresaRolUsuario(filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuariosControllerVistaEmpresaRolUsuarioCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<object> {
            return localVarFp.usuariosControllerVistaEmpresaRolUsuarioCount(where, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UsuariosControllerApi - object-oriented interface
 * @export
 * @class UsuariosControllerApi
 * @extends {BaseAPI}
 */
export class UsuariosControllerApi extends BaseAPI {
    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsuariosControllerApi
     */
    public usuariosControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig) {
        return UsuariosControllerApiFp(this.configuration).usuariosControllerCount(where, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NewUsuario} [newUsuario] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsuariosControllerApi
     */
    public usuariosControllerCreate(newUsuario?: NewUsuario, options?: AxiosRequestConfig) {
        return UsuariosControllerApiFp(this.configuration).usuariosControllerCreate(newUsuario, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsuariosControllerApi
     */
    public usuariosControllerDeleteById(id: number, options?: AxiosRequestConfig) {
        return UsuariosControllerApiFp(this.configuration).usuariosControllerDeleteById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UsuarioFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsuariosControllerApi
     */
    public usuariosControllerFind(filter?: UsuarioFilter1, options?: AxiosRequestConfig) {
        return UsuariosControllerApiFp(this.configuration).usuariosControllerFind(filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {UsuarioFilter} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsuariosControllerApi
     */
    public usuariosControllerFindById(id: number, filter?: UsuarioFilter, options?: AxiosRequestConfig) {
        return UsuariosControllerApiFp(this.configuration).usuariosControllerFindById(id, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {InlineObject3} inlineObject3 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsuariosControllerApi
     */
    public usuariosControllerLogin(inlineObject3: InlineObject3, options?: AxiosRequestConfig) {
        return UsuariosControllerApiFp(this.configuration).usuariosControllerLogin(inlineObject3, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsuariosControllerApi
     */
    public usuariosControllerObtenerUsuarioAvatar(id: number, options?: AxiosRequestConfig) {
        return UsuariosControllerApiFp(this.configuration).usuariosControllerObtenerUsuarioAvatar(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {InlineObject4} [inlineObject4] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsuariosControllerApi
     */
    public usuariosControllerRegister(inlineObject4?: InlineObject4, options?: AxiosRequestConfig) {
        return UsuariosControllerApiFp(this.configuration).usuariosControllerRegister(inlineObject4, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {Usuario} [usuario] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsuariosControllerApi
     */
    public usuariosControllerReplaceById(id: number, usuario?: Usuario, options?: AxiosRequestConfig) {
        return UsuariosControllerApiFp(this.configuration).usuariosControllerReplaceById(id, usuario, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {UsuarioPartial} [usuarioPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsuariosControllerApi
     */
    public usuariosControllerUpdateAll(where?: { [key: string]: object; }, usuarioPartial?: UsuarioPartial, options?: AxiosRequestConfig) {
        return UsuariosControllerApiFp(this.configuration).usuariosControllerUpdateAll(where, usuarioPartial, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {UsuarioPartial} [usuarioPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsuariosControllerApi
     */
    public usuariosControllerUpdateById(id: number, usuarioPartial?: UsuarioPartial, options?: AxiosRequestConfig) {
        return UsuariosControllerApiFp(this.configuration).usuariosControllerUpdateById(id, usuarioPartial, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} idUsuario 
     * @param {UsuarioCredencialesPartial} [usuarioCredencialesPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsuariosControllerApi
     */
    public usuariosControllerUpdateByIdCredenciales(idUsuario: number, usuarioCredencialesPartial?: UsuarioCredencialesPartial, options?: AxiosRequestConfig) {
        return UsuariosControllerApiFp(this.configuration).usuariosControllerUpdateByIdCredenciales(idUsuario, usuarioCredencialesPartial, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UsuarioFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsuariosControllerApi
     */
    public usuariosControllerVistaEmpresaRolUsuario(filter?: UsuarioFilter1, options?: AxiosRequestConfig) {
        return UsuariosControllerApiFp(this.configuration).usuariosControllerVistaEmpresaRolUsuario(filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsuariosControllerApi
     */
    public usuariosControllerVistaEmpresaRolUsuarioCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig) {
        return UsuariosControllerApiFp(this.configuration).usuariosControllerVistaEmpresaRolUsuarioCount(where, options).then((request) => request(this.axios, this.basePath));
    }
}


