/* tslint:disable */
/* eslint-disable */
/**
 * NeatPallet application
 * Proyecto API encargado de ser la parte Backend de la aplicaci√≥n web NEATPALLET
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: agusjar@hotmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Archivo
 */
export interface Archivo {
    /**
     * 
     * @type {number}
     * @memberof Archivo
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof Archivo
     */
    'empresaId': number;
    /**
     * 
     * @type {number}
     * @memberof Archivo
     */
    'tipoArchivoId'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof Archivo
     */
    'nombre'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Archivo
     */
    'url'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Archivo
     */
    'descripcion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Archivo
     */
    'tabla'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Archivo
     */
    'idTabla'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof Archivo
     */
    'pantalla'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Archivo
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Archivo
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Archivo
     */
    'usuCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof Archivo
     */
    'usuModificacion'?: number | null;
}
/**
 * 
 * @export
 * @interface ArchivoFilter
 */
export interface ArchivoFilter {
    /**
     * 
     * @type {number}
     * @memberof ArchivoFilter
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof ArchivoFilter
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof ArchivoFilter
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof ArchivoFilter
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {object | Set<string>}
     * @memberof ArchivoFilter
     */
    'fields'?: object | Set<string>;
}
/**
 * 
 * @export
 * @interface ArchivoFilter1
 */
export interface ArchivoFilter1 {
    /**
     * 
     * @type {number}
     * @memberof ArchivoFilter1
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof ArchivoFilter1
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof ArchivoFilter1
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof ArchivoFilter1
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof ArchivoFilter1
     */
    'where'?: { [key: string]: object; };
    /**
     * 
     * @type {object | Set<string>}
     * @memberof ArchivoFilter1
     */
    'fields'?: object | Set<string>;
}
/**
 * (tsType: Partial<Archivo>, schemaOptions: { partial: true })
 * @export
 * @interface ArchivoPartial
 */
export interface ArchivoPartial {
    /**
     * 
     * @type {number}
     * @memberof ArchivoPartial
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof ArchivoPartial
     */
    'empresaId'?: number;
    /**
     * 
     * @type {number}
     * @memberof ArchivoPartial
     */
    'tipoArchivoId'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ArchivoPartial
     */
    'nombre'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ArchivoPartial
     */
    'url'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ArchivoPartial
     */
    'descripcion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ArchivoPartial
     */
    'tabla'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ArchivoPartial
     */
    'idTabla'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ArchivoPartial
     */
    'pantalla'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ArchivoPartial
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ArchivoPartial
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ArchivoPartial
     */
    'usuCreacion'?: number;
    /**
     * 
     * @type {number}
     * @memberof ArchivoPartial
     */
    'usuModificacion'?: number | null;
}
/**
 * (tsType: ArchivoWithRelations, schemaOptions: { includeRelations: true })
 * @export
 * @interface ArchivoWithRelations
 */
export interface ArchivoWithRelations {
    /**
     * 
     * @type {number}
     * @memberof ArchivoWithRelations
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof ArchivoWithRelations
     */
    'empresaId': number;
    /**
     * 
     * @type {number}
     * @memberof ArchivoWithRelations
     */
    'tipoArchivoId'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ArchivoWithRelations
     */
    'nombre'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ArchivoWithRelations
     */
    'url'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ArchivoWithRelations
     */
    'descripcion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ArchivoWithRelations
     */
    'tabla'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ArchivoWithRelations
     */
    'idTabla'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ArchivoWithRelations
     */
    'pantalla'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ArchivoWithRelations
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ArchivoWithRelations
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ArchivoWithRelations
     */
    'usuCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof ArchivoWithRelations
     */
    'usuModificacion'?: number | null;
}
/**
 * 
 * @export
 * @interface Empresa
 */
export interface Empresa {
    /**
     * 
     * @type {number}
     * @memberof Empresa
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Empresa
     */
    'codigo'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Empresa
     */
    'nombre'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Empresa
     */
    'descripcion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Empresa
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Empresa
     */
    'password'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Empresa
     */
    'servicio'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Empresa
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Empresa
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Empresa
     */
    'usuCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof Empresa
     */
    'usuModificacion'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof Empresa
     */
    'tiempoInactividad'?: number;
}
/**
 * 
 * @export
 * @interface EmpresaFilter
 */
export interface EmpresaFilter {
    /**
     * 
     * @type {number}
     * @memberof EmpresaFilter
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof EmpresaFilter
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof EmpresaFilter
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof EmpresaFilter
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {object | Set<string>}
     * @memberof EmpresaFilter
     */
    'fields'?: object | Set<string>;
}
/**
 * 
 * @export
 * @interface EmpresaFilter1
 */
export interface EmpresaFilter1 {
    /**
     * 
     * @type {number}
     * @memberof EmpresaFilter1
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof EmpresaFilter1
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof EmpresaFilter1
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof EmpresaFilter1
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof EmpresaFilter1
     */
    'where'?: { [key: string]: object; };
    /**
     * 
     * @type {object | Set<string>}
     * @memberof EmpresaFilter1
     */
    'fields'?: object | Set<string>;
}
/**
 * (tsType: Partial<Empresa>, schemaOptions: { partial: true })
 * @export
 * @interface EmpresaPartial
 */
export interface EmpresaPartial {
    /**
     * 
     * @type {number}
     * @memberof EmpresaPartial
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof EmpresaPartial
     */
    'codigo'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EmpresaPartial
     */
    'nombre'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EmpresaPartial
     */
    'descripcion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EmpresaPartial
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EmpresaPartial
     */
    'password'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EmpresaPartial
     */
    'servicio'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EmpresaPartial
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EmpresaPartial
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof EmpresaPartial
     */
    'usuCreacion'?: number;
    /**
     * 
     * @type {number}
     * @memberof EmpresaPartial
     */
    'usuModificacion'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof EmpresaPartial
     */
    'tiempoInactividad'?: number;
}
/**
 * (tsType: EmpresaWithRelations, schemaOptions: { includeRelations: true })
 * @export
 * @interface EmpresaWithRelations
 */
export interface EmpresaWithRelations {
    /**
     * 
     * @type {number}
     * @memberof EmpresaWithRelations
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof EmpresaWithRelations
     */
    'codigo'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EmpresaWithRelations
     */
    'nombre'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EmpresaWithRelations
     */
    'descripcion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EmpresaWithRelations
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EmpresaWithRelations
     */
    'password'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EmpresaWithRelations
     */
    'servicio'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EmpresaWithRelations
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EmpresaWithRelations
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof EmpresaWithRelations
     */
    'usuCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof EmpresaWithRelations
     */
    'usuModificacion'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof EmpresaWithRelations
     */
    'tiempoInactividad'?: number;
}
/**
 * 
 * @export
 * @interface Envio
 */
export interface Envio {
    /**
     * 
     * @type {number}
     * @memberof Envio
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Envio
     */
    'anyo'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Envio
     */
    'origen'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Envio
     */
    'origenCoordenadasGps'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Envio
     */
    'destino'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Envio
     */
    'destinoCoordenadasGps'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Envio
     */
    'fechaSalida'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Envio
     */
    'fechaLlegada'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Envio
     */
    'paradasPrevistas'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Envio
     */
    'usuarioCreacion'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof Envio
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Envio
     */
    'usuarioModificacion'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof Envio
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Envio
     */
    'empresaId'?: number;
}
/**
 * 
 * @export
 * @interface EnvioContenido
 */
export interface EnvioContenido {
    /**
     * 
     * @type {number}
     * @memberof EnvioContenido
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof EnvioContenido
     */
    'producto'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EnvioContenido
     */
    'referencia'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EnvioContenido
     */
    'pesoKgs'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EnvioContenido
     */
    'pesoTotal'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EnvioContenido
     */
    'medidas'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EnvioContenido
     */
    'fotoProducto'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EnvioContenido
     */
    'fotoPallet'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EnvioContenido
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EnvioContenido
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof EnvioContenido
     */
    'usuCreacion'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof EnvioContenido
     */
    'usuModificacion'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof EnvioContenido
     */
    'envioId'?: number;
}
/**
 * 
 * @export
 * @interface EnvioContenidoFilter
 */
export interface EnvioContenidoFilter {
    /**
     * 
     * @type {number}
     * @memberof EnvioContenidoFilter
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof EnvioContenidoFilter
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof EnvioContenidoFilter
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof EnvioContenidoFilter
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {object | Set<string>}
     * @memberof EnvioContenidoFilter
     */
    'fields'?: object | Set<string>;
    /**
     * 
     * @type {Array<EnvioContenidoIncludeFilterItems | string>}
     * @memberof EnvioContenidoFilter
     */
    'include'?: Array<EnvioContenidoIncludeFilterItems | string>;
}
/**
 * 
 * @export
 * @interface EnvioContenidoFilter1
 */
export interface EnvioContenidoFilter1 {
    /**
     * 
     * @type {number}
     * @memberof EnvioContenidoFilter1
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof EnvioContenidoFilter1
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof EnvioContenidoFilter1
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof EnvioContenidoFilter1
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof EnvioContenidoFilter1
     */
    'where'?: { [key: string]: object; };
    /**
     * 
     * @type {object | Set<string>}
     * @memberof EnvioContenidoFilter1
     */
    'fields'?: object | Set<string>;
    /**
     * 
     * @type {Array<EnvioContenidoIncludeFilterItems | string>}
     * @memberof EnvioContenidoFilter1
     */
    'include'?: Array<EnvioContenidoIncludeFilterItems | string>;
}
/**
 * 
 * @export
 * @interface EnvioContenidoIncludeFilterItems
 */
export interface EnvioContenidoIncludeFilterItems {
    /**
     * 
     * @type {string}
     * @memberof EnvioContenidoIncludeFilterItems
     */
    'relation'?: EnvioContenidoIncludeFilterItemsRelationEnum;
    /**
     * 
     * @type {EnvioContenidoScopeFilter}
     * @memberof EnvioContenidoIncludeFilterItems
     */
    'scope'?: EnvioContenidoScopeFilter;
}

/**
    * @export
    * @enum {string}
    */
export enum EnvioContenidoIncludeFilterItemsRelationEnum {
    Envio = 'envio'
}

/**
 * (tsType: Partial<EnvioContenido>, schemaOptions: { partial: true })
 * @export
 * @interface EnvioContenidoPartial
 */
export interface EnvioContenidoPartial {
    /**
     * 
     * @type {number}
     * @memberof EnvioContenidoPartial
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof EnvioContenidoPartial
     */
    'producto'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EnvioContenidoPartial
     */
    'referencia'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EnvioContenidoPartial
     */
    'pesoKgs'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EnvioContenidoPartial
     */
    'pesoTotal'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EnvioContenidoPartial
     */
    'medidas'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EnvioContenidoPartial
     */
    'fotoProducto'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EnvioContenidoPartial
     */
    'fotoPallet'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EnvioContenidoPartial
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EnvioContenidoPartial
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof EnvioContenidoPartial
     */
    'usuCreacion'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof EnvioContenidoPartial
     */
    'usuModificacion'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof EnvioContenidoPartial
     */
    'envioId'?: number;
}
/**
 * 
 * @export
 * @interface EnvioContenidoScopeFilter
 */
export interface EnvioContenidoScopeFilter {
    /**
     * 
     * @type {number}
     * @memberof EnvioContenidoScopeFilter
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof EnvioContenidoScopeFilter
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof EnvioContenidoScopeFilter
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof EnvioContenidoScopeFilter
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof EnvioContenidoScopeFilter
     */
    'where'?: { [key: string]: object; };
    /**
     * 
     * @type {any | Set<string>}
     * @memberof EnvioContenidoScopeFilter
     */
    'fields'?: any | Set<string>;
    /**
     * 
     * @type {Array<{ [key: string]: object; }>}
     * @memberof EnvioContenidoScopeFilter
     */
    'include'?: Array<{ [key: string]: object; }>;
}
/**
 * (tsType: EnvioContenidoWithRelations, schemaOptions: { includeRelations: true })
 * @export
 * @interface EnvioContenidoWithRelations
 */
export interface EnvioContenidoWithRelations {
    /**
     * 
     * @type {number}
     * @memberof EnvioContenidoWithRelations
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof EnvioContenidoWithRelations
     */
    'producto'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EnvioContenidoWithRelations
     */
    'referencia'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EnvioContenidoWithRelations
     */
    'pesoKgs'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EnvioContenidoWithRelations
     */
    'pesoTotal'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EnvioContenidoWithRelations
     */
    'medidas'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EnvioContenidoWithRelations
     */
    'fotoProducto'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EnvioContenidoWithRelations
     */
    'fotoPallet'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EnvioContenidoWithRelations
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EnvioContenidoWithRelations
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof EnvioContenidoWithRelations
     */
    'usuCreacion'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof EnvioContenidoWithRelations
     */
    'usuModificacion'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof EnvioContenidoWithRelations
     */
    'envioId'?: number;
    /**
     * 
     * @type {EnvioWithRelations}
     * @memberof EnvioContenidoWithRelations
     */
    'envio'?: EnvioWithRelations;
    /**
     * 
     * @type {any}
     * @memberof EnvioContenidoWithRelations
     */
    'foreignKey'?: any;
}
/**
 * 
 * @export
 * @interface EnvioFilter
 */
export interface EnvioFilter {
    /**
     * 
     * @type {number}
     * @memberof EnvioFilter
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof EnvioFilter
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof EnvioFilter
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof EnvioFilter
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {object | Set<string>}
     * @memberof EnvioFilter
     */
    'fields'?: object | Set<string>;
    /**
     * 
     * @type {Array<EnvioIncludeFilterItems | string>}
     * @memberof EnvioFilter
     */
    'include'?: Array<EnvioIncludeFilterItems | string>;
}
/**
 * 
 * @export
 * @interface EnvioFilter1
 */
export interface EnvioFilter1 {
    /**
     * 
     * @type {number}
     * @memberof EnvioFilter1
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof EnvioFilter1
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof EnvioFilter1
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof EnvioFilter1
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof EnvioFilter1
     */
    'where'?: { [key: string]: object; };
    /**
     * 
     * @type {object | Set<string>}
     * @memberof EnvioFilter1
     */
    'fields'?: object | Set<string>;
    /**
     * 
     * @type {Array<EnvioIncludeFilterItems | string>}
     * @memberof EnvioFilter1
     */
    'include'?: Array<EnvioIncludeFilterItems | string>;
}
/**
 * 
 * @export
 * @interface EnvioIncludeFilterItems
 */
export interface EnvioIncludeFilterItems {
    /**
     * 
     * @type {string}
     * @memberof EnvioIncludeFilterItems
     */
    'relation'?: EnvioIncludeFilterItemsRelationEnum;
    /**
     * 
     * @type {EnvioScopeFilter}
     * @memberof EnvioIncludeFilterItems
     */
    'scope'?: EnvioScopeFilter;
}

/**
    * @export
    * @enum {string}
    */
export enum EnvioIncludeFilterItemsRelationEnum {
    Empresa = 'empresa',
    Contenidos = 'contenidos',
    Paradas = 'paradas',
    Vehiculos = 'vehiculos',
    Pallets = 'pallets'
}

/**
 * 
 * @export
 * @interface EnvioPallet
 */
export interface EnvioPallet {
    /**
     * 
     * @type {number}
     * @memberof EnvioPallet
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof EnvioPallet
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EnvioPallet
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof EnvioPallet
     */
    'usuCreacion'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof EnvioPallet
     */
    'usuModificacion'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof EnvioPallet
     */
    'palletId'?: number;
}
/**
 * 
 * @export
 * @interface EnvioPalletFilter
 */
export interface EnvioPalletFilter {
    /**
     * 
     * @type {number}
     * @memberof EnvioPalletFilter
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof EnvioPalletFilter
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof EnvioPalletFilter
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof EnvioPalletFilter
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {object | Set<string>}
     * @memberof EnvioPalletFilter
     */
    'fields'?: object | Set<string>;
    /**
     * 
     * @type {Array<EnvioPalletIncludeFilterItems | string>}
     * @memberof EnvioPalletFilter
     */
    'include'?: Array<EnvioPalletIncludeFilterItems | string>;
}
/**
 * 
 * @export
 * @interface EnvioPalletFilter1
 */
export interface EnvioPalletFilter1 {
    /**
     * 
     * @type {number}
     * @memberof EnvioPalletFilter1
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof EnvioPalletFilter1
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof EnvioPalletFilter1
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof EnvioPalletFilter1
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof EnvioPalletFilter1
     */
    'where'?: { [key: string]: object; };
    /**
     * 
     * @type {object | Set<string>}
     * @memberof EnvioPalletFilter1
     */
    'fields'?: object | Set<string>;
    /**
     * 
     * @type {Array<EnvioPalletIncludeFilterItems | string>}
     * @memberof EnvioPalletFilter1
     */
    'include'?: Array<EnvioPalletIncludeFilterItems | string>;
}
/**
 * 
 * @export
 * @interface EnvioPalletIncludeFilterItems
 */
export interface EnvioPalletIncludeFilterItems {
    /**
     * 
     * @type {string}
     * @memberof EnvioPalletIncludeFilterItems
     */
    'relation'?: EnvioPalletIncludeFilterItemsRelationEnum;
    /**
     * 
     * @type {EnvioPalletScopeFilter}
     * @memberof EnvioPalletIncludeFilterItems
     */
    'scope'?: EnvioPalletScopeFilter;
}

/**
    * @export
    * @enum {string}
    */
export enum EnvioPalletIncludeFilterItemsRelationEnum {
    Pallet = 'pallet'
}

/**
 * (tsType: Partial<EnvioPallet>, schemaOptions: { partial: true })
 * @export
 * @interface EnvioPalletPartial
 */
export interface EnvioPalletPartial {
    /**
     * 
     * @type {number}
     * @memberof EnvioPalletPartial
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof EnvioPalletPartial
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EnvioPalletPartial
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof EnvioPalletPartial
     */
    'usuCreacion'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof EnvioPalletPartial
     */
    'usuModificacion'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof EnvioPalletPartial
     */
    'palletId'?: number;
}
/**
 * 
 * @export
 * @interface EnvioPalletScopeFilter
 */
export interface EnvioPalletScopeFilter {
    /**
     * 
     * @type {number}
     * @memberof EnvioPalletScopeFilter
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof EnvioPalletScopeFilter
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof EnvioPalletScopeFilter
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof EnvioPalletScopeFilter
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof EnvioPalletScopeFilter
     */
    'where'?: { [key: string]: object; };
    /**
     * 
     * @type {any | Set<string>}
     * @memberof EnvioPalletScopeFilter
     */
    'fields'?: any | Set<string>;
    /**
     * 
     * @type {Array<{ [key: string]: object; }>}
     * @memberof EnvioPalletScopeFilter
     */
    'include'?: Array<{ [key: string]: object; }>;
}
/**
 * (tsType: EnvioPalletWithRelations, schemaOptions: { includeRelations: true })
 * @export
 * @interface EnvioPalletWithRelations
 */
export interface EnvioPalletWithRelations {
    /**
     * 
     * @type {number}
     * @memberof EnvioPalletWithRelations
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof EnvioPalletWithRelations
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EnvioPalletWithRelations
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof EnvioPalletWithRelations
     */
    'usuCreacion'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof EnvioPalletWithRelations
     */
    'usuModificacion'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof EnvioPalletWithRelations
     */
    'palletId'?: number;
    /**
     * 
     * @type {PalletWithRelations}
     * @memberof EnvioPalletWithRelations
     */
    'pallet'?: PalletWithRelations;
    /**
     * 
     * @type {any}
     * @memberof EnvioPalletWithRelations
     */
    'foreignKey'?: any;
}
/**
 * 
 * @export
 * @interface EnvioParada
 */
export interface EnvioParada {
    /**
     * 
     * @type {number}
     * @memberof EnvioParada
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof EnvioParada
     */
    'fecha'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EnvioParada
     */
    'lugarParada'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EnvioParada
     */
    'localizacionGps'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EnvioParada
     */
    'direccion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EnvioParada
     */
    'operario'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EnvioParada
     */
    'telefono'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EnvioParada
     */
    'mail'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EnvioParada
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EnvioParada
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof EnvioParada
     */
    'usuCreacion'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof EnvioParada
     */
    'usuModificacion'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof EnvioParada
     */
    'envioId'?: number;
}
/**
 * 
 * @export
 * @interface EnvioParadaFilter
 */
export interface EnvioParadaFilter {
    /**
     * 
     * @type {number}
     * @memberof EnvioParadaFilter
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof EnvioParadaFilter
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof EnvioParadaFilter
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof EnvioParadaFilter
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {object | Set<string>}
     * @memberof EnvioParadaFilter
     */
    'fields'?: object | Set<string>;
    /**
     * 
     * @type {Array<EnvioParadaIncludeFilterItems | string>}
     * @memberof EnvioParadaFilter
     */
    'include'?: Array<EnvioParadaIncludeFilterItems | string>;
}
/**
 * 
 * @export
 * @interface EnvioParadaFilter1
 */
export interface EnvioParadaFilter1 {
    /**
     * 
     * @type {number}
     * @memberof EnvioParadaFilter1
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof EnvioParadaFilter1
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof EnvioParadaFilter1
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof EnvioParadaFilter1
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof EnvioParadaFilter1
     */
    'where'?: { [key: string]: object; };
    /**
     * 
     * @type {object | Set<string>}
     * @memberof EnvioParadaFilter1
     */
    'fields'?: object | Set<string>;
    /**
     * 
     * @type {Array<EnvioParadaIncludeFilterItems | string>}
     * @memberof EnvioParadaFilter1
     */
    'include'?: Array<EnvioParadaIncludeFilterItems | string>;
}
/**
 * 
 * @export
 * @interface EnvioParadaIncludeFilterItems
 */
export interface EnvioParadaIncludeFilterItems {
    /**
     * 
     * @type {string}
     * @memberof EnvioParadaIncludeFilterItems
     */
    'relation'?: EnvioParadaIncludeFilterItemsRelationEnum;
    /**
     * 
     * @type {EnvioParadaScopeFilter}
     * @memberof EnvioParadaIncludeFilterItems
     */
    'scope'?: EnvioParadaScopeFilter;
}

/**
    * @export
    * @enum {string}
    */
export enum EnvioParadaIncludeFilterItemsRelationEnum {
    Envio = 'envio'
}

/**
 * (tsType: Partial<EnvioParada>, schemaOptions: { partial: true })
 * @export
 * @interface EnvioParadaPartial
 */
export interface EnvioParadaPartial {
    /**
     * 
     * @type {number}
     * @memberof EnvioParadaPartial
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof EnvioParadaPartial
     */
    'fecha'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EnvioParadaPartial
     */
    'lugarParada'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EnvioParadaPartial
     */
    'localizacionGps'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EnvioParadaPartial
     */
    'direccion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EnvioParadaPartial
     */
    'operario'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EnvioParadaPartial
     */
    'telefono'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EnvioParadaPartial
     */
    'mail'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EnvioParadaPartial
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EnvioParadaPartial
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof EnvioParadaPartial
     */
    'usuCreacion'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof EnvioParadaPartial
     */
    'usuModificacion'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof EnvioParadaPartial
     */
    'envioId'?: number;
}
/**
 * 
 * @export
 * @interface EnvioParadaScopeFilter
 */
export interface EnvioParadaScopeFilter {
    /**
     * 
     * @type {number}
     * @memberof EnvioParadaScopeFilter
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof EnvioParadaScopeFilter
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof EnvioParadaScopeFilter
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof EnvioParadaScopeFilter
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof EnvioParadaScopeFilter
     */
    'where'?: { [key: string]: object; };
    /**
     * 
     * @type {any | Set<string>}
     * @memberof EnvioParadaScopeFilter
     */
    'fields'?: any | Set<string>;
    /**
     * 
     * @type {Array<{ [key: string]: object; }>}
     * @memberof EnvioParadaScopeFilter
     */
    'include'?: Array<{ [key: string]: object; }>;
}
/**
 * (tsType: EnvioParadaWithRelations, schemaOptions: { includeRelations: true })
 * @export
 * @interface EnvioParadaWithRelations
 */
export interface EnvioParadaWithRelations {
    /**
     * 
     * @type {number}
     * @memberof EnvioParadaWithRelations
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof EnvioParadaWithRelations
     */
    'fecha'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EnvioParadaWithRelations
     */
    'lugarParada'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EnvioParadaWithRelations
     */
    'localizacionGps'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EnvioParadaWithRelations
     */
    'direccion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EnvioParadaWithRelations
     */
    'operario'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EnvioParadaWithRelations
     */
    'telefono'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EnvioParadaWithRelations
     */
    'mail'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EnvioParadaWithRelations
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EnvioParadaWithRelations
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof EnvioParadaWithRelations
     */
    'usuCreacion'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof EnvioParadaWithRelations
     */
    'usuModificacion'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof EnvioParadaWithRelations
     */
    'envioId'?: number;
    /**
     * 
     * @type {EnvioWithRelations}
     * @memberof EnvioParadaWithRelations
     */
    'envio'?: EnvioWithRelations;
    /**
     * 
     * @type {any}
     * @memberof EnvioParadaWithRelations
     */
    'foreignKey'?: any;
}
/**
 * (tsType: Partial<Envio>, schemaOptions: { partial: true })
 * @export
 * @interface EnvioPartial
 */
export interface EnvioPartial {
    /**
     * 
     * @type {number}
     * @memberof EnvioPartial
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof EnvioPartial
     */
    'anyo'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EnvioPartial
     */
    'origen'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EnvioPartial
     */
    'origenCoordenadasGps'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EnvioPartial
     */
    'destino'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EnvioPartial
     */
    'destinoCoordenadasGps'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EnvioPartial
     */
    'fechaSalida'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EnvioPartial
     */
    'fechaLlegada'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EnvioPartial
     */
    'paradasPrevistas'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof EnvioPartial
     */
    'usuarioCreacion'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof EnvioPartial
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof EnvioPartial
     */
    'usuarioModificacion'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof EnvioPartial
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof EnvioPartial
     */
    'empresaId'?: number;
}
/**
 * 
 * @export
 * @interface EnvioScopeFilter
 */
export interface EnvioScopeFilter {
    /**
     * 
     * @type {number}
     * @memberof EnvioScopeFilter
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof EnvioScopeFilter
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof EnvioScopeFilter
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof EnvioScopeFilter
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof EnvioScopeFilter
     */
    'where'?: { [key: string]: object; };
    /**
     * 
     * @type {any | Set<string>}
     * @memberof EnvioScopeFilter
     */
    'fields'?: any | Set<string>;
    /**
     * 
     * @type {Array<{ [key: string]: object; }>}
     * @memberof EnvioScopeFilter
     */
    'include'?: Array<{ [key: string]: object; }>;
}
/**
 * 
 * @export
 * @interface EnvioVehiculo
 */
export interface EnvioVehiculo {
    /**
     * 
     * @type {number}
     * @memberof EnvioVehiculo
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof EnvioVehiculo
     */
    'matricula'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EnvioVehiculo
     */
    'tipo'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EnvioVehiculo
     */
    'marca'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EnvioVehiculo
     */
    'modelo'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EnvioVehiculo
     */
    'color'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EnvioVehiculo
     */
    'carroceria'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EnvioVehiculo
     */
    'plataformaSn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EnvioVehiculo
     */
    'cargaMaxima'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EnvioVehiculo
     */
    'propietario'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EnvioVehiculo
     */
    'numeroServicio'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EnvioVehiculo
     */
    'tipoTransporte'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EnvioVehiculo
     */
    'conductor'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EnvioVehiculo
     */
    'idConductor'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EnvioVehiculo
     */
    'telefonoConductor'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EnvioVehiculo
     */
    'carnetConductor'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EnvioVehiculo
     */
    'gpsSn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EnvioVehiculo
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EnvioVehiculo
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof EnvioVehiculo
     */
    'usuCreacion'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof EnvioVehiculo
     */
    'usuModificacion'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof EnvioVehiculo
     */
    'envioId'?: number;
}
/**
 * 
 * @export
 * @interface EnvioVehiculoFilter
 */
export interface EnvioVehiculoFilter {
    /**
     * 
     * @type {number}
     * @memberof EnvioVehiculoFilter
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof EnvioVehiculoFilter
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof EnvioVehiculoFilter
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof EnvioVehiculoFilter
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {object | Set<string>}
     * @memberof EnvioVehiculoFilter
     */
    'fields'?: object | Set<string>;
    /**
     * 
     * @type {Array<EnvioVehiculoIncludeFilterItems | string>}
     * @memberof EnvioVehiculoFilter
     */
    'include'?: Array<EnvioVehiculoIncludeFilterItems | string>;
}
/**
 * 
 * @export
 * @interface EnvioVehiculoFilter1
 */
export interface EnvioVehiculoFilter1 {
    /**
     * 
     * @type {number}
     * @memberof EnvioVehiculoFilter1
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof EnvioVehiculoFilter1
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof EnvioVehiculoFilter1
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof EnvioVehiculoFilter1
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof EnvioVehiculoFilter1
     */
    'where'?: { [key: string]: object; };
    /**
     * 
     * @type {object | Set<string>}
     * @memberof EnvioVehiculoFilter1
     */
    'fields'?: object | Set<string>;
    /**
     * 
     * @type {Array<EnvioVehiculoIncludeFilterItems | string>}
     * @memberof EnvioVehiculoFilter1
     */
    'include'?: Array<EnvioVehiculoIncludeFilterItems | string>;
}
/**
 * 
 * @export
 * @interface EnvioVehiculoIncludeFilterItems
 */
export interface EnvioVehiculoIncludeFilterItems {
    /**
     * 
     * @type {string}
     * @memberof EnvioVehiculoIncludeFilterItems
     */
    'relation'?: EnvioVehiculoIncludeFilterItemsRelationEnum;
    /**
     * 
     * @type {EnvioVehiculoScopeFilter}
     * @memberof EnvioVehiculoIncludeFilterItems
     */
    'scope'?: EnvioVehiculoScopeFilter;
}

/**
    * @export
    * @enum {string}
    */
export enum EnvioVehiculoIncludeFilterItemsRelationEnum {
    Envio = 'envio'
}

/**
 * (tsType: Partial<EnvioVehiculo>, schemaOptions: { partial: true })
 * @export
 * @interface EnvioVehiculoPartial
 */
export interface EnvioVehiculoPartial {
    /**
     * 
     * @type {number}
     * @memberof EnvioVehiculoPartial
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof EnvioVehiculoPartial
     */
    'matricula'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EnvioVehiculoPartial
     */
    'tipo'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EnvioVehiculoPartial
     */
    'marca'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EnvioVehiculoPartial
     */
    'modelo'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EnvioVehiculoPartial
     */
    'color'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EnvioVehiculoPartial
     */
    'carroceria'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EnvioVehiculoPartial
     */
    'plataformaSn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EnvioVehiculoPartial
     */
    'cargaMaxima'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EnvioVehiculoPartial
     */
    'propietario'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EnvioVehiculoPartial
     */
    'numeroServicio'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EnvioVehiculoPartial
     */
    'tipoTransporte'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EnvioVehiculoPartial
     */
    'conductor'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EnvioVehiculoPartial
     */
    'idConductor'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EnvioVehiculoPartial
     */
    'telefonoConductor'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EnvioVehiculoPartial
     */
    'carnetConductor'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EnvioVehiculoPartial
     */
    'gpsSn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EnvioVehiculoPartial
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EnvioVehiculoPartial
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof EnvioVehiculoPartial
     */
    'usuCreacion'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof EnvioVehiculoPartial
     */
    'usuModificacion'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof EnvioVehiculoPartial
     */
    'envioId'?: number;
}
/**
 * 
 * @export
 * @interface EnvioVehiculoScopeFilter
 */
export interface EnvioVehiculoScopeFilter {
    /**
     * 
     * @type {number}
     * @memberof EnvioVehiculoScopeFilter
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof EnvioVehiculoScopeFilter
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof EnvioVehiculoScopeFilter
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof EnvioVehiculoScopeFilter
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof EnvioVehiculoScopeFilter
     */
    'where'?: { [key: string]: object; };
    /**
     * 
     * @type {any | Set<string>}
     * @memberof EnvioVehiculoScopeFilter
     */
    'fields'?: any | Set<string>;
    /**
     * 
     * @type {Array<{ [key: string]: object; }>}
     * @memberof EnvioVehiculoScopeFilter
     */
    'include'?: Array<{ [key: string]: object; }>;
}
/**
 * (tsType: EnvioVehiculoWithRelations, schemaOptions: { includeRelations: true })
 * @export
 * @interface EnvioVehiculoWithRelations
 */
export interface EnvioVehiculoWithRelations {
    /**
     * 
     * @type {number}
     * @memberof EnvioVehiculoWithRelations
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof EnvioVehiculoWithRelations
     */
    'matricula'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EnvioVehiculoWithRelations
     */
    'tipo'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EnvioVehiculoWithRelations
     */
    'marca'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EnvioVehiculoWithRelations
     */
    'modelo'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EnvioVehiculoWithRelations
     */
    'color'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EnvioVehiculoWithRelations
     */
    'carroceria'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EnvioVehiculoWithRelations
     */
    'plataformaSn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EnvioVehiculoWithRelations
     */
    'cargaMaxima'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EnvioVehiculoWithRelations
     */
    'propietario'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EnvioVehiculoWithRelations
     */
    'numeroServicio'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EnvioVehiculoWithRelations
     */
    'tipoTransporte'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EnvioVehiculoWithRelations
     */
    'conductor'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EnvioVehiculoWithRelations
     */
    'idConductor'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EnvioVehiculoWithRelations
     */
    'telefonoConductor'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EnvioVehiculoWithRelations
     */
    'carnetConductor'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EnvioVehiculoWithRelations
     */
    'gpsSn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EnvioVehiculoWithRelations
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EnvioVehiculoWithRelations
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof EnvioVehiculoWithRelations
     */
    'usuCreacion'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof EnvioVehiculoWithRelations
     */
    'usuModificacion'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof EnvioVehiculoWithRelations
     */
    'envioId'?: number;
    /**
     * 
     * @type {EnvioWithRelations}
     * @memberof EnvioVehiculoWithRelations
     */
    'envio'?: EnvioWithRelations;
    /**
     * 
     * @type {any}
     * @memberof EnvioVehiculoWithRelations
     */
    'foreignKey'?: any;
}
/**
 * (tsType: EnvioWithRelations, schemaOptions: { includeRelations: true })
 * @export
 * @interface EnvioWithRelations
 */
export interface EnvioWithRelations {
    /**
     * 
     * @type {number}
     * @memberof EnvioWithRelations
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof EnvioWithRelations
     */
    'anyo'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EnvioWithRelations
     */
    'origen'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EnvioWithRelations
     */
    'origenCoordenadasGps'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EnvioWithRelations
     */
    'destino'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EnvioWithRelations
     */
    'destinoCoordenadasGps'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EnvioWithRelations
     */
    'fechaSalida'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EnvioWithRelations
     */
    'fechaLlegada'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EnvioWithRelations
     */
    'paradasPrevistas'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof EnvioWithRelations
     */
    'usuarioCreacion'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof EnvioWithRelations
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof EnvioWithRelations
     */
    'usuarioModificacion'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof EnvioWithRelations
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof EnvioWithRelations
     */
    'empresaId'?: number;
    /**
     * 
     * @type {EmpresaWithRelations}
     * @memberof EnvioWithRelations
     */
    'empresa'?: EmpresaWithRelations;
    /**
     * 
     * @type {any}
     * @memberof EnvioWithRelations
     */
    'foreignKey'?: any;
    /**
     * 
     * @type {Array<EnvioContenidoWithRelations>}
     * @memberof EnvioWithRelations
     */
    'contenidos'?: Array<EnvioContenidoWithRelations>;
    /**
     * 
     * @type {Array<EnvioParadaWithRelations>}
     * @memberof EnvioWithRelations
     */
    'paradas'?: Array<EnvioParadaWithRelations>;
    /**
     * 
     * @type {Array<EnvioVehiculoWithRelations>}
     * @memberof EnvioWithRelations
     */
    'vehiculos'?: Array<EnvioVehiculoWithRelations>;
    /**
     * 
     * @type {Array<EnvioPalletWithRelations>}
     * @memberof EnvioWithRelations
     */
    'pallets'?: Array<EnvioPalletWithRelations>;
}
/**
 * 
 * @export
 * @interface Idioma
 */
export interface Idioma {
    /**
     * 
     * @type {number}
     * @memberof Idioma
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Idioma
     */
    'iso'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Idioma
     */
    'nombre'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Idioma
     */
    'activoSn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Idioma
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Idioma
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Idioma
     */
    'usuCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof Idioma
     */
    'usuModificacion'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof Idioma
     */
    'fechaInactivo'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Idioma
     */
    'usuInactivo'?: number | null;
}
/**
 * 
 * @export
 * @interface IdiomaFilter
 */
export interface IdiomaFilter {
    /**
     * 
     * @type {number}
     * @memberof IdiomaFilter
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof IdiomaFilter
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof IdiomaFilter
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof IdiomaFilter
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {object | Set<string>}
     * @memberof IdiomaFilter
     */
    'fields'?: object | Set<string>;
}
/**
 * 
 * @export
 * @interface IdiomaFilter1
 */
export interface IdiomaFilter1 {
    /**
     * 
     * @type {number}
     * @memberof IdiomaFilter1
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof IdiomaFilter1
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof IdiomaFilter1
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof IdiomaFilter1
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof IdiomaFilter1
     */
    'where'?: { [key: string]: object; };
    /**
     * 
     * @type {object | Set<string>}
     * @memberof IdiomaFilter1
     */
    'fields'?: object | Set<string>;
}
/**
 * (tsType: Partial<Idioma>, schemaOptions: { partial: true })
 * @export
 * @interface IdiomaPartial
 */
export interface IdiomaPartial {
    /**
     * 
     * @type {number}
     * @memberof IdiomaPartial
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof IdiomaPartial
     */
    'iso'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof IdiomaPartial
     */
    'nombre'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof IdiomaPartial
     */
    'activoSn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof IdiomaPartial
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof IdiomaPartial
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof IdiomaPartial
     */
    'usuCreacion'?: number;
    /**
     * 
     * @type {number}
     * @memberof IdiomaPartial
     */
    'usuModificacion'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof IdiomaPartial
     */
    'fechaInactivo'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof IdiomaPartial
     */
    'usuInactivo'?: number | null;
}
/**
 * (tsType: IdiomaWithRelations, schemaOptions: { includeRelations: true })
 * @export
 * @interface IdiomaWithRelations
 */
export interface IdiomaWithRelations {
    /**
     * 
     * @type {number}
     * @memberof IdiomaWithRelations
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof IdiomaWithRelations
     */
    'iso'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof IdiomaWithRelations
     */
    'nombre'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof IdiomaWithRelations
     */
    'activoSn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof IdiomaWithRelations
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof IdiomaWithRelations
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof IdiomaWithRelations
     */
    'usuCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof IdiomaWithRelations
     */
    'usuModificacion'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof IdiomaWithRelations
     */
    'fechaInactivo'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof IdiomaWithRelations
     */
    'usuInactivo'?: number | null;
}
/**
 * 
 * @export
 * @interface InlineObject3
 */
export interface InlineObject3 {
    /**
     * 
     * @type {Array<string>}
     * @memberof InlineObject3
     */
    'emails'?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof InlineObject3
     */
    'empresaId'?: number;
}
/**
 * 
 * @export
 * @interface InlineObject4
 */
export interface InlineObject4 {
    /**
     * 
     * @type {Array<string>}
     * @memberof InlineObject4
     */
    'emails'?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof InlineObject4
     */
    'empresaId'?: number;
}
/**
 * 
 * @export
 * @interface InlineObject5
 */
export interface InlineObject5 {
    /**
     * 
     * @type {string}
     * @memberof InlineObject5
     */
    'mail': string;
    /**
     * 
     * @type {string}
     * @memberof InlineObject5
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface InlineObject6
 */
export interface InlineObject6 {
    /**
     * 
     * @type {string}
     * @memberof InlineObject6
     */
    'email'?: string;
}
/**
 * 
 * @export
 * @interface InlineObject7
 */
export interface InlineObject7 {
    /**
     * 
     * @type {string}
     * @memberof InlineObject7
     */
    'nombre': string;
    /**
     * 
     * @type {string}
     * @memberof InlineObject7
     */
    'mail': string;
    /**
     * 
     * @type {string}
     * @memberof InlineObject7
     */
    'password': string;
    /**
     * 
     * @type {number}
     * @memberof InlineObject7
     */
    'empresaId'?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineObject7
     */
    'rolId'?: number;
}
/**
 * 
 * @export
 * @interface InlineResponse200
 */
export interface InlineResponse200 {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200
     */
    'accessToken'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200
     */
    'expiresIn'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200
     */
    'refreshToken'?: string;
    /**
     * 
     * @type {Usuario}
     * @memberof InlineResponse200
     */
    'userData'?: Usuario;
}
/**
 * 
 * @export
 * @interface InlineResponse2001
 */
export interface InlineResponse2001 {
    /**
     * 
     * @type {object}
     * @memberof InlineResponse2001
     */
    'user'?: object;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2001
     */
    'token'?: string;
}
/**
 * 
 * @export
 * @interface ListaPermisos
 */
export interface ListaPermisos {
    /**
     * 
     * @type {number}
     * @memberof ListaPermisos
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ListaPermisos
     */
    'header'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ListaPermisos
     */
    'seccion'?: string | null;
}
/**
 * 
 * @export
 * @interface ListaPermisosFilter
 */
export interface ListaPermisosFilter {
    /**
     * 
     * @type {number}
     * @memberof ListaPermisosFilter
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof ListaPermisosFilter
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof ListaPermisosFilter
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof ListaPermisosFilter
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {object | Set<string>}
     * @memberof ListaPermisosFilter
     */
    'fields'?: object | Set<string>;
}
/**
 * 
 * @export
 * @interface ListaPermisosFilter1
 */
export interface ListaPermisosFilter1 {
    /**
     * 
     * @type {number}
     * @memberof ListaPermisosFilter1
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof ListaPermisosFilter1
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof ListaPermisosFilter1
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof ListaPermisosFilter1
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof ListaPermisosFilter1
     */
    'where'?: { [key: string]: object; };
    /**
     * 
     * @type {object | Set<string>}
     * @memberof ListaPermisosFilter1
     */
    'fields'?: object | Set<string>;
}
/**
 * (tsType: Partial<ListaPermisos>, schemaOptions: { partial: true })
 * @export
 * @interface ListaPermisosPartial
 */
export interface ListaPermisosPartial {
    /**
     * 
     * @type {number}
     * @memberof ListaPermisosPartial
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ListaPermisosPartial
     */
    'header'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ListaPermisosPartial
     */
    'seccion'?: string | null;
}
/**
 * (tsType: ListaPermisosWithRelations, schemaOptions: { includeRelations: true })
 * @export
 * @interface ListaPermisosWithRelations
 */
export interface ListaPermisosWithRelations {
    /**
     * 
     * @type {number}
     * @memberof ListaPermisosWithRelations
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ListaPermisosWithRelations
     */
    'header'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ListaPermisosWithRelations
     */
    'seccion'?: string | null;
}
/**
 * 
 * @export
 * @interface LogUsuario
 */
export interface LogUsuario {
    /**
     * 
     * @type {number}
     * @memberof LogUsuario
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof LogUsuario
     */
    'usuarioId': number;
    /**
     * 
     * @type {string}
     * @memberof LogUsuario
     */
    'fechaRegistro'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LogUsuario
     */
    'ip'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LogUsuario
     */
    'masDatos'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LogUsuario
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LogUsuario
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof LogUsuario
     */
    'usuCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof LogUsuario
     */
    'usuModificacion'?: number | null;
}
/**
 * 
 * @export
 * @interface LogUsuarioFilter
 */
export interface LogUsuarioFilter {
    /**
     * 
     * @type {number}
     * @memberof LogUsuarioFilter
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof LogUsuarioFilter
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof LogUsuarioFilter
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof LogUsuarioFilter
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {object | Set<string>}
     * @memberof LogUsuarioFilter
     */
    'fields'?: object | Set<string>;
}
/**
 * 
 * @export
 * @interface LogUsuarioFilter1
 */
export interface LogUsuarioFilter1 {
    /**
     * 
     * @type {number}
     * @memberof LogUsuarioFilter1
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof LogUsuarioFilter1
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof LogUsuarioFilter1
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof LogUsuarioFilter1
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof LogUsuarioFilter1
     */
    'where'?: { [key: string]: object; };
    /**
     * 
     * @type {object | Set<string>}
     * @memberof LogUsuarioFilter1
     */
    'fields'?: object | Set<string>;
}
/**
 * (tsType: Partial<LogUsuario>, schemaOptions: { partial: true })
 * @export
 * @interface LogUsuarioPartial
 */
export interface LogUsuarioPartial {
    /**
     * 
     * @type {number}
     * @memberof LogUsuarioPartial
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof LogUsuarioPartial
     */
    'usuarioId'?: number;
    /**
     * 
     * @type {string}
     * @memberof LogUsuarioPartial
     */
    'fechaRegistro'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LogUsuarioPartial
     */
    'ip'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LogUsuarioPartial
     */
    'masDatos'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LogUsuarioPartial
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LogUsuarioPartial
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof LogUsuarioPartial
     */
    'usuCreacion'?: number;
    /**
     * 
     * @type {number}
     * @memberof LogUsuarioPartial
     */
    'usuModificacion'?: number | null;
}
/**
 * (tsType: LogUsuarioWithRelations, schemaOptions: { includeRelations: true })
 * @export
 * @interface LogUsuarioWithRelations
 */
export interface LogUsuarioWithRelations {
    /**
     * 
     * @type {number}
     * @memberof LogUsuarioWithRelations
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof LogUsuarioWithRelations
     */
    'usuarioId': number;
    /**
     * 
     * @type {string}
     * @memberof LogUsuarioWithRelations
     */
    'fechaRegistro'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LogUsuarioWithRelations
     */
    'ip'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LogUsuarioWithRelations
     */
    'masDatos'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LogUsuarioWithRelations
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LogUsuarioWithRelations
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof LogUsuarioWithRelations
     */
    'usuCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof LogUsuarioWithRelations
     */
    'usuModificacion'?: number | null;
}
/**
 * 
 * @export
 * @interface LoopbackCount
 */
export interface LoopbackCount {
    /**
     * 
     * @type {number}
     * @memberof LoopbackCount
     */
    'count'?: number;
}
/**
 * (tsType: Omit<Archivo, \'id\'>, schemaOptions: { title: \'NewArchivo\', exclude: [ \'id\' ] })
 * @export
 * @interface NewArchivo
 */
export interface NewArchivo {
    /**
     * 
     * @type {number}
     * @memberof NewArchivo
     */
    'empresaId': number;
    /**
     * 
     * @type {number}
     * @memberof NewArchivo
     */
    'tipoArchivoId'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof NewArchivo
     */
    'nombre'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewArchivo
     */
    'url'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewArchivo
     */
    'descripcion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewArchivo
     */
    'tabla'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof NewArchivo
     */
    'idTabla'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof NewArchivo
     */
    'pantalla'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewArchivo
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewArchivo
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof NewArchivo
     */
    'usuCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof NewArchivo
     */
    'usuModificacion'?: number | null;
}
/**
 * (tsType: Omit<Empresa, \'id\'>, schemaOptions: { title: \'NewEmpresa\', exclude: [ \'id\' ] })
 * @export
 * @interface NewEmpresa
 */
export interface NewEmpresa {
    /**
     * 
     * @type {string}
     * @memberof NewEmpresa
     */
    'codigo'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewEmpresa
     */
    'nombre'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewEmpresa
     */
    'descripcion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewEmpresa
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewEmpresa
     */
    'password'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewEmpresa
     */
    'servicio'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewEmpresa
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewEmpresa
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof NewEmpresa
     */
    'usuCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof NewEmpresa
     */
    'usuModificacion'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof NewEmpresa
     */
    'tiempoInactividad'?: number;
}
/**
 * (tsType: Omit<Envio, \'id\'>, schemaOptions: { title: \'NewEnvio\', exclude: [ \'id\' ] })
 * @export
 * @interface NewEnvio
 */
export interface NewEnvio {
    /**
     * 
     * @type {string}
     * @memberof NewEnvio
     */
    'anyo'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewEnvio
     */
    'origen'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewEnvio
     */
    'origenCoordenadasGps'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewEnvio
     */
    'destino'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewEnvio
     */
    'destinoCoordenadasGps'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewEnvio
     */
    'fechaSalida'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewEnvio
     */
    'fechaLlegada'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewEnvio
     */
    'paradasPrevistas'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof NewEnvio
     */
    'usuarioCreacion'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof NewEnvio
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof NewEnvio
     */
    'usuarioModificacion'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof NewEnvio
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof NewEnvio
     */
    'empresaId'?: number;
}
/**
 * (tsType: Omit<EnvioContenido, \'id\'>, schemaOptions: { title: \'NewEnvioContenido\', exclude: [ \'id\' ] })
 * @export
 * @interface NewEnvioContenido
 */
export interface NewEnvioContenido {
    /**
     * 
     * @type {string}
     * @memberof NewEnvioContenido
     */
    'producto'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewEnvioContenido
     */
    'referencia'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewEnvioContenido
     */
    'pesoKgs'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewEnvioContenido
     */
    'pesoTotal'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewEnvioContenido
     */
    'medidas'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewEnvioContenido
     */
    'fotoProducto'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewEnvioContenido
     */
    'fotoPallet'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewEnvioContenido
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewEnvioContenido
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof NewEnvioContenido
     */
    'usuCreacion'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof NewEnvioContenido
     */
    'usuModificacion'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof NewEnvioContenido
     */
    'envioId'?: number;
}
/**
 * (tsType: Omit<EnvioPallet, \'id\'>, schemaOptions: { title: \'NewEnvioPallet\', exclude: [ \'id\' ] })
 * @export
 * @interface NewEnvioPallet
 */
export interface NewEnvioPallet {
    /**
     * 
     * @type {string}
     * @memberof NewEnvioPallet
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewEnvioPallet
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof NewEnvioPallet
     */
    'usuCreacion'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof NewEnvioPallet
     */
    'usuModificacion'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof NewEnvioPallet
     */
    'palletId'?: number;
}
/**
 * (tsType: Omit<EnvioParada, \'id\'>, schemaOptions: { title: \'NewEnvioParada\', exclude: [ \'id\' ] })
 * @export
 * @interface NewEnvioParada
 */
export interface NewEnvioParada {
    /**
     * 
     * @type {string}
     * @memberof NewEnvioParada
     */
    'fecha'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewEnvioParada
     */
    'lugarParada'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewEnvioParada
     */
    'localizacionGps'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewEnvioParada
     */
    'direccion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewEnvioParada
     */
    'operario'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewEnvioParada
     */
    'telefono'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewEnvioParada
     */
    'mail'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewEnvioParada
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewEnvioParada
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof NewEnvioParada
     */
    'usuCreacion'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof NewEnvioParada
     */
    'usuModificacion'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof NewEnvioParada
     */
    'envioId'?: number;
}
/**
 * (tsType: Omit<EnvioVehiculo, \'id\'>, schemaOptions: { title: \'NewEnvioVehiculo\', exclude: [ \'id\' ] })
 * @export
 * @interface NewEnvioVehiculo
 */
export interface NewEnvioVehiculo {
    /**
     * 
     * @type {string}
     * @memberof NewEnvioVehiculo
     */
    'matricula'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewEnvioVehiculo
     */
    'tipo'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewEnvioVehiculo
     */
    'marca'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewEnvioVehiculo
     */
    'modelo'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewEnvioVehiculo
     */
    'color'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewEnvioVehiculo
     */
    'carroceria'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewEnvioVehiculo
     */
    'plataformaSn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewEnvioVehiculo
     */
    'cargaMaxima'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewEnvioVehiculo
     */
    'propietario'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewEnvioVehiculo
     */
    'numeroServicio'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewEnvioVehiculo
     */
    'tipoTransporte'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewEnvioVehiculo
     */
    'conductor'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewEnvioVehiculo
     */
    'idConductor'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewEnvioVehiculo
     */
    'telefonoConductor'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewEnvioVehiculo
     */
    'carnetConductor'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewEnvioVehiculo
     */
    'gpsSn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewEnvioVehiculo
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewEnvioVehiculo
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof NewEnvioVehiculo
     */
    'usuCreacion'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof NewEnvioVehiculo
     */
    'usuModificacion'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof NewEnvioVehiculo
     */
    'envioId'?: number;
}
/**
 * (tsType: Omit<Idioma, \'id\'>, schemaOptions: { title: \'NewIdioma\', exclude: [ \'id\' ] })
 * @export
 * @interface NewIdioma
 */
export interface NewIdioma {
    /**
     * 
     * @type {string}
     * @memberof NewIdioma
     */
    'iso'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewIdioma
     */
    'nombre'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewIdioma
     */
    'activoSn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewIdioma
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewIdioma
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof NewIdioma
     */
    'usuCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof NewIdioma
     */
    'usuModificacion'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof NewIdioma
     */
    'fechaInactivo'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof NewIdioma
     */
    'usuInactivo'?: number | null;
}
/**
 * (tsType: Omit<ListaPermisos, \'id\'>, schemaOptions: { title: \'NewListaPermisos\', exclude: [ \'id\' ] })
 * @export
 * @interface NewListaPermisos
 */
export interface NewListaPermisos {
    /**
     * 
     * @type {string}
     * @memberof NewListaPermisos
     */
    'header'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewListaPermisos
     */
    'seccion'?: string | null;
}
/**
 * (tsType: Omit<LogUsuario, \'id\'>, schemaOptions: { title: \'NewLogUsuario\', exclude: [ \'id\' ] })
 * @export
 * @interface NewLogUsuario
 */
export interface NewLogUsuario {
    /**
     * 
     * @type {number}
     * @memberof NewLogUsuario
     */
    'usuarioId': number;
    /**
     * 
     * @type {string}
     * @memberof NewLogUsuario
     */
    'fechaRegistro'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewLogUsuario
     */
    'ip'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewLogUsuario
     */
    'masDatos'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewLogUsuario
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewLogUsuario
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof NewLogUsuario
     */
    'usuCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof NewLogUsuario
     */
    'usuModificacion'?: number | null;
}
/**
 * (tsType: Omit<Pais, \'id\'>, schemaOptions: { title: \'NewPais\', exclude: [ \'id\' ] })
 * @export
 * @interface NewPais
 */
export interface NewPais {
    /**
     * 
     * @type {string}
     * @memberof NewPais
     */
    'iso'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewPais
     */
    'nombre'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewPais
     */
    'activoSn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewPais
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewPais
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof NewPais
     */
    'usuCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof NewPais
     */
    'usuModificacion'?: number | null;
}
/**
 * (tsType: Omit<Pallet, \'id\'>, schemaOptions: { title: \'NewPallet\', exclude: [ \'id\' ] })
 * @export
 * @interface NewPallet
 */
export interface NewPallet {
    /**
     * 
     * @type {string}
     * @memberof NewPallet
     */
    'codigo'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewPallet
     */
    'nombre'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof NewPallet
     */
    'usuarioCreacion'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof NewPallet
     */
    'usuarioModificacion'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof NewPallet
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewPallet
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof NewPallet
     */
    'empresaId'?: number;
}
/**
 * (tsType: Omit<PalletConfiguracion, \'id\'>, schemaOptions: { title: \'NewPalletConfiguracion\', exclude: [ \'id\' ] })
 * @export
 * @interface NewPalletConfiguracion
 */
export interface NewPalletConfiguracion {
    /**
     * 
     * @type {string}
     * @memberof NewPalletConfiguracion
     */
    'eventoGuardadoMinuto'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewPalletConfiguracion
     */
    'eventoEnviadoMinuto'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewPalletConfiguracion
     */
    'resolucionPeso'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewPalletConfiguracion
     */
    'temperaturaSinControl'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewPalletConfiguracion
     */
    'temperaturaAmbiente'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewPalletConfiguracion
     */
    'temperaturaRefrigerado'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewPalletConfiguracion
     */
    'temperaturaCongelado'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewPalletConfiguracion
     */
    'humedadPermitida'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewPalletConfiguracion
     */
    'calidadAirePermitida'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewPalletConfiguracion
     */
    'velocidadPermitida'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewPalletConfiguracion
     */
    'unidadMedida'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof NewPalletConfiguracion
     */
    'usuarioCreacion'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof NewPalletConfiguracion
     */
    'usuarioModificacion'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof NewPalletConfiguracion
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewPalletConfiguracion
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof NewPalletConfiguracion
     */
    'palletId'?: number;
}
/**
 * (tsType: Omit<PalletConfiguracionGeneral, \'id\'>, schemaOptions: { title: \'NewPalletConfiguracionGeneral\', exclude: [ \'id\' ] })
 * @export
 * @interface NewPalletConfiguracionGeneral
 */
export interface NewPalletConfiguracionGeneral {
    /**
     * 
     * @type {string}
     * @memberof NewPalletConfiguracionGeneral
     */
    'eventoGuardadoMinuto'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewPalletConfiguracionGeneral
     */
    'eventoEnviadoMinuto'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewPalletConfiguracionGeneral
     */
    'resolucionPeso'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewPalletConfiguracionGeneral
     */
    'temperaturaSinControl'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewPalletConfiguracionGeneral
     */
    'temperaturaAmbiente'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewPalletConfiguracionGeneral
     */
    'temperaturaRefrigerado'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewPalletConfiguracionGeneral
     */
    'temperaturaCongelado'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewPalletConfiguracionGeneral
     */
    'humedadPermitida'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewPalletConfiguracionGeneral
     */
    'calidadAirePermitida'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewPalletConfiguracionGeneral
     */
    'velocidadPermitida'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewPalletConfiguracionGeneral
     */
    'unidadMedida'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof NewPalletConfiguracionGeneral
     */
    'usuarioCreacion'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof NewPalletConfiguracionGeneral
     */
    'usuarioModificacion'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof NewPalletConfiguracionGeneral
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewPalletConfiguracionGeneral
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof NewPalletConfiguracionGeneral
     */
    'empresaId'?: number;
}
/**
 * (tsType: Omit<PalletsMovements, \'id\'>, schemaOptions: { title: \'NewPalletsMovements\', exclude: [ \'id\' ] })
 * @export
 * @interface NewPalletsMovements
 */
export interface NewPalletsMovements {
    /**
     * 
     * @type {number}
     * @memberof NewPalletsMovements
     */
    'empresa_Id': number;
    /**
     * 
     * @type {string}
     * @memberof NewPalletsMovements
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewPalletsMovements
     */
    'temperature'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewPalletsMovements
     */
    'humidity'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewPalletsMovements
     */
    'press'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewPalletsMovements
     */
    'pm2_5'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewPalletsMovements
     */
    'pm5'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewPalletsMovements
     */
    'pm10'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewPalletsMovements
     */
    'battery_volts'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewPalletsMovements
     */
    'battery_pct'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewPalletsMovements
     */
    'rssi'?: string | null;
}
/**
 * (tsType: Omit<ParametrosPallets, \'id\'>, schemaOptions: { title: \'NewParametrosPallets\', exclude: [ \'id\' ] })
 * @export
 * @interface NewParametrosPallets
 */
export interface NewParametrosPallets {
    /**
     * 
     * @type {string}
     * @memberof NewParametrosPallets
     */
    'nombre'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewParametrosPallets
     */
    'activoSn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewParametrosPallets
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof NewParametrosPallets
     */
    'usuCreacion'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof NewParametrosPallets
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof NewParametrosPallets
     */
    'usuModificacion'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof NewParametrosPallets
     */
    'empresaId'?: number;
}
/**
 * (tsType: Omit<ParametrosPalletsDetalle, \'id\'>, schemaOptions: { title: \'NewParametrosPalletsDetalle\', exclude: [ \'id\' ] })
 * @export
 * @interface NewParametrosPalletsDetalle
 */
export interface NewParametrosPalletsDetalle {
    /**
     * 
     * @type {string}
     * @memberof NewParametrosPalletsDetalle
     */
    'nombre'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof NewParametrosPalletsDetalle
     */
    'usuCreacion'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof NewParametrosPalletsDetalle
     */
    'usuModificacion'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof NewParametrosPalletsDetalle
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewParametrosPalletsDetalle
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof NewParametrosPalletsDetalle
     */
    'parametrosPalletsId'?: number;
}
/**
 * (tsType: Omit<Permiso, \'id\'>, schemaOptions: { title: \'NewPermiso\', exclude: [ \'id\' ] })
 * @export
 * @interface NewPermiso
 */
export interface NewPermiso {
    /**
     * 
     * @type {number}
     * @memberof NewPermiso
     */
    'rolId': number;
    /**
     * 
     * @type {string}
     * @memberof NewPermiso
     */
    'modulo'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewPermiso
     */
    'controlador'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewPermiso
     */
    'accion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewPermiso
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewPermiso
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof NewPermiso
     */
    'usuCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof NewPermiso
     */
    'usuModificacion'?: number | null;
}
/**
 * (tsType: Omit<PlantillaEmail, \'id\'>, schemaOptions: { title: \'NewPlantillaEmail\', exclude: [ \'id\' ] })
 * @export
 * @interface NewPlantillaEmail
 */
export interface NewPlantillaEmail {
    /**
     * 
     * @type {number}
     * @memberof NewPlantillaEmail
     */
    'idiomaId': number;
    /**
     * 
     * @type {number}
     * @memberof NewPlantillaEmail
     */
    'empresaId': number;
    /**
     * 
     * @type {string}
     * @memberof NewPlantillaEmail
     */
    'nombrePlantilla': string;
    /**
     * 
     * @type {string}
     * @memberof NewPlantillaEmail
     */
    'activoSn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewPlantillaEmail
     */
    'titulo'?: string | null;
    /**
     * 
     * @type {any}
     * @memberof NewPlantillaEmail
     */
    'cuerpo'?: any | null;
    /**
     * 
     * @type {string}
     * @memberof NewPlantillaEmail
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewPlantillaEmail
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof NewPlantillaEmail
     */
    'usuCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof NewPlantillaEmail
     */
    'usuModificacion'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof NewPlantillaEmail
     */
    'fechaInactivo'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof NewPlantillaEmail
     */
    'usuInactivo'?: number | null;
}
/**
 * (tsType: Omit<RefrescarToken, \'id\'>, schemaOptions: { title: \'NewRefrescarToken\', exclude: [ \'id\' ] })
 * @export
 * @interface NewRefrescarToken
 */
export interface NewRefrescarToken {
    /**
     * 
     * @type {number}
     * @memberof NewRefrescarToken
     */
    'usuarioId'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof NewRefrescarToken
     */
    'refreshToken'?: string | null;
}
/**
 * (tsType: Omit<Rol, \'id\'>, schemaOptions: { title: \'NewRol\', exclude: [ \'id\' ] })
 * @export
 * @interface NewRol
 */
export interface NewRol {
    /**
     * 
     * @type {number}
     * @memberof NewRol
     */
    'empresaId': number;
    /**
     * 
     * @type {string}
     * @memberof NewRol
     */
    'nombre'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewRol
     */
    'activoSn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewRol
     */
    'muestraEmpresa'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewRol
     */
    'dashboardUrl'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewRol
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewRol
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof NewRol
     */
    'usuCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof NewRol
     */
    'usuModificacion'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof NewRol
     */
    'fechaInactivo'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof NewRol
     */
    'usuInactivo'?: number | null;
}
/**
 * (tsType: Omit<Seccion, \'id\'>, schemaOptions: { title: \'NewSeccion\', exclude: [ \'id\' ] })
 * @export
 * @interface NewSeccion
 */
export interface NewSeccion {
    /**
     * 
     * @type {string}
     * @memberof NewSeccion
     */
    'nombre'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewSeccion
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewSeccion
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof NewSeccion
     */
    'usuCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof NewSeccion
     */
    'usuModificacion'?: number | null;
}
/**
 * (tsType: Omit<TipoArchivo, \'id\'>, schemaOptions: { title: \'NewTipoArchivo\', exclude: [ \'id\' ] })
 * @export
 * @interface NewTipoArchivo
 */
export interface NewTipoArchivo {
    /**
     * 
     * @type {number}
     * @memberof NewTipoArchivo
     */
    'empresaId': number;
    /**
     * 
     * @type {number}
     * @memberof NewTipoArchivo
     */
    'seccionId': number;
    /**
     * 
     * @type {string}
     * @memberof NewTipoArchivo
     */
    'nombre'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewTipoArchivo
     */
    'tipo'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof NewTipoArchivo
     */
    'orden'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof NewTipoArchivo
     */
    'multiple'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewTipoArchivo
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewTipoArchivo
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof NewTipoArchivo
     */
    'usuCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof NewTipoArchivo
     */
    'usuModificacion'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof NewTipoArchivo
     */
    'activoSn'?: string | null;
}
/**
 * (tsType: Omit<Traduccion, \'id\'>, schemaOptions: { title: \'NewTraduccion\', exclude: [ \'id\' ] })
 * @export
 * @interface NewTraduccion
 */
export interface NewTraduccion {
    /**
     * 
     * @type {number}
     * @memberof NewTraduccion
     */
    'idiomaId': number;
    /**
     * 
     * @type {string}
     * @memberof NewTraduccion
     */
    'clave'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewTraduccion
     */
    'valor'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewTraduccion
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewTraduccion
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof NewTraduccion
     */
    'usuCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof NewTraduccion
     */
    'usuModificacion'?: number | null;
}
/**
 * (tsType: Omit<Usuario, \'id\'>, schemaOptions: { title: \'NewUsuario\', exclude: [ \'id\' ] })
 * @export
 * @interface NewUsuario
 */
export interface NewUsuario {
    /**
     * 
     * @type {number}
     * @memberof NewUsuario
     */
    'empresaId': number;
    /**
     * 
     * @type {number}
     * @memberof NewUsuario
     */
    'rolId': number;
    /**
     * 
     * @type {number}
     * @memberof NewUsuario
     */
    'idiomaId': number;
    /**
     * 
     * @type {string}
     * @memberof NewUsuario
     */
    'nombre'?: string;
    /**
     * 
     * @type {string}
     * @memberof NewUsuario
     */
    'mail'?: string;
    /**
     * 
     * @type {string}
     * @memberof NewUsuario
     */
    'activoSn'?: string;
    /**
     * 
     * @type {string}
     * @memberof NewUsuario
     */
    'telefono'?: string;
    /**
     * 
     * @type {string}
     * @memberof NewUsuario
     */
    'avatar'?: string;
    /**
     * 
     * @type {string}
     * @memberof NewUsuario
     */
    'fechaCreacion'?: string;
    /**
     * 
     * @type {string}
     * @memberof NewUsuario
     */
    'fechaModificacion'?: string;
    /**
     * 
     * @type {number}
     * @memberof NewUsuario
     */
    'usuCreacion'?: number;
    /**
     * 
     * @type {number}
     * @memberof NewUsuario
     */
    'usuModificacion'?: number;
    /**
     * 
     * @type {string}
     * @memberof NewUsuario
     */
    'fechaInactivo'?: string;
    /**
     * 
     * @type {number}
     * @memberof NewUsuario
     */
    'usuInactivo'?: number;
}
/**
 * (tsType: Omit<UsuarioCredenciales, \'id\'>, schemaOptions: { title: \'NewUsuarioCredenciales\', exclude: [ \'id\' ] })
 * @export
 * @interface NewUsuarioCredenciales
 */
export interface NewUsuarioCredenciales {
    /**
     * 
     * @type {string}
     * @memberof NewUsuarioCredenciales
     */
    'password': string;
    /**
     * 
     * @type {number}
     * @memberof NewUsuarioCredenciales
     */
    'usuarioId'?: number;
}
/**
 * (tsType: Omit<UsuarioPasswordHistorico, \'id\'>, schemaOptions: { title: \'NewUsuarioPasswordHistorico\', exclude: [ \'id\' ] })
 * @export
 * @interface NewUsuarioPasswordHistorico
 */
export interface NewUsuarioPasswordHistorico {
    /**
     * 
     * @type {number}
     * @memberof NewUsuarioPasswordHistorico
     */
    'usuarioId': number;
    /**
     * 
     * @type {string}
     * @memberof NewUsuarioPasswordHistorico
     */
    'password'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewUsuarioPasswordHistorico
     */
    'fechaInicio'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewUsuarioPasswordHistorico
     */
    'fechaFin'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewUsuarioPasswordHistorico
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NewUsuarioPasswordHistorico
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof NewUsuarioPasswordHistorico
     */
    'usuCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof NewUsuarioPasswordHistorico
     */
    'usuModificacion'?: number | null;
}
/**
 * 
 * @export
 * @interface Pais
 */
export interface Pais {
    /**
     * 
     * @type {number}
     * @memberof Pais
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Pais
     */
    'iso'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Pais
     */
    'nombre'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Pais
     */
    'activoSn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Pais
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Pais
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Pais
     */
    'usuCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof Pais
     */
    'usuModificacion'?: number | null;
}
/**
 * 
 * @export
 * @interface PaisFilter
 */
export interface PaisFilter {
    /**
     * 
     * @type {number}
     * @memberof PaisFilter
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof PaisFilter
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof PaisFilter
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof PaisFilter
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {object | Set<string>}
     * @memberof PaisFilter
     */
    'fields'?: object | Set<string>;
}
/**
 * 
 * @export
 * @interface PaisFilter1
 */
export interface PaisFilter1 {
    /**
     * 
     * @type {number}
     * @memberof PaisFilter1
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof PaisFilter1
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof PaisFilter1
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof PaisFilter1
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof PaisFilter1
     */
    'where'?: { [key: string]: object; };
    /**
     * 
     * @type {object | Set<string>}
     * @memberof PaisFilter1
     */
    'fields'?: object | Set<string>;
}
/**
 * (tsType: Partial<Pais>, schemaOptions: { partial: true })
 * @export
 * @interface PaisPartial
 */
export interface PaisPartial {
    /**
     * 
     * @type {number}
     * @memberof PaisPartial
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaisPartial
     */
    'iso'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaisPartial
     */
    'nombre'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaisPartial
     */
    'activoSn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaisPartial
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaisPartial
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof PaisPartial
     */
    'usuCreacion'?: number;
    /**
     * 
     * @type {number}
     * @memberof PaisPartial
     */
    'usuModificacion'?: number | null;
}
/**
 * (tsType: PaisWithRelations, schemaOptions: { includeRelations: true })
 * @export
 * @interface PaisWithRelations
 */
export interface PaisWithRelations {
    /**
     * 
     * @type {number}
     * @memberof PaisWithRelations
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaisWithRelations
     */
    'iso'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaisWithRelations
     */
    'nombre'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaisWithRelations
     */
    'activoSn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaisWithRelations
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaisWithRelations
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof PaisWithRelations
     */
    'usuCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof PaisWithRelations
     */
    'usuModificacion'?: number | null;
}
/**
 * 
 * @export
 * @interface Pallet
 */
export interface Pallet {
    /**
     * 
     * @type {number}
     * @memberof Pallet
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Pallet
     */
    'codigo'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Pallet
     */
    'nombre'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Pallet
     */
    'usuarioCreacion'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof Pallet
     */
    'usuarioModificacion'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof Pallet
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Pallet
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Pallet
     */
    'empresaId'?: number;
}
/**
 * 
 * @export
 * @interface PalletConfiguracion
 */
export interface PalletConfiguracion {
    /**
     * 
     * @type {number}
     * @memberof PalletConfiguracion
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof PalletConfiguracion
     */
    'eventoGuardadoMinuto'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PalletConfiguracion
     */
    'eventoEnviadoMinuto'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PalletConfiguracion
     */
    'resolucionPeso'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PalletConfiguracion
     */
    'temperaturaSinControl'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PalletConfiguracion
     */
    'temperaturaAmbiente'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PalletConfiguracion
     */
    'temperaturaRefrigerado'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PalletConfiguracion
     */
    'temperaturaCongelado'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PalletConfiguracion
     */
    'humedadPermitida'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PalletConfiguracion
     */
    'calidadAirePermitida'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PalletConfiguracion
     */
    'velocidadPermitida'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PalletConfiguracion
     */
    'unidadMedida'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof PalletConfiguracion
     */
    'usuarioCreacion'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof PalletConfiguracion
     */
    'usuarioModificacion'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof PalletConfiguracion
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PalletConfiguracion
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof PalletConfiguracion
     */
    'palletId'?: number;
}
/**
 * 
 * @export
 * @interface PalletConfiguracionFilter
 */
export interface PalletConfiguracionFilter {
    /**
     * 
     * @type {number}
     * @memberof PalletConfiguracionFilter
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof PalletConfiguracionFilter
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof PalletConfiguracionFilter
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof PalletConfiguracionFilter
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {object | Set<string>}
     * @memberof PalletConfiguracionFilter
     */
    'fields'?: object | Set<string>;
    /**
     * 
     * @type {Array<PalletConfiguracionIncludeFilterItems | string>}
     * @memberof PalletConfiguracionFilter
     */
    'include'?: Array<PalletConfiguracionIncludeFilterItems | string>;
}
/**
 * 
 * @export
 * @interface PalletConfiguracionFilter1
 */
export interface PalletConfiguracionFilter1 {
    /**
     * 
     * @type {number}
     * @memberof PalletConfiguracionFilter1
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof PalletConfiguracionFilter1
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof PalletConfiguracionFilter1
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof PalletConfiguracionFilter1
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof PalletConfiguracionFilter1
     */
    'where'?: { [key: string]: object; };
    /**
     * 
     * @type {object | Set<string>}
     * @memberof PalletConfiguracionFilter1
     */
    'fields'?: object | Set<string>;
    /**
     * 
     * @type {Array<PalletConfiguracionIncludeFilterItems | string>}
     * @memberof PalletConfiguracionFilter1
     */
    'include'?: Array<PalletConfiguracionIncludeFilterItems | string>;
}
/**
 * 
 * @export
 * @interface PalletConfiguracionGeneral
 */
export interface PalletConfiguracionGeneral {
    /**
     * 
     * @type {number}
     * @memberof PalletConfiguracionGeneral
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof PalletConfiguracionGeneral
     */
    'eventoGuardadoMinuto'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PalletConfiguracionGeneral
     */
    'eventoEnviadoMinuto'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PalletConfiguracionGeneral
     */
    'resolucionPeso'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PalletConfiguracionGeneral
     */
    'temperaturaSinControl'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PalletConfiguracionGeneral
     */
    'temperaturaAmbiente'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PalletConfiguracionGeneral
     */
    'temperaturaRefrigerado'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PalletConfiguracionGeneral
     */
    'temperaturaCongelado'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PalletConfiguracionGeneral
     */
    'humedadPermitida'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PalletConfiguracionGeneral
     */
    'calidadAirePermitida'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PalletConfiguracionGeneral
     */
    'velocidadPermitida'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PalletConfiguracionGeneral
     */
    'unidadMedida'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof PalletConfiguracionGeneral
     */
    'usuarioCreacion'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof PalletConfiguracionGeneral
     */
    'usuarioModificacion'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof PalletConfiguracionGeneral
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PalletConfiguracionGeneral
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof PalletConfiguracionGeneral
     */
    'empresaId'?: number;
}
/**
 * 
 * @export
 * @interface PalletConfiguracionGeneralFilter
 */
export interface PalletConfiguracionGeneralFilter {
    /**
     * 
     * @type {number}
     * @memberof PalletConfiguracionGeneralFilter
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof PalletConfiguracionGeneralFilter
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof PalletConfiguracionGeneralFilter
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof PalletConfiguracionGeneralFilter
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {object | Set<string>}
     * @memberof PalletConfiguracionGeneralFilter
     */
    'fields'?: object | Set<string>;
    /**
     * 
     * @type {Array<PalletConfiguracionGeneralIncludeFilterItems | string>}
     * @memberof PalletConfiguracionGeneralFilter
     */
    'include'?: Array<PalletConfiguracionGeneralIncludeFilterItems | string>;
}
/**
 * 
 * @export
 * @interface PalletConfiguracionGeneralFilter1
 */
export interface PalletConfiguracionGeneralFilter1 {
    /**
     * 
     * @type {number}
     * @memberof PalletConfiguracionGeneralFilter1
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof PalletConfiguracionGeneralFilter1
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof PalletConfiguracionGeneralFilter1
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof PalletConfiguracionGeneralFilter1
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof PalletConfiguracionGeneralFilter1
     */
    'where'?: { [key: string]: object; };
    /**
     * 
     * @type {object | Set<string>}
     * @memberof PalletConfiguracionGeneralFilter1
     */
    'fields'?: object | Set<string>;
    /**
     * 
     * @type {Array<PalletConfiguracionGeneralIncludeFilterItems | string>}
     * @memberof PalletConfiguracionGeneralFilter1
     */
    'include'?: Array<PalletConfiguracionGeneralIncludeFilterItems | string>;
}
/**
 * 
 * @export
 * @interface PalletConfiguracionGeneralIncludeFilterItems
 */
export interface PalletConfiguracionGeneralIncludeFilterItems {
    /**
     * 
     * @type {string}
     * @memberof PalletConfiguracionGeneralIncludeFilterItems
     */
    'relation'?: PalletConfiguracionGeneralIncludeFilterItemsRelationEnum;
    /**
     * 
     * @type {PalletConfiguracionGeneralScopeFilter}
     * @memberof PalletConfiguracionGeneralIncludeFilterItems
     */
    'scope'?: PalletConfiguracionGeneralScopeFilter;
}

/**
    * @export
    * @enum {string}
    */
export enum PalletConfiguracionGeneralIncludeFilterItemsRelationEnum {
    Empresa = 'empresa'
}

/**
 * (tsType: Partial<PalletConfiguracionGeneral>, schemaOptions: { partial: true })
 * @export
 * @interface PalletConfiguracionGeneralPartial
 */
export interface PalletConfiguracionGeneralPartial {
    /**
     * 
     * @type {number}
     * @memberof PalletConfiguracionGeneralPartial
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof PalletConfiguracionGeneralPartial
     */
    'eventoGuardadoMinuto'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PalletConfiguracionGeneralPartial
     */
    'eventoEnviadoMinuto'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PalletConfiguracionGeneralPartial
     */
    'resolucionPeso'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PalletConfiguracionGeneralPartial
     */
    'temperaturaSinControl'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PalletConfiguracionGeneralPartial
     */
    'temperaturaAmbiente'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PalletConfiguracionGeneralPartial
     */
    'temperaturaRefrigerado'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PalletConfiguracionGeneralPartial
     */
    'temperaturaCongelado'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PalletConfiguracionGeneralPartial
     */
    'humedadPermitida'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PalletConfiguracionGeneralPartial
     */
    'calidadAirePermitida'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PalletConfiguracionGeneralPartial
     */
    'velocidadPermitida'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PalletConfiguracionGeneralPartial
     */
    'unidadMedida'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof PalletConfiguracionGeneralPartial
     */
    'usuarioCreacion'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof PalletConfiguracionGeneralPartial
     */
    'usuarioModificacion'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof PalletConfiguracionGeneralPartial
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PalletConfiguracionGeneralPartial
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof PalletConfiguracionGeneralPartial
     */
    'empresaId'?: number;
}
/**
 * 
 * @export
 * @interface PalletConfiguracionGeneralScopeFilter
 */
export interface PalletConfiguracionGeneralScopeFilter {
    /**
     * 
     * @type {number}
     * @memberof PalletConfiguracionGeneralScopeFilter
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof PalletConfiguracionGeneralScopeFilter
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof PalletConfiguracionGeneralScopeFilter
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof PalletConfiguracionGeneralScopeFilter
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof PalletConfiguracionGeneralScopeFilter
     */
    'where'?: { [key: string]: object; };
    /**
     * 
     * @type {any | Set<string>}
     * @memberof PalletConfiguracionGeneralScopeFilter
     */
    'fields'?: any | Set<string>;
    /**
     * 
     * @type {Array<{ [key: string]: object; }>}
     * @memberof PalletConfiguracionGeneralScopeFilter
     */
    'include'?: Array<{ [key: string]: object; }>;
}
/**
 * (tsType: PalletConfiguracionGeneralWithRelations, schemaOptions: { includeRelations: true })
 * @export
 * @interface PalletConfiguracionGeneralWithRelations
 */
export interface PalletConfiguracionGeneralWithRelations {
    /**
     * 
     * @type {number}
     * @memberof PalletConfiguracionGeneralWithRelations
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof PalletConfiguracionGeneralWithRelations
     */
    'eventoGuardadoMinuto'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PalletConfiguracionGeneralWithRelations
     */
    'eventoEnviadoMinuto'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PalletConfiguracionGeneralWithRelations
     */
    'resolucionPeso'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PalletConfiguracionGeneralWithRelations
     */
    'temperaturaSinControl'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PalletConfiguracionGeneralWithRelations
     */
    'temperaturaAmbiente'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PalletConfiguracionGeneralWithRelations
     */
    'temperaturaRefrigerado'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PalletConfiguracionGeneralWithRelations
     */
    'temperaturaCongelado'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PalletConfiguracionGeneralWithRelations
     */
    'humedadPermitida'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PalletConfiguracionGeneralWithRelations
     */
    'calidadAirePermitida'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PalletConfiguracionGeneralWithRelations
     */
    'velocidadPermitida'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PalletConfiguracionGeneralWithRelations
     */
    'unidadMedida'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof PalletConfiguracionGeneralWithRelations
     */
    'usuarioCreacion'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof PalletConfiguracionGeneralWithRelations
     */
    'usuarioModificacion'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof PalletConfiguracionGeneralWithRelations
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PalletConfiguracionGeneralWithRelations
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof PalletConfiguracionGeneralWithRelations
     */
    'empresaId'?: number;
    /**
     * 
     * @type {EmpresaWithRelations}
     * @memberof PalletConfiguracionGeneralWithRelations
     */
    'empresa'?: EmpresaWithRelations;
    /**
     * 
     * @type {any}
     * @memberof PalletConfiguracionGeneralWithRelations
     */
    'foreignKey'?: any;
}
/**
 * 
 * @export
 * @interface PalletConfiguracionIncludeFilterItems
 */
export interface PalletConfiguracionIncludeFilterItems {
    /**
     * 
     * @type {string}
     * @memberof PalletConfiguracionIncludeFilterItems
     */
    'relation'?: PalletConfiguracionIncludeFilterItemsRelationEnum;
    /**
     * 
     * @type {PalletConfiguracionScopeFilter}
     * @memberof PalletConfiguracionIncludeFilterItems
     */
    'scope'?: PalletConfiguracionScopeFilter;
}

/**
    * @export
    * @enum {string}
    */
export enum PalletConfiguracionIncludeFilterItemsRelationEnum {
    Pallet = 'pallet'
}

/**
 * (tsType: Partial<PalletConfiguracion>, schemaOptions: { partial: true })
 * @export
 * @interface PalletConfiguracionPartial
 */
export interface PalletConfiguracionPartial {
    /**
     * 
     * @type {number}
     * @memberof PalletConfiguracionPartial
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof PalletConfiguracionPartial
     */
    'eventoGuardadoMinuto'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PalletConfiguracionPartial
     */
    'eventoEnviadoMinuto'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PalletConfiguracionPartial
     */
    'resolucionPeso'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PalletConfiguracionPartial
     */
    'temperaturaSinControl'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PalletConfiguracionPartial
     */
    'temperaturaAmbiente'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PalletConfiguracionPartial
     */
    'temperaturaRefrigerado'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PalletConfiguracionPartial
     */
    'temperaturaCongelado'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PalletConfiguracionPartial
     */
    'humedadPermitida'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PalletConfiguracionPartial
     */
    'calidadAirePermitida'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PalletConfiguracionPartial
     */
    'velocidadPermitida'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PalletConfiguracionPartial
     */
    'unidadMedida'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof PalletConfiguracionPartial
     */
    'usuarioCreacion'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof PalletConfiguracionPartial
     */
    'usuarioModificacion'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof PalletConfiguracionPartial
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PalletConfiguracionPartial
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof PalletConfiguracionPartial
     */
    'palletId'?: number;
}
/**
 * 
 * @export
 * @interface PalletConfiguracionScopeFilter
 */
export interface PalletConfiguracionScopeFilter {
    /**
     * 
     * @type {number}
     * @memberof PalletConfiguracionScopeFilter
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof PalletConfiguracionScopeFilter
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof PalletConfiguracionScopeFilter
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof PalletConfiguracionScopeFilter
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof PalletConfiguracionScopeFilter
     */
    'where'?: { [key: string]: object; };
    /**
     * 
     * @type {any | Set<string>}
     * @memberof PalletConfiguracionScopeFilter
     */
    'fields'?: any | Set<string>;
    /**
     * 
     * @type {Array<{ [key: string]: object; }>}
     * @memberof PalletConfiguracionScopeFilter
     */
    'include'?: Array<{ [key: string]: object; }>;
}
/**
 * (tsType: PalletConfiguracionWithRelations, schemaOptions: { includeRelations: true })
 * @export
 * @interface PalletConfiguracionWithRelations
 */
export interface PalletConfiguracionWithRelations {
    /**
     * 
     * @type {number}
     * @memberof PalletConfiguracionWithRelations
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof PalletConfiguracionWithRelations
     */
    'eventoGuardadoMinuto'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PalletConfiguracionWithRelations
     */
    'eventoEnviadoMinuto'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PalletConfiguracionWithRelations
     */
    'resolucionPeso'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PalletConfiguracionWithRelations
     */
    'temperaturaSinControl'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PalletConfiguracionWithRelations
     */
    'temperaturaAmbiente'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PalletConfiguracionWithRelations
     */
    'temperaturaRefrigerado'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PalletConfiguracionWithRelations
     */
    'temperaturaCongelado'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PalletConfiguracionWithRelations
     */
    'humedadPermitida'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PalletConfiguracionWithRelations
     */
    'calidadAirePermitida'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PalletConfiguracionWithRelations
     */
    'velocidadPermitida'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PalletConfiguracionWithRelations
     */
    'unidadMedida'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof PalletConfiguracionWithRelations
     */
    'usuarioCreacion'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof PalletConfiguracionWithRelations
     */
    'usuarioModificacion'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof PalletConfiguracionWithRelations
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PalletConfiguracionWithRelations
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof PalletConfiguracionWithRelations
     */
    'palletId'?: number;
    /**
     * 
     * @type {PalletWithRelations}
     * @memberof PalletConfiguracionWithRelations
     */
    'pallet'?: PalletWithRelations;
    /**
     * 
     * @type {any}
     * @memberof PalletConfiguracionWithRelations
     */
    'foreignKey'?: any;
}
/**
 * 
 * @export
 * @interface PalletFilter
 */
export interface PalletFilter {
    /**
     * 
     * @type {number}
     * @memberof PalletFilter
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof PalletFilter
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof PalletFilter
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof PalletFilter
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {object | Set<string>}
     * @memberof PalletFilter
     */
    'fields'?: object | Set<string>;
    /**
     * 
     * @type {Array<PalletIncludeFilterItems | string>}
     * @memberof PalletFilter
     */
    'include'?: Array<PalletIncludeFilterItems | string>;
}
/**
 * 
 * @export
 * @interface PalletFilter1
 */
export interface PalletFilter1 {
    /**
     * 
     * @type {number}
     * @memberof PalletFilter1
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof PalletFilter1
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof PalletFilter1
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof PalletFilter1
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof PalletFilter1
     */
    'where'?: { [key: string]: object; };
    /**
     * 
     * @type {object | Set<string>}
     * @memberof PalletFilter1
     */
    'fields'?: object | Set<string>;
    /**
     * 
     * @type {Array<PalletIncludeFilterItems | string>}
     * @memberof PalletFilter1
     */
    'include'?: Array<PalletIncludeFilterItems | string>;
}
/**
 * 
 * @export
 * @interface PalletIncludeFilterItems
 */
export interface PalletIncludeFilterItems {
    /**
     * 
     * @type {string}
     * @memberof PalletIncludeFilterItems
     */
    'relation'?: PalletIncludeFilterItemsRelationEnum;
    /**
     * 
     * @type {PalletScopeFilter}
     * @memberof PalletIncludeFilterItems
     */
    'scope'?: PalletScopeFilter;
}

/**
    * @export
    * @enum {string}
    */
export enum PalletIncludeFilterItemsRelationEnum {
    Empresa = 'empresa',
    Configuracion = 'configuracion',
    Envios = 'envios'
}

/**
 * (tsType: Partial<Pallet>, schemaOptions: { partial: true })
 * @export
 * @interface PalletPartial
 */
export interface PalletPartial {
    /**
     * 
     * @type {number}
     * @memberof PalletPartial
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof PalletPartial
     */
    'codigo'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PalletPartial
     */
    'nombre'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof PalletPartial
     */
    'usuarioCreacion'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof PalletPartial
     */
    'usuarioModificacion'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof PalletPartial
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PalletPartial
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof PalletPartial
     */
    'empresaId'?: number;
}
/**
 * 
 * @export
 * @interface PalletScopeFilter
 */
export interface PalletScopeFilter {
    /**
     * 
     * @type {number}
     * @memberof PalletScopeFilter
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof PalletScopeFilter
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof PalletScopeFilter
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof PalletScopeFilter
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof PalletScopeFilter
     */
    'where'?: { [key: string]: object; };
    /**
     * 
     * @type {any | Set<string>}
     * @memberof PalletScopeFilter
     */
    'fields'?: any | Set<string>;
    /**
     * 
     * @type {Array<{ [key: string]: object; }>}
     * @memberof PalletScopeFilter
     */
    'include'?: Array<{ [key: string]: object; }>;
}
/**
 * (tsType: PalletWithRelations, schemaOptions: { includeRelations: true })
 * @export
 * @interface PalletWithRelations
 */
export interface PalletWithRelations {
    /**
     * 
     * @type {number}
     * @memberof PalletWithRelations
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof PalletWithRelations
     */
    'codigo'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PalletWithRelations
     */
    'nombre'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof PalletWithRelations
     */
    'usuarioCreacion'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof PalletWithRelations
     */
    'usuarioModificacion'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof PalletWithRelations
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PalletWithRelations
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof PalletWithRelations
     */
    'empresaId'?: number;
    /**
     * 
     * @type {EmpresaWithRelations}
     * @memberof PalletWithRelations
     */
    'empresa'?: EmpresaWithRelations;
    /**
     * 
     * @type {any}
     * @memberof PalletWithRelations
     */
    'foreignKey'?: any;
    /**
     * 
     * @type {PalletConfiguracionWithRelations}
     * @memberof PalletWithRelations
     */
    'configuracion'?: PalletConfiguracionWithRelations;
    /**
     * 
     * @type {Array<EnvioPalletWithRelations>}
     * @memberof PalletWithRelations
     */
    'envios'?: Array<EnvioPalletWithRelations>;
}
/**
 * 
 * @export
 * @interface PalletsMovements
 */
export interface PalletsMovements {
    /**
     * 
     * @type {number}
     * @memberof PalletsMovements
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof PalletsMovements
     */
    'empresa_Id': number;
    /**
     * 
     * @type {string}
     * @memberof PalletsMovements
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PalletsMovements
     */
    'temperature'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PalletsMovements
     */
    'humidity'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PalletsMovements
     */
    'press'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PalletsMovements
     */
    'pm2_5'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PalletsMovements
     */
    'pm5'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PalletsMovements
     */
    'pm10'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PalletsMovements
     */
    'battery_volts'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PalletsMovements
     */
    'battery_pct'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PalletsMovements
     */
    'rssi'?: string | null;
}
/**
 * 
 * @export
 * @interface PalletsMovementsFilter
 */
export interface PalletsMovementsFilter {
    /**
     * 
     * @type {number}
     * @memberof PalletsMovementsFilter
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof PalletsMovementsFilter
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof PalletsMovementsFilter
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof PalletsMovementsFilter
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {object | Set<string>}
     * @memberof PalletsMovementsFilter
     */
    'fields'?: object | Set<string>;
}
/**
 * 
 * @export
 * @interface PalletsMovementsFilter1
 */
export interface PalletsMovementsFilter1 {
    /**
     * 
     * @type {number}
     * @memberof PalletsMovementsFilter1
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof PalletsMovementsFilter1
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof PalletsMovementsFilter1
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof PalletsMovementsFilter1
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof PalletsMovementsFilter1
     */
    'where'?: { [key: string]: object; };
    /**
     * 
     * @type {object | Set<string>}
     * @memberof PalletsMovementsFilter1
     */
    'fields'?: object | Set<string>;
}
/**
 * (tsType: Partial<PalletsMovements>, schemaOptions: { partial: true })
 * @export
 * @interface PalletsMovementsPartial
 */
export interface PalletsMovementsPartial {
    /**
     * 
     * @type {number}
     * @memberof PalletsMovementsPartial
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof PalletsMovementsPartial
     */
    'empresa_Id'?: number;
    /**
     * 
     * @type {string}
     * @memberof PalletsMovementsPartial
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PalletsMovementsPartial
     */
    'temperature'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PalletsMovementsPartial
     */
    'humidity'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PalletsMovementsPartial
     */
    'press'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PalletsMovementsPartial
     */
    'pm2_5'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PalletsMovementsPartial
     */
    'pm5'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PalletsMovementsPartial
     */
    'pm10'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PalletsMovementsPartial
     */
    'battery_volts'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PalletsMovementsPartial
     */
    'battery_pct'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PalletsMovementsPartial
     */
    'rssi'?: string | null;
}
/**
 * (tsType: PalletsMovementsWithRelations, schemaOptions: { includeRelations: true })
 * @export
 * @interface PalletsMovementsWithRelations
 */
export interface PalletsMovementsWithRelations {
    /**
     * 
     * @type {number}
     * @memberof PalletsMovementsWithRelations
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof PalletsMovementsWithRelations
     */
    'empresa_Id': number;
    /**
     * 
     * @type {string}
     * @memberof PalletsMovementsWithRelations
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PalletsMovementsWithRelations
     */
    'temperature'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PalletsMovementsWithRelations
     */
    'humidity'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PalletsMovementsWithRelations
     */
    'press'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PalletsMovementsWithRelations
     */
    'pm2_5'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PalletsMovementsWithRelations
     */
    'pm5'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PalletsMovementsWithRelations
     */
    'pm10'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PalletsMovementsWithRelations
     */
    'battery_volts'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PalletsMovementsWithRelations
     */
    'battery_pct'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PalletsMovementsWithRelations
     */
    'rssi'?: string | null;
}
/**
 * 
 * @export
 * @interface ParametrosPallets
 */
export interface ParametrosPallets {
    /**
     * 
     * @type {number}
     * @memberof ParametrosPallets
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ParametrosPallets
     */
    'nombre'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ParametrosPallets
     */
    'activoSn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ParametrosPallets
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ParametrosPallets
     */
    'usuCreacion'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ParametrosPallets
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ParametrosPallets
     */
    'usuModificacion'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof ParametrosPallets
     */
    'empresaId'?: number;
}
/**
 * 
 * @export
 * @interface ParametrosPalletsDetalle
 */
export interface ParametrosPalletsDetalle {
    /**
     * 
     * @type {number}
     * @memberof ParametrosPalletsDetalle
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ParametrosPalletsDetalle
     */
    'nombre'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ParametrosPalletsDetalle
     */
    'usuCreacion'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof ParametrosPalletsDetalle
     */
    'usuModificacion'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ParametrosPalletsDetalle
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ParametrosPalletsDetalle
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ParametrosPalletsDetalle
     */
    'parametrosPalletsId'?: number;
}
/**
 * 
 * @export
 * @interface ParametrosPalletsDetalleFilter
 */
export interface ParametrosPalletsDetalleFilter {
    /**
     * 
     * @type {number}
     * @memberof ParametrosPalletsDetalleFilter
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof ParametrosPalletsDetalleFilter
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof ParametrosPalletsDetalleFilter
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof ParametrosPalletsDetalleFilter
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {object | Set<string>}
     * @memberof ParametrosPalletsDetalleFilter
     */
    'fields'?: object | Set<string>;
    /**
     * 
     * @type {Array<ParametrosPalletsDetalleIncludeFilterItems | string>}
     * @memberof ParametrosPalletsDetalleFilter
     */
    'include'?: Array<ParametrosPalletsDetalleIncludeFilterItems | string>;
}
/**
 * 
 * @export
 * @interface ParametrosPalletsDetalleFilter1
 */
export interface ParametrosPalletsDetalleFilter1 {
    /**
     * 
     * @type {number}
     * @memberof ParametrosPalletsDetalleFilter1
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof ParametrosPalletsDetalleFilter1
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof ParametrosPalletsDetalleFilter1
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof ParametrosPalletsDetalleFilter1
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof ParametrosPalletsDetalleFilter1
     */
    'where'?: { [key: string]: object; };
    /**
     * 
     * @type {object | Set<string>}
     * @memberof ParametrosPalletsDetalleFilter1
     */
    'fields'?: object | Set<string>;
    /**
     * 
     * @type {Array<ParametrosPalletsDetalleIncludeFilterItems | string>}
     * @memberof ParametrosPalletsDetalleFilter1
     */
    'include'?: Array<ParametrosPalletsDetalleIncludeFilterItems | string>;
}
/**
 * 
 * @export
 * @interface ParametrosPalletsDetalleIncludeFilterItems
 */
export interface ParametrosPalletsDetalleIncludeFilterItems {
    /**
     * 
     * @type {string}
     * @memberof ParametrosPalletsDetalleIncludeFilterItems
     */
    'relation'?: ParametrosPalletsDetalleIncludeFilterItemsRelationEnum;
    /**
     * 
     * @type {ParametrosPalletsDetalleScopeFilter}
     * @memberof ParametrosPalletsDetalleIncludeFilterItems
     */
    'scope'?: ParametrosPalletsDetalleScopeFilter;
}

/**
    * @export
    * @enum {string}
    */
export enum ParametrosPalletsDetalleIncludeFilterItemsRelationEnum {
    ParametrosPallets = 'parametrosPallets'
}

/**
 * (tsType: Partial<ParametrosPalletsDetalle>, schemaOptions: { partial: true })
 * @export
 * @interface ParametrosPalletsDetallePartial
 */
export interface ParametrosPalletsDetallePartial {
    /**
     * 
     * @type {number}
     * @memberof ParametrosPalletsDetallePartial
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ParametrosPalletsDetallePartial
     */
    'nombre'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ParametrosPalletsDetallePartial
     */
    'usuCreacion'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof ParametrosPalletsDetallePartial
     */
    'usuModificacion'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ParametrosPalletsDetallePartial
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ParametrosPalletsDetallePartial
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ParametrosPalletsDetallePartial
     */
    'parametrosPalletsId'?: number;
}
/**
 * 
 * @export
 * @interface ParametrosPalletsDetalleScopeFilter
 */
export interface ParametrosPalletsDetalleScopeFilter {
    /**
     * 
     * @type {number}
     * @memberof ParametrosPalletsDetalleScopeFilter
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof ParametrosPalletsDetalleScopeFilter
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof ParametrosPalletsDetalleScopeFilter
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof ParametrosPalletsDetalleScopeFilter
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof ParametrosPalletsDetalleScopeFilter
     */
    'where'?: { [key: string]: object; };
    /**
     * 
     * @type {any | Set<string>}
     * @memberof ParametrosPalletsDetalleScopeFilter
     */
    'fields'?: any | Set<string>;
    /**
     * 
     * @type {Array<{ [key: string]: object; }>}
     * @memberof ParametrosPalletsDetalleScopeFilter
     */
    'include'?: Array<{ [key: string]: object; }>;
}
/**
 * (tsType: ParametrosPalletsDetalleWithRelations, schemaOptions: { includeRelations: true })
 * @export
 * @interface ParametrosPalletsDetalleWithRelations
 */
export interface ParametrosPalletsDetalleWithRelations {
    /**
     * 
     * @type {number}
     * @memberof ParametrosPalletsDetalleWithRelations
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ParametrosPalletsDetalleWithRelations
     */
    'nombre'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ParametrosPalletsDetalleWithRelations
     */
    'usuCreacion'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof ParametrosPalletsDetalleWithRelations
     */
    'usuModificacion'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ParametrosPalletsDetalleWithRelations
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ParametrosPalletsDetalleWithRelations
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ParametrosPalletsDetalleWithRelations
     */
    'parametrosPalletsId'?: number;
    /**
     * 
     * @type {ParametrosPalletsWithRelations}
     * @memberof ParametrosPalletsDetalleWithRelations
     */
    'parametrosPallets'?: ParametrosPalletsWithRelations;
    /**
     * 
     * @type {any}
     * @memberof ParametrosPalletsDetalleWithRelations
     */
    'foreignKey'?: any;
}
/**
 * 
 * @export
 * @interface ParametrosPalletsFilter
 */
export interface ParametrosPalletsFilter {
    /**
     * 
     * @type {number}
     * @memberof ParametrosPalletsFilter
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof ParametrosPalletsFilter
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof ParametrosPalletsFilter
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof ParametrosPalletsFilter
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {object | Set<string>}
     * @memberof ParametrosPalletsFilter
     */
    'fields'?: object | Set<string>;
    /**
     * 
     * @type {Array<ParametrosPalletsIncludeFilterItems | string>}
     * @memberof ParametrosPalletsFilter
     */
    'include'?: Array<ParametrosPalletsIncludeFilterItems | string>;
}
/**
 * 
 * @export
 * @interface ParametrosPalletsFilter1
 */
export interface ParametrosPalletsFilter1 {
    /**
     * 
     * @type {number}
     * @memberof ParametrosPalletsFilter1
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof ParametrosPalletsFilter1
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof ParametrosPalletsFilter1
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof ParametrosPalletsFilter1
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof ParametrosPalletsFilter1
     */
    'where'?: { [key: string]: object; };
    /**
     * 
     * @type {object | Set<string>}
     * @memberof ParametrosPalletsFilter1
     */
    'fields'?: object | Set<string>;
    /**
     * 
     * @type {Array<ParametrosPalletsIncludeFilterItems | string>}
     * @memberof ParametrosPalletsFilter1
     */
    'include'?: Array<ParametrosPalletsIncludeFilterItems | string>;
}
/**
 * 
 * @export
 * @interface ParametrosPalletsIncludeFilterItems
 */
export interface ParametrosPalletsIncludeFilterItems {
    /**
     * 
     * @type {string}
     * @memberof ParametrosPalletsIncludeFilterItems
     */
    'relation'?: ParametrosPalletsIncludeFilterItemsRelationEnum;
    /**
     * 
     * @type {ParametrosPalletsScopeFilter}
     * @memberof ParametrosPalletsIncludeFilterItems
     */
    'scope'?: ParametrosPalletsScopeFilter;
}

/**
    * @export
    * @enum {string}
    */
export enum ParametrosPalletsIncludeFilterItemsRelationEnum {
    Empresa = 'empresa',
    Detalles = 'detalles'
}

/**
 * (tsType: Partial<ParametrosPallets>, schemaOptions: { partial: true })
 * @export
 * @interface ParametrosPalletsPartial
 */
export interface ParametrosPalletsPartial {
    /**
     * 
     * @type {number}
     * @memberof ParametrosPalletsPartial
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ParametrosPalletsPartial
     */
    'nombre'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ParametrosPalletsPartial
     */
    'activoSn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ParametrosPalletsPartial
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ParametrosPalletsPartial
     */
    'usuCreacion'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ParametrosPalletsPartial
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ParametrosPalletsPartial
     */
    'usuModificacion'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof ParametrosPalletsPartial
     */
    'empresaId'?: number;
}
/**
 * 
 * @export
 * @interface ParametrosPalletsScopeFilter
 */
export interface ParametrosPalletsScopeFilter {
    /**
     * 
     * @type {number}
     * @memberof ParametrosPalletsScopeFilter
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof ParametrosPalletsScopeFilter
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof ParametrosPalletsScopeFilter
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof ParametrosPalletsScopeFilter
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof ParametrosPalletsScopeFilter
     */
    'where'?: { [key: string]: object; };
    /**
     * 
     * @type {any | Set<string>}
     * @memberof ParametrosPalletsScopeFilter
     */
    'fields'?: any | Set<string>;
    /**
     * 
     * @type {Array<{ [key: string]: object; }>}
     * @memberof ParametrosPalletsScopeFilter
     */
    'include'?: Array<{ [key: string]: object; }>;
}
/**
 * (tsType: ParametrosPalletsWithRelations, schemaOptions: { includeRelations: true })
 * @export
 * @interface ParametrosPalletsWithRelations
 */
export interface ParametrosPalletsWithRelations {
    /**
     * 
     * @type {number}
     * @memberof ParametrosPalletsWithRelations
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ParametrosPalletsWithRelations
     */
    'nombre'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ParametrosPalletsWithRelations
     */
    'activoSn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ParametrosPalletsWithRelations
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ParametrosPalletsWithRelations
     */
    'usuCreacion'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ParametrosPalletsWithRelations
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ParametrosPalletsWithRelations
     */
    'usuModificacion'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof ParametrosPalletsWithRelations
     */
    'empresaId'?: number;
    /**
     * 
     * @type {EmpresaWithRelations}
     * @memberof ParametrosPalletsWithRelations
     */
    'empresa'?: EmpresaWithRelations;
    /**
     * 
     * @type {any}
     * @memberof ParametrosPalletsWithRelations
     */
    'foreignKey'?: any;
    /**
     * 
     * @type {Array<ParametrosPalletsDetalleWithRelations>}
     * @memberof ParametrosPalletsWithRelations
     */
    'detalles'?: Array<ParametrosPalletsDetalleWithRelations>;
}
/**
 * 
 * @export
 * @interface Permiso
 */
export interface Permiso {
    /**
     * 
     * @type {number}
     * @memberof Permiso
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof Permiso
     */
    'rolId': number;
    /**
     * 
     * @type {string}
     * @memberof Permiso
     */
    'modulo'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Permiso
     */
    'controlador'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Permiso
     */
    'accion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Permiso
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Permiso
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Permiso
     */
    'usuCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof Permiso
     */
    'usuModificacion'?: number | null;
}
/**
 * 
 * @export
 * @interface PermisoFilter
 */
export interface PermisoFilter {
    /**
     * 
     * @type {number}
     * @memberof PermisoFilter
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof PermisoFilter
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof PermisoFilter
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof PermisoFilter
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {object | Set<string>}
     * @memberof PermisoFilter
     */
    'fields'?: object | Set<string>;
}
/**
 * 
 * @export
 * @interface PermisoFilter1
 */
export interface PermisoFilter1 {
    /**
     * 
     * @type {number}
     * @memberof PermisoFilter1
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof PermisoFilter1
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof PermisoFilter1
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof PermisoFilter1
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof PermisoFilter1
     */
    'where'?: { [key: string]: object; };
    /**
     * 
     * @type {object | Set<string>}
     * @memberof PermisoFilter1
     */
    'fields'?: object | Set<string>;
}
/**
 * (tsType: Partial<Permiso>, schemaOptions: { partial: true })
 * @export
 * @interface PermisoPartial
 */
export interface PermisoPartial {
    /**
     * 
     * @type {number}
     * @memberof PermisoPartial
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof PermisoPartial
     */
    'rolId'?: number;
    /**
     * 
     * @type {string}
     * @memberof PermisoPartial
     */
    'modulo'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PermisoPartial
     */
    'controlador'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PermisoPartial
     */
    'accion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PermisoPartial
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PermisoPartial
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof PermisoPartial
     */
    'usuCreacion'?: number;
    /**
     * 
     * @type {number}
     * @memberof PermisoPartial
     */
    'usuModificacion'?: number | null;
}
/**
 * (tsType: PermisoWithRelations, schemaOptions: { includeRelations: true })
 * @export
 * @interface PermisoWithRelations
 */
export interface PermisoWithRelations {
    /**
     * 
     * @type {number}
     * @memberof PermisoWithRelations
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof PermisoWithRelations
     */
    'rolId': number;
    /**
     * 
     * @type {string}
     * @memberof PermisoWithRelations
     */
    'modulo'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PermisoWithRelations
     */
    'controlador'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PermisoWithRelations
     */
    'accion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PermisoWithRelations
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PermisoWithRelations
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof PermisoWithRelations
     */
    'usuCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof PermisoWithRelations
     */
    'usuModificacion'?: number | null;
}
/**
 * 
 * @export
 * @interface PingResponse
 */
export interface PingResponse {
    /**
     * 
     * @type {string}
     * @memberof PingResponse
     */
    'greeting'?: string;
    /**
     * 
     * @type {string}
     * @memberof PingResponse
     */
    'date'?: string;
    /**
     * 
     * @type {string}
     * @memberof PingResponse
     */
    'url'?: string;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof PingResponse
     */
    'headers'?: { [key: string]: object; };
}
/**
 * 
 * @export
 * @interface PlantillaEmail
 */
export interface PlantillaEmail {
    /**
     * 
     * @type {number}
     * @memberof PlantillaEmail
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof PlantillaEmail
     */
    'idiomaId': number;
    /**
     * 
     * @type {number}
     * @memberof PlantillaEmail
     */
    'empresaId': number;
    /**
     * 
     * @type {string}
     * @memberof PlantillaEmail
     */
    'nombrePlantilla': string;
    /**
     * 
     * @type {string}
     * @memberof PlantillaEmail
     */
    'activoSn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PlantillaEmail
     */
    'titulo'?: string | null;
    /**
     * 
     * @type {any}
     * @memberof PlantillaEmail
     */
    'cuerpo'?: any | null;
    /**
     * 
     * @type {string}
     * @memberof PlantillaEmail
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PlantillaEmail
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof PlantillaEmail
     */
    'usuCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof PlantillaEmail
     */
    'usuModificacion'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof PlantillaEmail
     */
    'fechaInactivo'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof PlantillaEmail
     */
    'usuInactivo'?: number | null;
}
/**
 * 
 * @export
 * @interface PlantillaEmailFilter
 */
export interface PlantillaEmailFilter {
    /**
     * 
     * @type {number}
     * @memberof PlantillaEmailFilter
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof PlantillaEmailFilter
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof PlantillaEmailFilter
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof PlantillaEmailFilter
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {object | Set<string>}
     * @memberof PlantillaEmailFilter
     */
    'fields'?: object | Set<string>;
}
/**
 * 
 * @export
 * @interface PlantillaEmailFilter1
 */
export interface PlantillaEmailFilter1 {
    /**
     * 
     * @type {number}
     * @memberof PlantillaEmailFilter1
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof PlantillaEmailFilter1
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof PlantillaEmailFilter1
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof PlantillaEmailFilter1
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof PlantillaEmailFilter1
     */
    'where'?: { [key: string]: object; };
    /**
     * 
     * @type {object | Set<string>}
     * @memberof PlantillaEmailFilter1
     */
    'fields'?: object | Set<string>;
}
/**
 * (tsType: Partial<PlantillaEmail>, schemaOptions: { partial: true })
 * @export
 * @interface PlantillaEmailPartial
 */
export interface PlantillaEmailPartial {
    /**
     * 
     * @type {number}
     * @memberof PlantillaEmailPartial
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof PlantillaEmailPartial
     */
    'idiomaId'?: number;
    /**
     * 
     * @type {number}
     * @memberof PlantillaEmailPartial
     */
    'empresaId'?: number;
    /**
     * 
     * @type {string}
     * @memberof PlantillaEmailPartial
     */
    'nombrePlantilla'?: string;
    /**
     * 
     * @type {string}
     * @memberof PlantillaEmailPartial
     */
    'activoSn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PlantillaEmailPartial
     */
    'titulo'?: string | null;
    /**
     * 
     * @type {any}
     * @memberof PlantillaEmailPartial
     */
    'cuerpo'?: any | null;
    /**
     * 
     * @type {string}
     * @memberof PlantillaEmailPartial
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PlantillaEmailPartial
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof PlantillaEmailPartial
     */
    'usuCreacion'?: number;
    /**
     * 
     * @type {number}
     * @memberof PlantillaEmailPartial
     */
    'usuModificacion'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof PlantillaEmailPartial
     */
    'fechaInactivo'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof PlantillaEmailPartial
     */
    'usuInactivo'?: number | null;
}
/**
 * (tsType: PlantillaEmailWithRelations, schemaOptions: { includeRelations: true })
 * @export
 * @interface PlantillaEmailWithRelations
 */
export interface PlantillaEmailWithRelations {
    /**
     * 
     * @type {number}
     * @memberof PlantillaEmailWithRelations
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof PlantillaEmailWithRelations
     */
    'idiomaId': number;
    /**
     * 
     * @type {number}
     * @memberof PlantillaEmailWithRelations
     */
    'empresaId': number;
    /**
     * 
     * @type {string}
     * @memberof PlantillaEmailWithRelations
     */
    'nombrePlantilla': string;
    /**
     * 
     * @type {string}
     * @memberof PlantillaEmailWithRelations
     */
    'activoSn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PlantillaEmailWithRelations
     */
    'titulo'?: string | null;
    /**
     * 
     * @type {any}
     * @memberof PlantillaEmailWithRelations
     */
    'cuerpo'?: any | null;
    /**
     * 
     * @type {string}
     * @memberof PlantillaEmailWithRelations
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PlantillaEmailWithRelations
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof PlantillaEmailWithRelations
     */
    'usuCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof PlantillaEmailWithRelations
     */
    'usuModificacion'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof PlantillaEmailWithRelations
     */
    'fechaInactivo'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof PlantillaEmailWithRelations
     */
    'usuInactivo'?: number | null;
}
/**
 * 
 * @export
 * @interface RefrescarToken
 */
export interface RefrescarToken {
    /**
     * 
     * @type {number}
     * @memberof RefrescarToken
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof RefrescarToken
     */
    'usuarioId'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof RefrescarToken
     */
    'refreshToken'?: string | null;
}
/**
 * 
 * @export
 * @interface RefrescarTokenFilter
 */
export interface RefrescarTokenFilter {
    /**
     * 
     * @type {number}
     * @memberof RefrescarTokenFilter
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof RefrescarTokenFilter
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof RefrescarTokenFilter
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof RefrescarTokenFilter
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {object | Set<string>}
     * @memberof RefrescarTokenFilter
     */
    'fields'?: object | Set<string>;
}
/**
 * 
 * @export
 * @interface RefrescarTokenFilter1
 */
export interface RefrescarTokenFilter1 {
    /**
     * 
     * @type {number}
     * @memberof RefrescarTokenFilter1
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof RefrescarTokenFilter1
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof RefrescarTokenFilter1
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof RefrescarTokenFilter1
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof RefrescarTokenFilter1
     */
    'where'?: { [key: string]: object; };
    /**
     * 
     * @type {object | Set<string>}
     * @memberof RefrescarTokenFilter1
     */
    'fields'?: object | Set<string>;
}
/**
 * (tsType: Partial<RefrescarToken>, schemaOptions: { partial: true })
 * @export
 * @interface RefrescarTokenPartial
 */
export interface RefrescarTokenPartial {
    /**
     * 
     * @type {number}
     * @memberof RefrescarTokenPartial
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof RefrescarTokenPartial
     */
    'usuarioId'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof RefrescarTokenPartial
     */
    'refreshToken'?: string | null;
}
/**
 * (tsType: RefrescarTokenWithRelations, schemaOptions: { includeRelations: true })
 * @export
 * @interface RefrescarTokenWithRelations
 */
export interface RefrescarTokenWithRelations {
    /**
     * 
     * @type {number}
     * @memberof RefrescarTokenWithRelations
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof RefrescarTokenWithRelations
     */
    'usuarioId'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof RefrescarTokenWithRelations
     */
    'refreshToken'?: string | null;
}
/**
 * 
 * @export
 * @interface Rol
 */
export interface Rol {
    /**
     * 
     * @type {number}
     * @memberof Rol
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof Rol
     */
    'empresaId': number;
    /**
     * 
     * @type {string}
     * @memberof Rol
     */
    'nombre'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Rol
     */
    'activoSn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Rol
     */
    'muestraEmpresa'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Rol
     */
    'dashboardUrl'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Rol
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Rol
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Rol
     */
    'usuCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof Rol
     */
    'usuModificacion'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof Rol
     */
    'fechaInactivo'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Rol
     */
    'usuInactivo'?: number | null;
}
/**
 * 
 * @export
 * @interface RolFilter
 */
export interface RolFilter {
    /**
     * 
     * @type {number}
     * @memberof RolFilter
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof RolFilter
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof RolFilter
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof RolFilter
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {object | Set<string>}
     * @memberof RolFilter
     */
    'fields'?: object | Set<string>;
}
/**
 * 
 * @export
 * @interface RolFilter1
 */
export interface RolFilter1 {
    /**
     * 
     * @type {number}
     * @memberof RolFilter1
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof RolFilter1
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof RolFilter1
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof RolFilter1
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof RolFilter1
     */
    'where'?: { [key: string]: object; };
    /**
     * 
     * @type {object | Set<string>}
     * @memberof RolFilter1
     */
    'fields'?: object | Set<string>;
}
/**
 * (tsType: Partial<Rol>, schemaOptions: { partial: true })
 * @export
 * @interface RolPartial
 */
export interface RolPartial {
    /**
     * 
     * @type {number}
     * @memberof RolPartial
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof RolPartial
     */
    'empresaId'?: number;
    /**
     * 
     * @type {string}
     * @memberof RolPartial
     */
    'nombre'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof RolPartial
     */
    'activoSn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof RolPartial
     */
    'muestraEmpresa'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof RolPartial
     */
    'dashboardUrl'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof RolPartial
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof RolPartial
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof RolPartial
     */
    'usuCreacion'?: number;
    /**
     * 
     * @type {number}
     * @memberof RolPartial
     */
    'usuModificacion'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof RolPartial
     */
    'fechaInactivo'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof RolPartial
     */
    'usuInactivo'?: number | null;
}
/**
 * (tsType: RolWithRelations, schemaOptions: { includeRelations: true })
 * @export
 * @interface RolWithRelations
 */
export interface RolWithRelations {
    /**
     * 
     * @type {number}
     * @memberof RolWithRelations
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof RolWithRelations
     */
    'empresaId': number;
    /**
     * 
     * @type {string}
     * @memberof RolWithRelations
     */
    'nombre'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof RolWithRelations
     */
    'activoSn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof RolWithRelations
     */
    'muestraEmpresa'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof RolWithRelations
     */
    'dashboardUrl'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof RolWithRelations
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof RolWithRelations
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof RolWithRelations
     */
    'usuCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof RolWithRelations
     */
    'usuModificacion'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof RolWithRelations
     */
    'fechaInactivo'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof RolWithRelations
     */
    'usuInactivo'?: number | null;
}
/**
 * 
 * @export
 * @interface Seccion
 */
export interface Seccion {
    /**
     * 
     * @type {number}
     * @memberof Seccion
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Seccion
     */
    'nombre'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Seccion
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Seccion
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Seccion
     */
    'usuCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof Seccion
     */
    'usuModificacion'?: number | null;
}
/**
 * 
 * @export
 * @interface SeccionFilter
 */
export interface SeccionFilter {
    /**
     * 
     * @type {number}
     * @memberof SeccionFilter
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof SeccionFilter
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof SeccionFilter
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof SeccionFilter
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {object | Set<string>}
     * @memberof SeccionFilter
     */
    'fields'?: object | Set<string>;
}
/**
 * 
 * @export
 * @interface SeccionFilter1
 */
export interface SeccionFilter1 {
    /**
     * 
     * @type {number}
     * @memberof SeccionFilter1
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof SeccionFilter1
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof SeccionFilter1
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof SeccionFilter1
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof SeccionFilter1
     */
    'where'?: { [key: string]: object; };
    /**
     * 
     * @type {object | Set<string>}
     * @memberof SeccionFilter1
     */
    'fields'?: object | Set<string>;
}
/**
 * (tsType: Partial<Seccion>, schemaOptions: { partial: true })
 * @export
 * @interface SeccionPartial
 */
export interface SeccionPartial {
    /**
     * 
     * @type {number}
     * @memberof SeccionPartial
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof SeccionPartial
     */
    'nombre'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SeccionPartial
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SeccionPartial
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof SeccionPartial
     */
    'usuCreacion'?: number;
    /**
     * 
     * @type {number}
     * @memberof SeccionPartial
     */
    'usuModificacion'?: number | null;
}
/**
 * (tsType: SeccionWithRelations, schemaOptions: { includeRelations: true })
 * @export
 * @interface SeccionWithRelations
 */
export interface SeccionWithRelations {
    /**
     * 
     * @type {number}
     * @memberof SeccionWithRelations
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof SeccionWithRelations
     */
    'nombre'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SeccionWithRelations
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SeccionWithRelations
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof SeccionWithRelations
     */
    'usuCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof SeccionWithRelations
     */
    'usuModificacion'?: number | null;
}
/**
 * 
 * @export
 * @interface TipoArchivo
 */
export interface TipoArchivo {
    /**
     * 
     * @type {number}
     * @memberof TipoArchivo
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof TipoArchivo
     */
    'empresaId': number;
    /**
     * 
     * @type {number}
     * @memberof TipoArchivo
     */
    'seccionId': number;
    /**
     * 
     * @type {string}
     * @memberof TipoArchivo
     */
    'nombre'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TipoArchivo
     */
    'tipo'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof TipoArchivo
     */
    'orden'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof TipoArchivo
     */
    'multiple'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TipoArchivo
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TipoArchivo
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof TipoArchivo
     */
    'usuCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof TipoArchivo
     */
    'usuModificacion'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof TipoArchivo
     */
    'activoSn'?: string | null;
}
/**
 * 
 * @export
 * @interface TipoArchivoFilter
 */
export interface TipoArchivoFilter {
    /**
     * 
     * @type {number}
     * @memberof TipoArchivoFilter
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof TipoArchivoFilter
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof TipoArchivoFilter
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof TipoArchivoFilter
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {object | Set<string>}
     * @memberof TipoArchivoFilter
     */
    'fields'?: object | Set<string>;
}
/**
 * 
 * @export
 * @interface TipoArchivoFilter1
 */
export interface TipoArchivoFilter1 {
    /**
     * 
     * @type {number}
     * @memberof TipoArchivoFilter1
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof TipoArchivoFilter1
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof TipoArchivoFilter1
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof TipoArchivoFilter1
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof TipoArchivoFilter1
     */
    'where'?: { [key: string]: object; };
    /**
     * 
     * @type {object | Set<string>}
     * @memberof TipoArchivoFilter1
     */
    'fields'?: object | Set<string>;
}
/**
 * (tsType: Partial<TipoArchivo>, schemaOptions: { partial: true })
 * @export
 * @interface TipoArchivoPartial
 */
export interface TipoArchivoPartial {
    /**
     * 
     * @type {number}
     * @memberof TipoArchivoPartial
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof TipoArchivoPartial
     */
    'empresaId'?: number;
    /**
     * 
     * @type {number}
     * @memberof TipoArchivoPartial
     */
    'seccionId'?: number;
    /**
     * 
     * @type {string}
     * @memberof TipoArchivoPartial
     */
    'nombre'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TipoArchivoPartial
     */
    'tipo'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof TipoArchivoPartial
     */
    'orden'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof TipoArchivoPartial
     */
    'multiple'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TipoArchivoPartial
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TipoArchivoPartial
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof TipoArchivoPartial
     */
    'usuCreacion'?: number;
    /**
     * 
     * @type {number}
     * @memberof TipoArchivoPartial
     */
    'usuModificacion'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof TipoArchivoPartial
     */
    'activoSn'?: string | null;
}
/**
 * (tsType: TipoArchivoWithRelations, schemaOptions: { includeRelations: true })
 * @export
 * @interface TipoArchivoWithRelations
 */
export interface TipoArchivoWithRelations {
    /**
     * 
     * @type {number}
     * @memberof TipoArchivoWithRelations
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof TipoArchivoWithRelations
     */
    'empresaId': number;
    /**
     * 
     * @type {number}
     * @memberof TipoArchivoWithRelations
     */
    'seccionId': number;
    /**
     * 
     * @type {string}
     * @memberof TipoArchivoWithRelations
     */
    'nombre'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TipoArchivoWithRelations
     */
    'tipo'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof TipoArchivoWithRelations
     */
    'orden'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof TipoArchivoWithRelations
     */
    'multiple'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TipoArchivoWithRelations
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TipoArchivoWithRelations
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof TipoArchivoWithRelations
     */
    'usuCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof TipoArchivoWithRelations
     */
    'usuModificacion'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof TipoArchivoWithRelations
     */
    'activoSn'?: string | null;
}
/**
 * 
 * @export
 * @interface Traduccion
 */
export interface Traduccion {
    /**
     * 
     * @type {number}
     * @memberof Traduccion
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof Traduccion
     */
    'idiomaId': number;
    /**
     * 
     * @type {string}
     * @memberof Traduccion
     */
    'clave'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Traduccion
     */
    'valor'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Traduccion
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Traduccion
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Traduccion
     */
    'usuCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof Traduccion
     */
    'usuModificacion'?: number | null;
}
/**
 * 
 * @export
 * @interface TraduccionFilter
 */
export interface TraduccionFilter {
    /**
     * 
     * @type {number}
     * @memberof TraduccionFilter
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof TraduccionFilter
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof TraduccionFilter
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof TraduccionFilter
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {object | Set<string>}
     * @memberof TraduccionFilter
     */
    'fields'?: object | Set<string>;
}
/**
 * 
 * @export
 * @interface TraduccionFilter1
 */
export interface TraduccionFilter1 {
    /**
     * 
     * @type {number}
     * @memberof TraduccionFilter1
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof TraduccionFilter1
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof TraduccionFilter1
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof TraduccionFilter1
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof TraduccionFilter1
     */
    'where'?: { [key: string]: object; };
    /**
     * 
     * @type {object | Set<string>}
     * @memberof TraduccionFilter1
     */
    'fields'?: object | Set<string>;
}
/**
 * (tsType: Partial<Traduccion>, schemaOptions: { partial: true })
 * @export
 * @interface TraduccionPartial
 */
export interface TraduccionPartial {
    /**
     * 
     * @type {number}
     * @memberof TraduccionPartial
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof TraduccionPartial
     */
    'idiomaId'?: number;
    /**
     * 
     * @type {string}
     * @memberof TraduccionPartial
     */
    'clave'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TraduccionPartial
     */
    'valor'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TraduccionPartial
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TraduccionPartial
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof TraduccionPartial
     */
    'usuCreacion'?: number;
    /**
     * 
     * @type {number}
     * @memberof TraduccionPartial
     */
    'usuModificacion'?: number | null;
}
/**
 * (tsType: TraduccionWithRelations, schemaOptions: { includeRelations: true })
 * @export
 * @interface TraduccionWithRelations
 */
export interface TraduccionWithRelations {
    /**
     * 
     * @type {number}
     * @memberof TraduccionWithRelations
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof TraduccionWithRelations
     */
    'idiomaId': number;
    /**
     * 
     * @type {string}
     * @memberof TraduccionWithRelations
     */
    'clave'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TraduccionWithRelations
     */
    'valor'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TraduccionWithRelations
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TraduccionWithRelations
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof TraduccionWithRelations
     */
    'usuCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof TraduccionWithRelations
     */
    'usuModificacion'?: number | null;
}
/**
 * 
 * @export
 * @interface Usuario
 */
export interface Usuario {
    /**
     * 
     * @type {number}
     * @memberof Usuario
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof Usuario
     */
    'empresaId': number;
    /**
     * 
     * @type {number}
     * @memberof Usuario
     */
    'rolId': number;
    /**
     * 
     * @type {number}
     * @memberof Usuario
     */
    'idiomaId': number;
    /**
     * 
     * @type {string}
     * @memberof Usuario
     */
    'nombre'?: string;
    /**
     * 
     * @type {string}
     * @memberof Usuario
     */
    'mail'?: string;
    /**
     * 
     * @type {string}
     * @memberof Usuario
     */
    'activoSn'?: string;
    /**
     * 
     * @type {string}
     * @memberof Usuario
     */
    'telefono'?: string;
    /**
     * 
     * @type {string}
     * @memberof Usuario
     */
    'avatar'?: string;
    /**
     * 
     * @type {string}
     * @memberof Usuario
     */
    'fechaCreacion'?: string;
    /**
     * 
     * @type {string}
     * @memberof Usuario
     */
    'fechaModificacion'?: string;
    /**
     * 
     * @type {number}
     * @memberof Usuario
     */
    'usuCreacion'?: number;
    /**
     * 
     * @type {number}
     * @memberof Usuario
     */
    'usuModificacion'?: number;
    /**
     * 
     * @type {string}
     * @memberof Usuario
     */
    'fechaInactivo'?: string;
    /**
     * 
     * @type {number}
     * @memberof Usuario
     */
    'usuInactivo'?: number;
}
/**
 * 
 * @export
 * @interface UsuarioCredenciales
 */
export interface UsuarioCredenciales {
    /**
     * 
     * @type {number}
     * @memberof UsuarioCredenciales
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof UsuarioCredenciales
     */
    'password': string;
    /**
     * 
     * @type {number}
     * @memberof UsuarioCredenciales
     */
    'usuarioId'?: number;
}
/**
 * 
 * @export
 * @interface UsuarioCredencialesFilter
 */
export interface UsuarioCredencialesFilter {
    /**
     * 
     * @type {number}
     * @memberof UsuarioCredencialesFilter
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof UsuarioCredencialesFilter
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof UsuarioCredencialesFilter
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof UsuarioCredencialesFilter
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {object | Set<string>}
     * @memberof UsuarioCredencialesFilter
     */
    'fields'?: object | Set<string>;
}
/**
 * 
 * @export
 * @interface UsuarioCredencialesFilter1
 */
export interface UsuarioCredencialesFilter1 {
    /**
     * 
     * @type {number}
     * @memberof UsuarioCredencialesFilter1
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof UsuarioCredencialesFilter1
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof UsuarioCredencialesFilter1
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof UsuarioCredencialesFilter1
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof UsuarioCredencialesFilter1
     */
    'where'?: { [key: string]: object; };
    /**
     * 
     * @type {object | Set<string>}
     * @memberof UsuarioCredencialesFilter1
     */
    'fields'?: object | Set<string>;
}
/**
 * (tsType: Partial<UsuarioCredenciales>, schemaOptions: { partial: true })
 * @export
 * @interface UsuarioCredencialesPartial
 */
export interface UsuarioCredencialesPartial {
    /**
     * 
     * @type {number}
     * @memberof UsuarioCredencialesPartial
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof UsuarioCredencialesPartial
     */
    'password'?: string;
    /**
     * 
     * @type {number}
     * @memberof UsuarioCredencialesPartial
     */
    'usuarioId'?: number;
}
/**
 * (tsType: UsuarioCredencialesWithRelations, schemaOptions: { includeRelations: true })
 * @export
 * @interface UsuarioCredencialesWithRelations
 */
export interface UsuarioCredencialesWithRelations {
    /**
     * 
     * @type {number}
     * @memberof UsuarioCredencialesWithRelations
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof UsuarioCredencialesWithRelations
     */
    'password': string;
    /**
     * 
     * @type {number}
     * @memberof UsuarioCredencialesWithRelations
     */
    'usuarioId'?: number;
}
/**
 * 
 * @export
 * @interface UsuarioFilter
 */
export interface UsuarioFilter {
    /**
     * 
     * @type {number}
     * @memberof UsuarioFilter
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof UsuarioFilter
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof UsuarioFilter
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof UsuarioFilter
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {object | Set<string>}
     * @memberof UsuarioFilter
     */
    'fields'?: object | Set<string>;
    /**
     * 
     * @type {Array<UsuarioIncludeFilterItems | string>}
     * @memberof UsuarioFilter
     */
    'include'?: Array<UsuarioIncludeFilterItems | string>;
}
/**
 * 
 * @export
 * @interface UsuarioFilter1
 */
export interface UsuarioFilter1 {
    /**
     * 
     * @type {number}
     * @memberof UsuarioFilter1
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof UsuarioFilter1
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof UsuarioFilter1
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof UsuarioFilter1
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof UsuarioFilter1
     */
    'where'?: { [key: string]: object; };
    /**
     * 
     * @type {object | Set<string>}
     * @memberof UsuarioFilter1
     */
    'fields'?: object | Set<string>;
    /**
     * 
     * @type {Array<UsuarioIncludeFilterItems | string>}
     * @memberof UsuarioFilter1
     */
    'include'?: Array<UsuarioIncludeFilterItems | string>;
}
/**
 * 
 * @export
 * @interface UsuarioIncludeFilterItems
 */
export interface UsuarioIncludeFilterItems {
    /**
     * 
     * @type {string}
     * @memberof UsuarioIncludeFilterItems
     */
    'relation'?: UsuarioIncludeFilterItemsRelationEnum;
    /**
     * 
     * @type {UsuarioScopeFilter}
     * @memberof UsuarioIncludeFilterItems
     */
    'scope'?: UsuarioScopeFilter;
}

/**
    * @export
    * @enum {string}
    */
export enum UsuarioIncludeFilterItemsRelationEnum {
    UserCredentials = 'userCredentials'
}

/**
 * (tsType: Partial<Usuario>, schemaOptions: { partial: true })
 * @export
 * @interface UsuarioPartial
 */
export interface UsuarioPartial {
    /**
     * 
     * @type {number}
     * @memberof UsuarioPartial
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof UsuarioPartial
     */
    'empresaId'?: number;
    /**
     * 
     * @type {number}
     * @memberof UsuarioPartial
     */
    'rolId'?: number;
    /**
     * 
     * @type {number}
     * @memberof UsuarioPartial
     */
    'idiomaId'?: number;
    /**
     * 
     * @type {string}
     * @memberof UsuarioPartial
     */
    'nombre'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsuarioPartial
     */
    'mail'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsuarioPartial
     */
    'activoSn'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsuarioPartial
     */
    'telefono'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsuarioPartial
     */
    'avatar'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsuarioPartial
     */
    'fechaCreacion'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsuarioPartial
     */
    'fechaModificacion'?: string;
    /**
     * 
     * @type {number}
     * @memberof UsuarioPartial
     */
    'usuCreacion'?: number;
    /**
     * 
     * @type {number}
     * @memberof UsuarioPartial
     */
    'usuModificacion'?: number;
    /**
     * 
     * @type {string}
     * @memberof UsuarioPartial
     */
    'fechaInactivo'?: string;
    /**
     * 
     * @type {number}
     * @memberof UsuarioPartial
     */
    'usuInactivo'?: number;
}
/**
 * 
 * @export
 * @interface UsuarioPasswordHistorico
 */
export interface UsuarioPasswordHistorico {
    /**
     * 
     * @type {number}
     * @memberof UsuarioPasswordHistorico
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof UsuarioPasswordHistorico
     */
    'usuarioId': number;
    /**
     * 
     * @type {string}
     * @memberof UsuarioPasswordHistorico
     */
    'password'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UsuarioPasswordHistorico
     */
    'fechaInicio'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UsuarioPasswordHistorico
     */
    'fechaFin'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UsuarioPasswordHistorico
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UsuarioPasswordHistorico
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof UsuarioPasswordHistorico
     */
    'usuCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof UsuarioPasswordHistorico
     */
    'usuModificacion'?: number | null;
}
/**
 * 
 * @export
 * @interface UsuarioPasswordHistoricoFilter
 */
export interface UsuarioPasswordHistoricoFilter {
    /**
     * 
     * @type {number}
     * @memberof UsuarioPasswordHistoricoFilter
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof UsuarioPasswordHistoricoFilter
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof UsuarioPasswordHistoricoFilter
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof UsuarioPasswordHistoricoFilter
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {object | Set<string>}
     * @memberof UsuarioPasswordHistoricoFilter
     */
    'fields'?: object | Set<string>;
}
/**
 * 
 * @export
 * @interface UsuarioPasswordHistoricoFilter1
 */
export interface UsuarioPasswordHistoricoFilter1 {
    /**
     * 
     * @type {number}
     * @memberof UsuarioPasswordHistoricoFilter1
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof UsuarioPasswordHistoricoFilter1
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof UsuarioPasswordHistoricoFilter1
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof UsuarioPasswordHistoricoFilter1
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof UsuarioPasswordHistoricoFilter1
     */
    'where'?: { [key: string]: object; };
    /**
     * 
     * @type {object | Set<string>}
     * @memberof UsuarioPasswordHistoricoFilter1
     */
    'fields'?: object | Set<string>;
}
/**
 * (tsType: Partial<UsuarioPasswordHistorico>, schemaOptions: { partial: true })
 * @export
 * @interface UsuarioPasswordHistoricoPartial
 */
export interface UsuarioPasswordHistoricoPartial {
    /**
     * 
     * @type {number}
     * @memberof UsuarioPasswordHistoricoPartial
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof UsuarioPasswordHistoricoPartial
     */
    'usuarioId'?: number;
    /**
     * 
     * @type {string}
     * @memberof UsuarioPasswordHistoricoPartial
     */
    'password'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UsuarioPasswordHistoricoPartial
     */
    'fechaInicio'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UsuarioPasswordHistoricoPartial
     */
    'fechaFin'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UsuarioPasswordHistoricoPartial
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UsuarioPasswordHistoricoPartial
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof UsuarioPasswordHistoricoPartial
     */
    'usuCreacion'?: number;
    /**
     * 
     * @type {number}
     * @memberof UsuarioPasswordHistoricoPartial
     */
    'usuModificacion'?: number | null;
}
/**
 * (tsType: UsuarioPasswordHistoricoWithRelations, schemaOptions: { includeRelations: true })
 * @export
 * @interface UsuarioPasswordHistoricoWithRelations
 */
export interface UsuarioPasswordHistoricoWithRelations {
    /**
     * 
     * @type {number}
     * @memberof UsuarioPasswordHistoricoWithRelations
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof UsuarioPasswordHistoricoWithRelations
     */
    'usuarioId': number;
    /**
     * 
     * @type {string}
     * @memberof UsuarioPasswordHistoricoWithRelations
     */
    'password'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UsuarioPasswordHistoricoWithRelations
     */
    'fechaInicio'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UsuarioPasswordHistoricoWithRelations
     */
    'fechaFin'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UsuarioPasswordHistoricoWithRelations
     */
    'fechaCreacion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UsuarioPasswordHistoricoWithRelations
     */
    'fechaModificacion'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof UsuarioPasswordHistoricoWithRelations
     */
    'usuCreacion': number;
    /**
     * 
     * @type {number}
     * @memberof UsuarioPasswordHistoricoWithRelations
     */
    'usuModificacion'?: number | null;
}
/**
 * 
 * @export
 * @interface UsuarioScopeFilter
 */
export interface UsuarioScopeFilter {
    /**
     * 
     * @type {number}
     * @memberof UsuarioScopeFilter
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof UsuarioScopeFilter
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof UsuarioScopeFilter
     */
    'skip'?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof UsuarioScopeFilter
     */
    'order'?: string | Array<string>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof UsuarioScopeFilter
     */
    'where'?: { [key: string]: object; };
    /**
     * 
     * @type {any | Set<string>}
     * @memberof UsuarioScopeFilter
     */
    'fields'?: any | Set<string>;
    /**
     * 
     * @type {Array<{ [key: string]: object; }>}
     * @memberof UsuarioScopeFilter
     */
    'include'?: Array<{ [key: string]: object; }>;
}
/**
 * (tsType: UsuarioWithRelations, schemaOptions: { includeRelations: true })
 * @export
 * @interface UsuarioWithRelations
 */
export interface UsuarioWithRelations {
    /**
     * 
     * @type {number}
     * @memberof UsuarioWithRelations
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof UsuarioWithRelations
     */
    'empresaId': number;
    /**
     * 
     * @type {number}
     * @memberof UsuarioWithRelations
     */
    'rolId': number;
    /**
     * 
     * @type {number}
     * @memberof UsuarioWithRelations
     */
    'idiomaId': number;
    /**
     * 
     * @type {string}
     * @memberof UsuarioWithRelations
     */
    'nombre'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsuarioWithRelations
     */
    'mail'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsuarioWithRelations
     */
    'activoSn'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsuarioWithRelations
     */
    'telefono'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsuarioWithRelations
     */
    'avatar'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsuarioWithRelations
     */
    'fechaCreacion'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsuarioWithRelations
     */
    'fechaModificacion'?: string;
    /**
     * 
     * @type {number}
     * @memberof UsuarioWithRelations
     */
    'usuCreacion'?: number;
    /**
     * 
     * @type {number}
     * @memberof UsuarioWithRelations
     */
    'usuModificacion'?: number;
    /**
     * 
     * @type {string}
     * @memberof UsuarioWithRelations
     */
    'fechaInactivo'?: string;
    /**
     * 
     * @type {number}
     * @memberof UsuarioWithRelations
     */
    'usuInactivo'?: number;
    /**
     * 
     * @type {UsuarioCredencialesWithRelations}
     * @memberof UsuarioWithRelations
     */
    'userCredentials'?: UsuarioCredencialesWithRelations;
}

/**
 * ArchivoControllerApi - axios parameter creator
 * @export
 */
export const ArchivoControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archivoControllerCount: async (where?: { [key: string]: object; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/archivos/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NewArchivo} [newArchivo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archivoControllerCreate: async (newArchivo?: NewArchivo, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/archivos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newArchivo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archivoControllerDeleteById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('archivoControllerDeleteById', 'id', id)
            const localVarPath = `/archivos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ArchivoFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archivoControllerFind: async (filter?: ArchivoFilter1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/archivos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {ArchivoFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archivoControllerFindById: async (id: number, filter?: ArchivoFilter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('archivoControllerFindById', 'id', id)
            const localVarPath = `/archivos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {Archivo} [archivo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archivoControllerReplaceById: async (id: number, archivo?: Archivo, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('archivoControllerReplaceById', 'id', id)
            const localVarPath = `/archivos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(archivo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {ArchivoPartial} [archivoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archivoControllerUpdateAll: async (where?: { [key: string]: object; }, archivoPartial?: ArchivoPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/archivos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(archivoPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {ArchivoPartial} [archivoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archivoControllerUpdateById: async (id: number, archivoPartial?: ArchivoPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('archivoControllerUpdateById', 'id', id)
            const localVarPath = `/archivos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(archivoPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ArchivoFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archivoControllerVistaArchivoEmpresa: async (filter?: ArchivoFilter1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/vistaArchivoEmpresa`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archivoControllerVistaArchivoEmpresaCount: async (where?: { [key: string]: object; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/vistaArchivoEmpresaCount`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ArchivoControllerApi - functional programming interface
 * @export
 */
export const ArchivoControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ArchivoControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async archivoControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.archivoControllerCount(where, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {NewArchivo} [newArchivo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async archivoControllerCreate(newArchivo?: NewArchivo, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Archivo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.archivoControllerCreate(newArchivo, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async archivoControllerDeleteById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.archivoControllerDeleteById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ArchivoFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async archivoControllerFind(filter?: ArchivoFilter1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ArchivoWithRelations>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.archivoControllerFind(filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {ArchivoFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async archivoControllerFindById(id: number, filter?: ArchivoFilter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ArchivoWithRelations>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.archivoControllerFindById(id, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {Archivo} [archivo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async archivoControllerReplaceById(id: number, archivo?: Archivo, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.archivoControllerReplaceById(id, archivo, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {ArchivoPartial} [archivoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async archivoControllerUpdateAll(where?: { [key: string]: object; }, archivoPartial?: ArchivoPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.archivoControllerUpdateAll(where, archivoPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {ArchivoPartial} [archivoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async archivoControllerUpdateById(id: number, archivoPartial?: ArchivoPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.archivoControllerUpdateById(id, archivoPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ArchivoFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async archivoControllerVistaArchivoEmpresa(filter?: ArchivoFilter1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.archivoControllerVistaArchivoEmpresa(filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async archivoControllerVistaArchivoEmpresaCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.archivoControllerVistaArchivoEmpresaCount(where, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ArchivoControllerApi - factory interface
 * @export
 */
export const ArchivoControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ArchivoControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archivoControllerCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.archivoControllerCount(where, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NewArchivo} [newArchivo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archivoControllerCreate(newArchivo?: NewArchivo, options?: any): AxiosPromise<Archivo> {
            return localVarFp.archivoControllerCreate(newArchivo, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archivoControllerDeleteById(id: number, options?: any): AxiosPromise<any> {
            return localVarFp.archivoControllerDeleteById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ArchivoFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archivoControllerFind(filter?: ArchivoFilter1, options?: any): AxiosPromise<Array<ArchivoWithRelations>> {
            return localVarFp.archivoControllerFind(filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {ArchivoFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archivoControllerFindById(id: number, filter?: ArchivoFilter, options?: any): AxiosPromise<ArchivoWithRelations> {
            return localVarFp.archivoControllerFindById(id, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {Archivo} [archivo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archivoControllerReplaceById(id: number, archivo?: Archivo, options?: any): AxiosPromise<any> {
            return localVarFp.archivoControllerReplaceById(id, archivo, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {ArchivoPartial} [archivoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archivoControllerUpdateAll(where?: { [key: string]: object; }, archivoPartial?: ArchivoPartial, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.archivoControllerUpdateAll(where, archivoPartial, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {ArchivoPartial} [archivoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archivoControllerUpdateById(id: number, archivoPartial?: ArchivoPartial, options?: any): AxiosPromise<any> {
            return localVarFp.archivoControllerUpdateById(id, archivoPartial, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ArchivoFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archivoControllerVistaArchivoEmpresa(filter?: ArchivoFilter1, options?: any): AxiosPromise<object> {
            return localVarFp.archivoControllerVistaArchivoEmpresa(filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archivoControllerVistaArchivoEmpresaCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<object> {
            return localVarFp.archivoControllerVistaArchivoEmpresaCount(where, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ArchivoControllerApi - object-oriented interface
 * @export
 * @class ArchivoControllerApi
 * @extends {BaseAPI}
 */
export class ArchivoControllerApi extends BaseAPI {
    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArchivoControllerApi
     */
    public archivoControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig) {
        return ArchivoControllerApiFp(this.configuration).archivoControllerCount(where, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NewArchivo} [newArchivo] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArchivoControllerApi
     */
    public archivoControllerCreate(newArchivo?: NewArchivo, options?: AxiosRequestConfig) {
        return ArchivoControllerApiFp(this.configuration).archivoControllerCreate(newArchivo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArchivoControllerApi
     */
    public archivoControllerDeleteById(id: number, options?: AxiosRequestConfig) {
        return ArchivoControllerApiFp(this.configuration).archivoControllerDeleteById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ArchivoFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArchivoControllerApi
     */
    public archivoControllerFind(filter?: ArchivoFilter1, options?: AxiosRequestConfig) {
        return ArchivoControllerApiFp(this.configuration).archivoControllerFind(filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {ArchivoFilter} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArchivoControllerApi
     */
    public archivoControllerFindById(id: number, filter?: ArchivoFilter, options?: AxiosRequestConfig) {
        return ArchivoControllerApiFp(this.configuration).archivoControllerFindById(id, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {Archivo} [archivo] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArchivoControllerApi
     */
    public archivoControllerReplaceById(id: number, archivo?: Archivo, options?: AxiosRequestConfig) {
        return ArchivoControllerApiFp(this.configuration).archivoControllerReplaceById(id, archivo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {ArchivoPartial} [archivoPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArchivoControllerApi
     */
    public archivoControllerUpdateAll(where?: { [key: string]: object; }, archivoPartial?: ArchivoPartial, options?: AxiosRequestConfig) {
        return ArchivoControllerApiFp(this.configuration).archivoControllerUpdateAll(where, archivoPartial, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {ArchivoPartial} [archivoPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArchivoControllerApi
     */
    public archivoControllerUpdateById(id: number, archivoPartial?: ArchivoPartial, options?: AxiosRequestConfig) {
        return ArchivoControllerApiFp(this.configuration).archivoControllerUpdateById(id, archivoPartial, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ArchivoFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArchivoControllerApi
     */
    public archivoControllerVistaArchivoEmpresa(filter?: ArchivoFilter1, options?: AxiosRequestConfig) {
        return ArchivoControllerApiFp(this.configuration).archivoControllerVistaArchivoEmpresa(filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArchivoControllerApi
     */
    public archivoControllerVistaArchivoEmpresaCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig) {
        return ArchivoControllerApiFp(this.configuration).archivoControllerVistaArchivoEmpresaCount(where, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CompruebaImagenControllerApi - axios parameter creator
 * @export
 */
export const CompruebaImagenControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} imagenUrl 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        compruebaImagenControllerCompruebaImagenEndpoint: async (imagenUrl: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'imagenUrl' is not null or undefined
            assertParamExists('compruebaImagenControllerCompruebaImagenEndpoint', 'imagenUrl', imagenUrl)
            const localVarPath = `/compruebaImagen/{imagenUrl}`
                .replace(`{${"imagenUrl"}}`, encodeURIComponent(String(imagenUrl)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CompruebaImagenControllerApi - functional programming interface
 * @export
 */
export const CompruebaImagenControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CompruebaImagenControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} imagenUrl 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async compruebaImagenControllerCompruebaImagenEndpoint(imagenUrl: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.compruebaImagenControllerCompruebaImagenEndpoint(imagenUrl, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CompruebaImagenControllerApi - factory interface
 * @export
 */
export const CompruebaImagenControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CompruebaImagenControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {number} imagenUrl 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        compruebaImagenControllerCompruebaImagenEndpoint(imagenUrl: number, options?: any): AxiosPromise<object> {
            return localVarFp.compruebaImagenControllerCompruebaImagenEndpoint(imagenUrl, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CompruebaImagenControllerApi - object-oriented interface
 * @export
 * @class CompruebaImagenControllerApi
 * @extends {BaseAPI}
 */
export class CompruebaImagenControllerApi extends BaseAPI {
    /**
     * 
     * @param {number} imagenUrl 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompruebaImagenControllerApi
     */
    public compruebaImagenControllerCompruebaImagenEndpoint(imagenUrl: number, options?: AxiosRequestConfig) {
        return CompruebaImagenControllerApiFp(this.configuration).compruebaImagenControllerCompruebaImagenEndpoint(imagenUrl, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * EmpresaControllerApi - axios parameter creator
 * @export
 */
export const EmpresaControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        empresaControllerCount: async (where?: { [key: string]: object; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/empresas/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NewEmpresa} [newEmpresa] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        empresaControllerCreate: async (newEmpresa?: NewEmpresa, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/empresas`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newEmpresa, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        empresaControllerDeleteById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('empresaControllerDeleteById', 'id', id)
            const localVarPath = `/empresas/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {EmpresaFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        empresaControllerFind: async (filter?: EmpresaFilter1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/empresas`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {EmpresaFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        empresaControllerFindById: async (id: number, filter?: EmpresaFilter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('empresaControllerFindById', 'id', id)
            const localVarPath = `/empresas/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {Empresa} [empresa] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        empresaControllerReplaceById: async (id: number, empresa?: Empresa, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('empresaControllerReplaceById', 'id', id)
            const localVarPath = `/empresas/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(empresa, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {EmpresaPartial} [empresaPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        empresaControllerUpdateAll: async (where?: { [key: string]: object; }, empresaPartial?: EmpresaPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/empresas`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(empresaPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {EmpresaPartial} [empresaPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        empresaControllerUpdateById: async (id: number, empresaPartial?: EmpresaPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('empresaControllerUpdateById', 'id', id)
            const localVarPath = `/empresas/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(empresaPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EmpresaControllerApi - functional programming interface
 * @export
 */
export const EmpresaControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EmpresaControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async empresaControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.empresaControllerCount(where, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {NewEmpresa} [newEmpresa] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async empresaControllerCreate(newEmpresa?: NewEmpresa, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Empresa>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.empresaControllerCreate(newEmpresa, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async empresaControllerDeleteById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.empresaControllerDeleteById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {EmpresaFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async empresaControllerFind(filter?: EmpresaFilter1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<EmpresaWithRelations>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.empresaControllerFind(filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {EmpresaFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async empresaControllerFindById(id: number, filter?: EmpresaFilter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmpresaWithRelations>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.empresaControllerFindById(id, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {Empresa} [empresa] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async empresaControllerReplaceById(id: number, empresa?: Empresa, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.empresaControllerReplaceById(id, empresa, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {EmpresaPartial} [empresaPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async empresaControllerUpdateAll(where?: { [key: string]: object; }, empresaPartial?: EmpresaPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.empresaControllerUpdateAll(where, empresaPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {EmpresaPartial} [empresaPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async empresaControllerUpdateById(id: number, empresaPartial?: EmpresaPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.empresaControllerUpdateById(id, empresaPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EmpresaControllerApi - factory interface
 * @export
 */
export const EmpresaControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EmpresaControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        empresaControllerCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.empresaControllerCount(where, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NewEmpresa} [newEmpresa] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        empresaControllerCreate(newEmpresa?: NewEmpresa, options?: any): AxiosPromise<Empresa> {
            return localVarFp.empresaControllerCreate(newEmpresa, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        empresaControllerDeleteById(id: number, options?: any): AxiosPromise<any> {
            return localVarFp.empresaControllerDeleteById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {EmpresaFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        empresaControllerFind(filter?: EmpresaFilter1, options?: any): AxiosPromise<Array<EmpresaWithRelations>> {
            return localVarFp.empresaControllerFind(filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {EmpresaFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        empresaControllerFindById(id: number, filter?: EmpresaFilter, options?: any): AxiosPromise<EmpresaWithRelations> {
            return localVarFp.empresaControllerFindById(id, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {Empresa} [empresa] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        empresaControllerReplaceById(id: number, empresa?: Empresa, options?: any): AxiosPromise<any> {
            return localVarFp.empresaControllerReplaceById(id, empresa, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {EmpresaPartial} [empresaPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        empresaControllerUpdateAll(where?: { [key: string]: object; }, empresaPartial?: EmpresaPartial, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.empresaControllerUpdateAll(where, empresaPartial, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {EmpresaPartial} [empresaPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        empresaControllerUpdateById(id: number, empresaPartial?: EmpresaPartial, options?: any): AxiosPromise<any> {
            return localVarFp.empresaControllerUpdateById(id, empresaPartial, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EmpresaControllerApi - object-oriented interface
 * @export
 * @class EmpresaControllerApi
 * @extends {BaseAPI}
 */
export class EmpresaControllerApi extends BaseAPI {
    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmpresaControllerApi
     */
    public empresaControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig) {
        return EmpresaControllerApiFp(this.configuration).empresaControllerCount(where, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NewEmpresa} [newEmpresa] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmpresaControllerApi
     */
    public empresaControllerCreate(newEmpresa?: NewEmpresa, options?: AxiosRequestConfig) {
        return EmpresaControllerApiFp(this.configuration).empresaControllerCreate(newEmpresa, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmpresaControllerApi
     */
    public empresaControllerDeleteById(id: number, options?: AxiosRequestConfig) {
        return EmpresaControllerApiFp(this.configuration).empresaControllerDeleteById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {EmpresaFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmpresaControllerApi
     */
    public empresaControllerFind(filter?: EmpresaFilter1, options?: AxiosRequestConfig) {
        return EmpresaControllerApiFp(this.configuration).empresaControllerFind(filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {EmpresaFilter} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmpresaControllerApi
     */
    public empresaControllerFindById(id: number, filter?: EmpresaFilter, options?: AxiosRequestConfig) {
        return EmpresaControllerApiFp(this.configuration).empresaControllerFindById(id, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {Empresa} [empresa] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmpresaControllerApi
     */
    public empresaControllerReplaceById(id: number, empresa?: Empresa, options?: AxiosRequestConfig) {
        return EmpresaControllerApiFp(this.configuration).empresaControllerReplaceById(id, empresa, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {EmpresaPartial} [empresaPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmpresaControllerApi
     */
    public empresaControllerUpdateAll(where?: { [key: string]: object; }, empresaPartial?: EmpresaPartial, options?: AxiosRequestConfig) {
        return EmpresaControllerApiFp(this.configuration).empresaControllerUpdateAll(where, empresaPartial, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {EmpresaPartial} [empresaPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmpresaControllerApi
     */
    public empresaControllerUpdateById(id: number, empresaPartial?: EmpresaPartial, options?: AxiosRequestConfig) {
        return EmpresaControllerApiFp(this.configuration).empresaControllerUpdateById(id, empresaPartial, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * EnvioContenidoControllerApi - axios parameter creator
 * @export
 */
export const EnvioContenidoControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        envioContenidoControllerCount: async (where?: { [key: string]: object; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/envio-contenidos/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NewEnvioContenido} [newEnvioContenido] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        envioContenidoControllerCreate: async (newEnvioContenido?: NewEnvioContenido, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/envio-contenidos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newEnvioContenido, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        envioContenidoControllerDeleteById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('envioContenidoControllerDeleteById', 'id', id)
            const localVarPath = `/envio-contenidos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {EnvioContenidoFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        envioContenidoControllerFind: async (filter?: EnvioContenidoFilter1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/envio-contenidos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {EnvioContenidoFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        envioContenidoControllerFindById: async (id: number, filter?: EnvioContenidoFilter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('envioContenidoControllerFindById', 'id', id)
            const localVarPath = `/envio-contenidos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {EnvioContenido} [envioContenido] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        envioContenidoControllerReplaceById: async (id: number, envioContenido?: EnvioContenido, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('envioContenidoControllerReplaceById', 'id', id)
            const localVarPath = `/envio-contenidos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(envioContenido, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {EnvioContenidoPartial} [envioContenidoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        envioContenidoControllerUpdateAll: async (where?: { [key: string]: object; }, envioContenidoPartial?: EnvioContenidoPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/envio-contenidos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(envioContenidoPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {EnvioContenidoPartial} [envioContenidoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        envioContenidoControllerUpdateById: async (id: number, envioContenidoPartial?: EnvioContenidoPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('envioContenidoControllerUpdateById', 'id', id)
            const localVarPath = `/envio-contenidos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(envioContenidoPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EnvioContenidoControllerApi - functional programming interface
 * @export
 */
export const EnvioContenidoControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EnvioContenidoControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async envioContenidoControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.envioContenidoControllerCount(where, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {NewEnvioContenido} [newEnvioContenido] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async envioContenidoControllerCreate(newEnvioContenido?: NewEnvioContenido, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EnvioContenido>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.envioContenidoControllerCreate(newEnvioContenido, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async envioContenidoControllerDeleteById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.envioContenidoControllerDeleteById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {EnvioContenidoFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async envioContenidoControllerFind(filter?: EnvioContenidoFilter1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<EnvioContenidoWithRelations>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.envioContenidoControllerFind(filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {EnvioContenidoFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async envioContenidoControllerFindById(id: number, filter?: EnvioContenidoFilter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EnvioContenidoWithRelations>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.envioContenidoControllerFindById(id, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {EnvioContenido} [envioContenido] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async envioContenidoControllerReplaceById(id: number, envioContenido?: EnvioContenido, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.envioContenidoControllerReplaceById(id, envioContenido, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {EnvioContenidoPartial} [envioContenidoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async envioContenidoControllerUpdateAll(where?: { [key: string]: object; }, envioContenidoPartial?: EnvioContenidoPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.envioContenidoControllerUpdateAll(where, envioContenidoPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {EnvioContenidoPartial} [envioContenidoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async envioContenidoControllerUpdateById(id: number, envioContenidoPartial?: EnvioContenidoPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.envioContenidoControllerUpdateById(id, envioContenidoPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EnvioContenidoControllerApi - factory interface
 * @export
 */
export const EnvioContenidoControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EnvioContenidoControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        envioContenidoControllerCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.envioContenidoControllerCount(where, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NewEnvioContenido} [newEnvioContenido] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        envioContenidoControllerCreate(newEnvioContenido?: NewEnvioContenido, options?: any): AxiosPromise<EnvioContenido> {
            return localVarFp.envioContenidoControllerCreate(newEnvioContenido, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        envioContenidoControllerDeleteById(id: number, options?: any): AxiosPromise<any> {
            return localVarFp.envioContenidoControllerDeleteById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {EnvioContenidoFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        envioContenidoControllerFind(filter?: EnvioContenidoFilter1, options?: any): AxiosPromise<Array<EnvioContenidoWithRelations>> {
            return localVarFp.envioContenidoControllerFind(filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {EnvioContenidoFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        envioContenidoControllerFindById(id: number, filter?: EnvioContenidoFilter, options?: any): AxiosPromise<EnvioContenidoWithRelations> {
            return localVarFp.envioContenidoControllerFindById(id, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {EnvioContenido} [envioContenido] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        envioContenidoControllerReplaceById(id: number, envioContenido?: EnvioContenido, options?: any): AxiosPromise<any> {
            return localVarFp.envioContenidoControllerReplaceById(id, envioContenido, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {EnvioContenidoPartial} [envioContenidoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        envioContenidoControllerUpdateAll(where?: { [key: string]: object; }, envioContenidoPartial?: EnvioContenidoPartial, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.envioContenidoControllerUpdateAll(where, envioContenidoPartial, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {EnvioContenidoPartial} [envioContenidoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        envioContenidoControllerUpdateById(id: number, envioContenidoPartial?: EnvioContenidoPartial, options?: any): AxiosPromise<any> {
            return localVarFp.envioContenidoControllerUpdateById(id, envioContenidoPartial, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EnvioContenidoControllerApi - object-oriented interface
 * @export
 * @class EnvioContenidoControllerApi
 * @extends {BaseAPI}
 */
export class EnvioContenidoControllerApi extends BaseAPI {
    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvioContenidoControllerApi
     */
    public envioContenidoControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig) {
        return EnvioContenidoControllerApiFp(this.configuration).envioContenidoControllerCount(where, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NewEnvioContenido} [newEnvioContenido] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvioContenidoControllerApi
     */
    public envioContenidoControllerCreate(newEnvioContenido?: NewEnvioContenido, options?: AxiosRequestConfig) {
        return EnvioContenidoControllerApiFp(this.configuration).envioContenidoControllerCreate(newEnvioContenido, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvioContenidoControllerApi
     */
    public envioContenidoControllerDeleteById(id: number, options?: AxiosRequestConfig) {
        return EnvioContenidoControllerApiFp(this.configuration).envioContenidoControllerDeleteById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {EnvioContenidoFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvioContenidoControllerApi
     */
    public envioContenidoControllerFind(filter?: EnvioContenidoFilter1, options?: AxiosRequestConfig) {
        return EnvioContenidoControllerApiFp(this.configuration).envioContenidoControllerFind(filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {EnvioContenidoFilter} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvioContenidoControllerApi
     */
    public envioContenidoControllerFindById(id: number, filter?: EnvioContenidoFilter, options?: AxiosRequestConfig) {
        return EnvioContenidoControllerApiFp(this.configuration).envioContenidoControllerFindById(id, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {EnvioContenido} [envioContenido] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvioContenidoControllerApi
     */
    public envioContenidoControllerReplaceById(id: number, envioContenido?: EnvioContenido, options?: AxiosRequestConfig) {
        return EnvioContenidoControllerApiFp(this.configuration).envioContenidoControllerReplaceById(id, envioContenido, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {EnvioContenidoPartial} [envioContenidoPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvioContenidoControllerApi
     */
    public envioContenidoControllerUpdateAll(where?: { [key: string]: object; }, envioContenidoPartial?: EnvioContenidoPartial, options?: AxiosRequestConfig) {
        return EnvioContenidoControllerApiFp(this.configuration).envioContenidoControllerUpdateAll(where, envioContenidoPartial, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {EnvioContenidoPartial} [envioContenidoPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvioContenidoControllerApi
     */
    public envioContenidoControllerUpdateById(id: number, envioContenidoPartial?: EnvioContenidoPartial, options?: AxiosRequestConfig) {
        return EnvioContenidoControllerApiFp(this.configuration).envioContenidoControllerUpdateById(id, envioContenidoPartial, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * EnvioControllerApi - axios parameter creator
 * @export
 */
export const EnvioControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        envioControllerCount: async (where?: { [key: string]: object; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/envio/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NewEnvio} [newEnvio] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        envioControllerCreate: async (newEnvio?: NewEnvio, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/envio`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newEnvio, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        envioControllerDeleteById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('envioControllerDeleteById', 'id', id)
            const localVarPath = `/envio/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {EnvioFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        envioControllerFind: async (filter?: EnvioFilter1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/envio`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {EnvioFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        envioControllerFindById: async (id: number, filter?: EnvioFilter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('envioControllerFindById', 'id', id)
            const localVarPath = `/envio/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {Envio} [envio] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        envioControllerReplaceById: async (id: number, envio?: Envio, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('envioControllerReplaceById', 'id', id)
            const localVarPath = `/envio/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(envio, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {EnvioPartial} [envioPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        envioControllerUpdateAll: async (where?: { [key: string]: object; }, envioPartial?: EnvioPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/envio`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(envioPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {EnvioPartial} [envioPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        envioControllerUpdateById: async (id: number, envioPartial?: EnvioPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('envioControllerUpdateById', 'id', id)
            const localVarPath = `/envio/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(envioPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EnvioControllerApi - functional programming interface
 * @export
 */
export const EnvioControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EnvioControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async envioControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.envioControllerCount(where, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {NewEnvio} [newEnvio] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async envioControllerCreate(newEnvio?: NewEnvio, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Envio>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.envioControllerCreate(newEnvio, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async envioControllerDeleteById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.envioControllerDeleteById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {EnvioFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async envioControllerFind(filter?: EnvioFilter1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<EnvioWithRelations>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.envioControllerFind(filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {EnvioFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async envioControllerFindById(id: number, filter?: EnvioFilter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EnvioWithRelations>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.envioControllerFindById(id, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {Envio} [envio] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async envioControllerReplaceById(id: number, envio?: Envio, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.envioControllerReplaceById(id, envio, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {EnvioPartial} [envioPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async envioControllerUpdateAll(where?: { [key: string]: object; }, envioPartial?: EnvioPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.envioControllerUpdateAll(where, envioPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {EnvioPartial} [envioPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async envioControllerUpdateById(id: number, envioPartial?: EnvioPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.envioControllerUpdateById(id, envioPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EnvioControllerApi - factory interface
 * @export
 */
export const EnvioControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EnvioControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        envioControllerCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.envioControllerCount(where, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NewEnvio} [newEnvio] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        envioControllerCreate(newEnvio?: NewEnvio, options?: any): AxiosPromise<Envio> {
            return localVarFp.envioControllerCreate(newEnvio, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        envioControllerDeleteById(id: number, options?: any): AxiosPromise<any> {
            return localVarFp.envioControllerDeleteById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {EnvioFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        envioControllerFind(filter?: EnvioFilter1, options?: any): AxiosPromise<Array<EnvioWithRelations>> {
            return localVarFp.envioControllerFind(filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {EnvioFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        envioControllerFindById(id: number, filter?: EnvioFilter, options?: any): AxiosPromise<EnvioWithRelations> {
            return localVarFp.envioControllerFindById(id, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {Envio} [envio] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        envioControllerReplaceById(id: number, envio?: Envio, options?: any): AxiosPromise<any> {
            return localVarFp.envioControllerReplaceById(id, envio, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {EnvioPartial} [envioPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        envioControllerUpdateAll(where?: { [key: string]: object; }, envioPartial?: EnvioPartial, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.envioControllerUpdateAll(where, envioPartial, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {EnvioPartial} [envioPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        envioControllerUpdateById(id: number, envioPartial?: EnvioPartial, options?: any): AxiosPromise<any> {
            return localVarFp.envioControllerUpdateById(id, envioPartial, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EnvioControllerApi - object-oriented interface
 * @export
 * @class EnvioControllerApi
 * @extends {BaseAPI}
 */
export class EnvioControllerApi extends BaseAPI {
    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvioControllerApi
     */
    public envioControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig) {
        return EnvioControllerApiFp(this.configuration).envioControllerCount(where, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NewEnvio} [newEnvio] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvioControllerApi
     */
    public envioControllerCreate(newEnvio?: NewEnvio, options?: AxiosRequestConfig) {
        return EnvioControllerApiFp(this.configuration).envioControllerCreate(newEnvio, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvioControllerApi
     */
    public envioControllerDeleteById(id: number, options?: AxiosRequestConfig) {
        return EnvioControllerApiFp(this.configuration).envioControllerDeleteById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {EnvioFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvioControllerApi
     */
    public envioControllerFind(filter?: EnvioFilter1, options?: AxiosRequestConfig) {
        return EnvioControllerApiFp(this.configuration).envioControllerFind(filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {EnvioFilter} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvioControllerApi
     */
    public envioControllerFindById(id: number, filter?: EnvioFilter, options?: AxiosRequestConfig) {
        return EnvioControllerApiFp(this.configuration).envioControllerFindById(id, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {Envio} [envio] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvioControllerApi
     */
    public envioControllerReplaceById(id: number, envio?: Envio, options?: AxiosRequestConfig) {
        return EnvioControllerApiFp(this.configuration).envioControllerReplaceById(id, envio, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {EnvioPartial} [envioPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvioControllerApi
     */
    public envioControllerUpdateAll(where?: { [key: string]: object; }, envioPartial?: EnvioPartial, options?: AxiosRequestConfig) {
        return EnvioControllerApiFp(this.configuration).envioControllerUpdateAll(where, envioPartial, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {EnvioPartial} [envioPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvioControllerApi
     */
    public envioControllerUpdateById(id: number, envioPartial?: EnvioPartial, options?: AxiosRequestConfig) {
        return EnvioControllerApiFp(this.configuration).envioControllerUpdateById(id, envioPartial, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * EnvioPalletControllerApi - axios parameter creator
 * @export
 */
export const EnvioPalletControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        envioPalletControllerCount: async (where?: { [key: string]: object; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/envio-pallets/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NewEnvioPallet} [newEnvioPallet] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        envioPalletControllerCreate: async (newEnvioPallet?: NewEnvioPallet, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/envio-pallets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newEnvioPallet, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        envioPalletControllerDeleteById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('envioPalletControllerDeleteById', 'id', id)
            const localVarPath = `/envio-pallets/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {EnvioPalletFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        envioPalletControllerFind: async (filter?: EnvioPalletFilter1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/envio-pallets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {EnvioPalletFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        envioPalletControllerFindById: async (id: number, filter?: EnvioPalletFilter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('envioPalletControllerFindById', 'id', id)
            const localVarPath = `/envio-pallets/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {EnvioPallet} [envioPallet] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        envioPalletControllerReplaceById: async (id: number, envioPallet?: EnvioPallet, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('envioPalletControllerReplaceById', 'id', id)
            const localVarPath = `/envio-pallets/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(envioPallet, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {EnvioPalletPartial} [envioPalletPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        envioPalletControllerUpdateAll: async (where?: { [key: string]: object; }, envioPalletPartial?: EnvioPalletPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/envio-pallets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(envioPalletPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {EnvioPalletPartial} [envioPalletPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        envioPalletControllerUpdateById: async (id: number, envioPalletPartial?: EnvioPalletPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('envioPalletControllerUpdateById', 'id', id)
            const localVarPath = `/envio-pallets/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(envioPalletPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EnvioPalletControllerApi - functional programming interface
 * @export
 */
export const EnvioPalletControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EnvioPalletControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async envioPalletControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.envioPalletControllerCount(where, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {NewEnvioPallet} [newEnvioPallet] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async envioPalletControllerCreate(newEnvioPallet?: NewEnvioPallet, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EnvioPallet>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.envioPalletControllerCreate(newEnvioPallet, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async envioPalletControllerDeleteById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.envioPalletControllerDeleteById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {EnvioPalletFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async envioPalletControllerFind(filter?: EnvioPalletFilter1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<EnvioPalletWithRelations>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.envioPalletControllerFind(filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {EnvioPalletFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async envioPalletControllerFindById(id: number, filter?: EnvioPalletFilter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EnvioPalletWithRelations>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.envioPalletControllerFindById(id, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {EnvioPallet} [envioPallet] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async envioPalletControllerReplaceById(id: number, envioPallet?: EnvioPallet, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.envioPalletControllerReplaceById(id, envioPallet, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {EnvioPalletPartial} [envioPalletPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async envioPalletControllerUpdateAll(where?: { [key: string]: object; }, envioPalletPartial?: EnvioPalletPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.envioPalletControllerUpdateAll(where, envioPalletPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {EnvioPalletPartial} [envioPalletPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async envioPalletControllerUpdateById(id: number, envioPalletPartial?: EnvioPalletPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.envioPalletControllerUpdateById(id, envioPalletPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EnvioPalletControllerApi - factory interface
 * @export
 */
export const EnvioPalletControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EnvioPalletControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        envioPalletControllerCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.envioPalletControllerCount(where, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NewEnvioPallet} [newEnvioPallet] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        envioPalletControllerCreate(newEnvioPallet?: NewEnvioPallet, options?: any): AxiosPromise<EnvioPallet> {
            return localVarFp.envioPalletControllerCreate(newEnvioPallet, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        envioPalletControllerDeleteById(id: number, options?: any): AxiosPromise<any> {
            return localVarFp.envioPalletControllerDeleteById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {EnvioPalletFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        envioPalletControllerFind(filter?: EnvioPalletFilter1, options?: any): AxiosPromise<Array<EnvioPalletWithRelations>> {
            return localVarFp.envioPalletControllerFind(filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {EnvioPalletFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        envioPalletControllerFindById(id: number, filter?: EnvioPalletFilter, options?: any): AxiosPromise<EnvioPalletWithRelations> {
            return localVarFp.envioPalletControllerFindById(id, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {EnvioPallet} [envioPallet] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        envioPalletControllerReplaceById(id: number, envioPallet?: EnvioPallet, options?: any): AxiosPromise<any> {
            return localVarFp.envioPalletControllerReplaceById(id, envioPallet, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {EnvioPalletPartial} [envioPalletPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        envioPalletControllerUpdateAll(where?: { [key: string]: object; }, envioPalletPartial?: EnvioPalletPartial, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.envioPalletControllerUpdateAll(where, envioPalletPartial, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {EnvioPalletPartial} [envioPalletPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        envioPalletControllerUpdateById(id: number, envioPalletPartial?: EnvioPalletPartial, options?: any): AxiosPromise<any> {
            return localVarFp.envioPalletControllerUpdateById(id, envioPalletPartial, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EnvioPalletControllerApi - object-oriented interface
 * @export
 * @class EnvioPalletControllerApi
 * @extends {BaseAPI}
 */
export class EnvioPalletControllerApi extends BaseAPI {
    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvioPalletControllerApi
     */
    public envioPalletControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig) {
        return EnvioPalletControllerApiFp(this.configuration).envioPalletControllerCount(where, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NewEnvioPallet} [newEnvioPallet] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvioPalletControllerApi
     */
    public envioPalletControllerCreate(newEnvioPallet?: NewEnvioPallet, options?: AxiosRequestConfig) {
        return EnvioPalletControllerApiFp(this.configuration).envioPalletControllerCreate(newEnvioPallet, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvioPalletControllerApi
     */
    public envioPalletControllerDeleteById(id: number, options?: AxiosRequestConfig) {
        return EnvioPalletControllerApiFp(this.configuration).envioPalletControllerDeleteById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {EnvioPalletFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvioPalletControllerApi
     */
    public envioPalletControllerFind(filter?: EnvioPalletFilter1, options?: AxiosRequestConfig) {
        return EnvioPalletControllerApiFp(this.configuration).envioPalletControllerFind(filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {EnvioPalletFilter} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvioPalletControllerApi
     */
    public envioPalletControllerFindById(id: number, filter?: EnvioPalletFilter, options?: AxiosRequestConfig) {
        return EnvioPalletControllerApiFp(this.configuration).envioPalletControllerFindById(id, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {EnvioPallet} [envioPallet] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvioPalletControllerApi
     */
    public envioPalletControllerReplaceById(id: number, envioPallet?: EnvioPallet, options?: AxiosRequestConfig) {
        return EnvioPalletControllerApiFp(this.configuration).envioPalletControllerReplaceById(id, envioPallet, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {EnvioPalletPartial} [envioPalletPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvioPalletControllerApi
     */
    public envioPalletControllerUpdateAll(where?: { [key: string]: object; }, envioPalletPartial?: EnvioPalletPartial, options?: AxiosRequestConfig) {
        return EnvioPalletControllerApiFp(this.configuration).envioPalletControllerUpdateAll(where, envioPalletPartial, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {EnvioPalletPartial} [envioPalletPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvioPalletControllerApi
     */
    public envioPalletControllerUpdateById(id: number, envioPalletPartial?: EnvioPalletPartial, options?: AxiosRequestConfig) {
        return EnvioPalletControllerApiFp(this.configuration).envioPalletControllerUpdateById(id, envioPalletPartial, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * EnvioParadaControllerApi - axios parameter creator
 * @export
 */
export const EnvioParadaControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        envioParadaControllerCount: async (where?: { [key: string]: object; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/envio-paradas/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NewEnvioParada} [newEnvioParada] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        envioParadaControllerCreate: async (newEnvioParada?: NewEnvioParada, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/envio-paradas`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newEnvioParada, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        envioParadaControllerDeleteById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('envioParadaControllerDeleteById', 'id', id)
            const localVarPath = `/envio-paradas/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {EnvioParadaFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        envioParadaControllerFind: async (filter?: EnvioParadaFilter1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/envio-paradas`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {EnvioParadaFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        envioParadaControllerFindById: async (id: number, filter?: EnvioParadaFilter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('envioParadaControllerFindById', 'id', id)
            const localVarPath = `/envio-paradas/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {EnvioParada} [envioParada] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        envioParadaControllerReplaceById: async (id: number, envioParada?: EnvioParada, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('envioParadaControllerReplaceById', 'id', id)
            const localVarPath = `/envio-paradas/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(envioParada, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {EnvioParadaPartial} [envioParadaPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        envioParadaControllerUpdateAll: async (where?: { [key: string]: object; }, envioParadaPartial?: EnvioParadaPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/envio-paradas`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(envioParadaPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {EnvioParadaPartial} [envioParadaPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        envioParadaControllerUpdateById: async (id: number, envioParadaPartial?: EnvioParadaPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('envioParadaControllerUpdateById', 'id', id)
            const localVarPath = `/envio-paradas/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(envioParadaPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EnvioParadaControllerApi - functional programming interface
 * @export
 */
export const EnvioParadaControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EnvioParadaControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async envioParadaControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.envioParadaControllerCount(where, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {NewEnvioParada} [newEnvioParada] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async envioParadaControllerCreate(newEnvioParada?: NewEnvioParada, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EnvioParada>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.envioParadaControllerCreate(newEnvioParada, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async envioParadaControllerDeleteById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.envioParadaControllerDeleteById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {EnvioParadaFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async envioParadaControllerFind(filter?: EnvioParadaFilter1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<EnvioParadaWithRelations>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.envioParadaControllerFind(filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {EnvioParadaFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async envioParadaControllerFindById(id: number, filter?: EnvioParadaFilter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EnvioParadaWithRelations>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.envioParadaControllerFindById(id, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {EnvioParada} [envioParada] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async envioParadaControllerReplaceById(id: number, envioParada?: EnvioParada, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.envioParadaControllerReplaceById(id, envioParada, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {EnvioParadaPartial} [envioParadaPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async envioParadaControllerUpdateAll(where?: { [key: string]: object; }, envioParadaPartial?: EnvioParadaPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.envioParadaControllerUpdateAll(where, envioParadaPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {EnvioParadaPartial} [envioParadaPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async envioParadaControllerUpdateById(id: number, envioParadaPartial?: EnvioParadaPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.envioParadaControllerUpdateById(id, envioParadaPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EnvioParadaControllerApi - factory interface
 * @export
 */
export const EnvioParadaControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EnvioParadaControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        envioParadaControllerCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.envioParadaControllerCount(where, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NewEnvioParada} [newEnvioParada] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        envioParadaControllerCreate(newEnvioParada?: NewEnvioParada, options?: any): AxiosPromise<EnvioParada> {
            return localVarFp.envioParadaControllerCreate(newEnvioParada, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        envioParadaControllerDeleteById(id: number, options?: any): AxiosPromise<any> {
            return localVarFp.envioParadaControllerDeleteById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {EnvioParadaFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        envioParadaControllerFind(filter?: EnvioParadaFilter1, options?: any): AxiosPromise<Array<EnvioParadaWithRelations>> {
            return localVarFp.envioParadaControllerFind(filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {EnvioParadaFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        envioParadaControllerFindById(id: number, filter?: EnvioParadaFilter, options?: any): AxiosPromise<EnvioParadaWithRelations> {
            return localVarFp.envioParadaControllerFindById(id, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {EnvioParada} [envioParada] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        envioParadaControllerReplaceById(id: number, envioParada?: EnvioParada, options?: any): AxiosPromise<any> {
            return localVarFp.envioParadaControllerReplaceById(id, envioParada, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {EnvioParadaPartial} [envioParadaPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        envioParadaControllerUpdateAll(where?: { [key: string]: object; }, envioParadaPartial?: EnvioParadaPartial, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.envioParadaControllerUpdateAll(where, envioParadaPartial, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {EnvioParadaPartial} [envioParadaPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        envioParadaControllerUpdateById(id: number, envioParadaPartial?: EnvioParadaPartial, options?: any): AxiosPromise<any> {
            return localVarFp.envioParadaControllerUpdateById(id, envioParadaPartial, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EnvioParadaControllerApi - object-oriented interface
 * @export
 * @class EnvioParadaControllerApi
 * @extends {BaseAPI}
 */
export class EnvioParadaControllerApi extends BaseAPI {
    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvioParadaControllerApi
     */
    public envioParadaControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig) {
        return EnvioParadaControllerApiFp(this.configuration).envioParadaControllerCount(where, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NewEnvioParada} [newEnvioParada] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvioParadaControllerApi
     */
    public envioParadaControllerCreate(newEnvioParada?: NewEnvioParada, options?: AxiosRequestConfig) {
        return EnvioParadaControllerApiFp(this.configuration).envioParadaControllerCreate(newEnvioParada, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvioParadaControllerApi
     */
    public envioParadaControllerDeleteById(id: number, options?: AxiosRequestConfig) {
        return EnvioParadaControllerApiFp(this.configuration).envioParadaControllerDeleteById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {EnvioParadaFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvioParadaControllerApi
     */
    public envioParadaControllerFind(filter?: EnvioParadaFilter1, options?: AxiosRequestConfig) {
        return EnvioParadaControllerApiFp(this.configuration).envioParadaControllerFind(filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {EnvioParadaFilter} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvioParadaControllerApi
     */
    public envioParadaControllerFindById(id: number, filter?: EnvioParadaFilter, options?: AxiosRequestConfig) {
        return EnvioParadaControllerApiFp(this.configuration).envioParadaControllerFindById(id, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {EnvioParada} [envioParada] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvioParadaControllerApi
     */
    public envioParadaControllerReplaceById(id: number, envioParada?: EnvioParada, options?: AxiosRequestConfig) {
        return EnvioParadaControllerApiFp(this.configuration).envioParadaControllerReplaceById(id, envioParada, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {EnvioParadaPartial} [envioParadaPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvioParadaControllerApi
     */
    public envioParadaControllerUpdateAll(where?: { [key: string]: object; }, envioParadaPartial?: EnvioParadaPartial, options?: AxiosRequestConfig) {
        return EnvioParadaControllerApiFp(this.configuration).envioParadaControllerUpdateAll(where, envioParadaPartial, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {EnvioParadaPartial} [envioParadaPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvioParadaControllerApi
     */
    public envioParadaControllerUpdateById(id: number, envioParadaPartial?: EnvioParadaPartial, options?: AxiosRequestConfig) {
        return EnvioParadaControllerApiFp(this.configuration).envioParadaControllerUpdateById(id, envioParadaPartial, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * EnvioVehiculoControllerApi - axios parameter creator
 * @export
 */
export const EnvioVehiculoControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        envioVehiculoControllerCount: async (where?: { [key: string]: object; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/envio-vehiculos/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NewEnvioVehiculo} [newEnvioVehiculo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        envioVehiculoControllerCreate: async (newEnvioVehiculo?: NewEnvioVehiculo, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/envio-vehiculos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newEnvioVehiculo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        envioVehiculoControllerDeleteById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('envioVehiculoControllerDeleteById', 'id', id)
            const localVarPath = `/envio-vehiculos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {EnvioVehiculoFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        envioVehiculoControllerFind: async (filter?: EnvioVehiculoFilter1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/envio-vehiculos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {EnvioVehiculoFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        envioVehiculoControllerFindById: async (id: number, filter?: EnvioVehiculoFilter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('envioVehiculoControllerFindById', 'id', id)
            const localVarPath = `/envio-vehiculos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {EnvioVehiculo} [envioVehiculo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        envioVehiculoControllerReplaceById: async (id: number, envioVehiculo?: EnvioVehiculo, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('envioVehiculoControllerReplaceById', 'id', id)
            const localVarPath = `/envio-vehiculos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(envioVehiculo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {EnvioVehiculoPartial} [envioVehiculoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        envioVehiculoControllerUpdateAll: async (where?: { [key: string]: object; }, envioVehiculoPartial?: EnvioVehiculoPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/envio-vehiculos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(envioVehiculoPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {EnvioVehiculoPartial} [envioVehiculoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        envioVehiculoControllerUpdateById: async (id: number, envioVehiculoPartial?: EnvioVehiculoPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('envioVehiculoControllerUpdateById', 'id', id)
            const localVarPath = `/envio-vehiculos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(envioVehiculoPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EnvioVehiculoControllerApi - functional programming interface
 * @export
 */
export const EnvioVehiculoControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EnvioVehiculoControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async envioVehiculoControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.envioVehiculoControllerCount(where, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {NewEnvioVehiculo} [newEnvioVehiculo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async envioVehiculoControllerCreate(newEnvioVehiculo?: NewEnvioVehiculo, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EnvioVehiculo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.envioVehiculoControllerCreate(newEnvioVehiculo, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async envioVehiculoControllerDeleteById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.envioVehiculoControllerDeleteById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {EnvioVehiculoFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async envioVehiculoControllerFind(filter?: EnvioVehiculoFilter1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<EnvioVehiculoWithRelations>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.envioVehiculoControllerFind(filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {EnvioVehiculoFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async envioVehiculoControllerFindById(id: number, filter?: EnvioVehiculoFilter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EnvioVehiculoWithRelations>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.envioVehiculoControllerFindById(id, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {EnvioVehiculo} [envioVehiculo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async envioVehiculoControllerReplaceById(id: number, envioVehiculo?: EnvioVehiculo, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.envioVehiculoControllerReplaceById(id, envioVehiculo, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {EnvioVehiculoPartial} [envioVehiculoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async envioVehiculoControllerUpdateAll(where?: { [key: string]: object; }, envioVehiculoPartial?: EnvioVehiculoPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.envioVehiculoControllerUpdateAll(where, envioVehiculoPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {EnvioVehiculoPartial} [envioVehiculoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async envioVehiculoControllerUpdateById(id: number, envioVehiculoPartial?: EnvioVehiculoPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.envioVehiculoControllerUpdateById(id, envioVehiculoPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EnvioVehiculoControllerApi - factory interface
 * @export
 */
export const EnvioVehiculoControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EnvioVehiculoControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        envioVehiculoControllerCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.envioVehiculoControllerCount(where, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NewEnvioVehiculo} [newEnvioVehiculo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        envioVehiculoControllerCreate(newEnvioVehiculo?: NewEnvioVehiculo, options?: any): AxiosPromise<EnvioVehiculo> {
            return localVarFp.envioVehiculoControllerCreate(newEnvioVehiculo, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        envioVehiculoControllerDeleteById(id: number, options?: any): AxiosPromise<any> {
            return localVarFp.envioVehiculoControllerDeleteById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {EnvioVehiculoFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        envioVehiculoControllerFind(filter?: EnvioVehiculoFilter1, options?: any): AxiosPromise<Array<EnvioVehiculoWithRelations>> {
            return localVarFp.envioVehiculoControllerFind(filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {EnvioVehiculoFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        envioVehiculoControllerFindById(id: number, filter?: EnvioVehiculoFilter, options?: any): AxiosPromise<EnvioVehiculoWithRelations> {
            return localVarFp.envioVehiculoControllerFindById(id, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {EnvioVehiculo} [envioVehiculo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        envioVehiculoControllerReplaceById(id: number, envioVehiculo?: EnvioVehiculo, options?: any): AxiosPromise<any> {
            return localVarFp.envioVehiculoControllerReplaceById(id, envioVehiculo, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {EnvioVehiculoPartial} [envioVehiculoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        envioVehiculoControllerUpdateAll(where?: { [key: string]: object; }, envioVehiculoPartial?: EnvioVehiculoPartial, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.envioVehiculoControllerUpdateAll(where, envioVehiculoPartial, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {EnvioVehiculoPartial} [envioVehiculoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        envioVehiculoControllerUpdateById(id: number, envioVehiculoPartial?: EnvioVehiculoPartial, options?: any): AxiosPromise<any> {
            return localVarFp.envioVehiculoControllerUpdateById(id, envioVehiculoPartial, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EnvioVehiculoControllerApi - object-oriented interface
 * @export
 * @class EnvioVehiculoControllerApi
 * @extends {BaseAPI}
 */
export class EnvioVehiculoControllerApi extends BaseAPI {
    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvioVehiculoControllerApi
     */
    public envioVehiculoControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig) {
        return EnvioVehiculoControllerApiFp(this.configuration).envioVehiculoControllerCount(where, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NewEnvioVehiculo} [newEnvioVehiculo] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvioVehiculoControllerApi
     */
    public envioVehiculoControllerCreate(newEnvioVehiculo?: NewEnvioVehiculo, options?: AxiosRequestConfig) {
        return EnvioVehiculoControllerApiFp(this.configuration).envioVehiculoControllerCreate(newEnvioVehiculo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvioVehiculoControllerApi
     */
    public envioVehiculoControllerDeleteById(id: number, options?: AxiosRequestConfig) {
        return EnvioVehiculoControllerApiFp(this.configuration).envioVehiculoControllerDeleteById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {EnvioVehiculoFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvioVehiculoControllerApi
     */
    public envioVehiculoControllerFind(filter?: EnvioVehiculoFilter1, options?: AxiosRequestConfig) {
        return EnvioVehiculoControllerApiFp(this.configuration).envioVehiculoControllerFind(filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {EnvioVehiculoFilter} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvioVehiculoControllerApi
     */
    public envioVehiculoControllerFindById(id: number, filter?: EnvioVehiculoFilter, options?: AxiosRequestConfig) {
        return EnvioVehiculoControllerApiFp(this.configuration).envioVehiculoControllerFindById(id, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {EnvioVehiculo} [envioVehiculo] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvioVehiculoControllerApi
     */
    public envioVehiculoControllerReplaceById(id: number, envioVehiculo?: EnvioVehiculo, options?: AxiosRequestConfig) {
        return EnvioVehiculoControllerApiFp(this.configuration).envioVehiculoControllerReplaceById(id, envioVehiculo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {EnvioVehiculoPartial} [envioVehiculoPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvioVehiculoControllerApi
     */
    public envioVehiculoControllerUpdateAll(where?: { [key: string]: object; }, envioVehiculoPartial?: EnvioVehiculoPartial, options?: AxiosRequestConfig) {
        return EnvioVehiculoControllerApiFp(this.configuration).envioVehiculoControllerUpdateAll(where, envioVehiculoPartial, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {EnvioVehiculoPartial} [envioVehiculoPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvioVehiculoControllerApi
     */
    public envioVehiculoControllerUpdateById(id: number, envioVehiculoPartial?: EnvioVehiculoPartial, options?: AxiosRequestConfig) {
        return EnvioVehiculoControllerApiFp(this.configuration).envioVehiculoControllerUpdateById(id, envioVehiculoPartial, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * FileUploadControllerApi - axios parameter creator
 * @export
 */
export const FileUploadControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} folderPathDir 
         * @param {string} fileName 
         * @param {any} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fileUploadControllerAvatarUpload: async (folderPathDir: string, fileName: string, file?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'folderPathDir' is not null or undefined
            assertParamExists('fileUploadControllerAvatarUpload', 'folderPathDir', folderPathDir)
            // verify required parameter 'fileName' is not null or undefined
            assertParamExists('fileUploadControllerAvatarUpload', 'fileName', fileName)
            const localVarPath = `/avatar-upload/{folderPathDir}/{fileName}`
                .replace(`{${"folderPathDir"}}`, encodeURIComponent(String(folderPathDir)))
                .replace(`{${"fileName"}}`, encodeURIComponent(String(fileName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} imagen 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fileUploadControllerDeleteFileByName: async (imagen: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'imagen' is not null or undefined
            assertParamExists('fileUploadControllerDeleteFileByName', 'imagen', imagen)
            const localVarPath = `/files/{imagen}`
                .replace(`{${"imagen"}}`, encodeURIComponent(String(imagen)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} folderPathDir 
         * @param {string} fileName 
         * @param {any} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fileUploadControllerFileUpload: async (folderPathDir: string, fileName: string, file?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'folderPathDir' is not null or undefined
            assertParamExists('fileUploadControllerFileUpload', 'folderPathDir', folderPathDir)
            // verify required parameter 'fileName' is not null or undefined
            assertParamExists('fileUploadControllerFileUpload', 'fileName', fileName)
            const localVarPath = `/files-upload/{folderPathDir}/{fileName}`
                .replace(`{${"folderPathDir"}}`, encodeURIComponent(String(folderPathDir)))
                .replace(`{${"fileName"}}`, encodeURIComponent(String(fileName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} folderPathDir 
         * @param {string} fileName 
         * @param {any} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fileUploadControllerImageUpload: async (folderPathDir: string, fileName: string, file?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'folderPathDir' is not null or undefined
            assertParamExists('fileUploadControllerImageUpload', 'folderPathDir', folderPathDir)
            // verify required parameter 'fileName' is not null or undefined
            assertParamExists('fileUploadControllerImageUpload', 'fileName', fileName)
            const localVarPath = `/images-upload/{folderPathDir}/{fileName}`
                .replace(`{${"folderPathDir"}}`, encodeURIComponent(String(folderPathDir)))
                .replace(`{${"fileName"}}`, encodeURIComponent(String(fileName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FileUploadControllerApi - functional programming interface
 * @export
 */
export const FileUploadControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FileUploadControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} folderPathDir 
         * @param {string} fileName 
         * @param {any} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fileUploadControllerAvatarUpload(folderPathDir: string, fileName: string, file?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fileUploadControllerAvatarUpload(folderPathDir, fileName, file, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} imagen 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fileUploadControllerDeleteFileByName(imagen: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fileUploadControllerDeleteFileByName(imagen, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} folderPathDir 
         * @param {string} fileName 
         * @param {any} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fileUploadControllerFileUpload(folderPathDir: string, fileName: string, file?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fileUploadControllerFileUpload(folderPathDir, fileName, file, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} folderPathDir 
         * @param {string} fileName 
         * @param {any} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fileUploadControllerImageUpload(folderPathDir: string, fileName: string, file?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fileUploadControllerImageUpload(folderPathDir, fileName, file, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FileUploadControllerApi - factory interface
 * @export
 */
export const FileUploadControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FileUploadControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {string} folderPathDir 
         * @param {string} fileName 
         * @param {any} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fileUploadControllerAvatarUpload(folderPathDir: string, fileName: string, file?: any, options?: any): AxiosPromise<object> {
            return localVarFp.fileUploadControllerAvatarUpload(folderPathDir, fileName, file, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} imagen 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fileUploadControllerDeleteFileByName(imagen: string, options?: any): AxiosPromise<any> {
            return localVarFp.fileUploadControllerDeleteFileByName(imagen, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} folderPathDir 
         * @param {string} fileName 
         * @param {any} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fileUploadControllerFileUpload(folderPathDir: string, fileName: string, file?: any, options?: any): AxiosPromise<object> {
            return localVarFp.fileUploadControllerFileUpload(folderPathDir, fileName, file, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} folderPathDir 
         * @param {string} fileName 
         * @param {any} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fileUploadControllerImageUpload(folderPathDir: string, fileName: string, file?: any, options?: any): AxiosPromise<object> {
            return localVarFp.fileUploadControllerImageUpload(folderPathDir, fileName, file, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FileUploadControllerApi - object-oriented interface
 * @export
 * @class FileUploadControllerApi
 * @extends {BaseAPI}
 */
export class FileUploadControllerApi extends BaseAPI {
    /**
     * 
     * @param {string} folderPathDir 
     * @param {string} fileName 
     * @param {any} [file] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileUploadControllerApi
     */
    public fileUploadControllerAvatarUpload(folderPathDir: string, fileName: string, file?: any, options?: AxiosRequestConfig) {
        return FileUploadControllerApiFp(this.configuration).fileUploadControllerAvatarUpload(folderPathDir, fileName, file, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} imagen 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileUploadControllerApi
     */
    public fileUploadControllerDeleteFileByName(imagen: string, options?: AxiosRequestConfig) {
        return FileUploadControllerApiFp(this.configuration).fileUploadControllerDeleteFileByName(imagen, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} folderPathDir 
     * @param {string} fileName 
     * @param {any} [file] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileUploadControllerApi
     */
    public fileUploadControllerFileUpload(folderPathDir: string, fileName: string, file?: any, options?: AxiosRequestConfig) {
        return FileUploadControllerApiFp(this.configuration).fileUploadControllerFileUpload(folderPathDir, fileName, file, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} folderPathDir 
     * @param {string} fileName 
     * @param {any} [file] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileUploadControllerApi
     */
    public fileUploadControllerImageUpload(folderPathDir: string, fileName: string, file?: any, options?: AxiosRequestConfig) {
        return FileUploadControllerApiFp(this.configuration).fileUploadControllerImageUpload(folderPathDir, fileName, file, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * IdiomaControllerApi - axios parameter creator
 * @export
 */
export const IdiomaControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        idiomaControllerCount: async (where?: { [key: string]: object; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/idiomas/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NewIdioma} [newIdioma] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        idiomaControllerCreate: async (newIdioma?: NewIdioma, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/idiomas`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newIdioma, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        idiomaControllerDeleteById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('idiomaControllerDeleteById', 'id', id)
            const localVarPath = `/idiomas/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {IdiomaFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        idiomaControllerFind: async (filter?: IdiomaFilter1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/idiomas`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {IdiomaFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        idiomaControllerFindById: async (id: number, filter?: IdiomaFilter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('idiomaControllerFindById', 'id', id)
            const localVarPath = `/idiomas/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {Idioma} [idioma] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        idiomaControllerReplaceById: async (id: number, idioma?: Idioma, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('idiomaControllerReplaceById', 'id', id)
            const localVarPath = `/idiomas/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(idioma, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {IdiomaPartial} [idiomaPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        idiomaControllerUpdateAll: async (where?: { [key: string]: object; }, idiomaPartial?: IdiomaPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/idiomas`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(idiomaPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {IdiomaPartial} [idiomaPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        idiomaControllerUpdateById: async (id: number, idiomaPartial?: IdiomaPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('idiomaControllerUpdateById', 'id', id)
            const localVarPath = `/idiomas/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(idiomaPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * IdiomaControllerApi - functional programming interface
 * @export
 */
export const IdiomaControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = IdiomaControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async idiomaControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.idiomaControllerCount(where, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {NewIdioma} [newIdioma] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async idiomaControllerCreate(newIdioma?: NewIdioma, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Idioma>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.idiomaControllerCreate(newIdioma, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async idiomaControllerDeleteById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.idiomaControllerDeleteById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {IdiomaFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async idiomaControllerFind(filter?: IdiomaFilter1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<IdiomaWithRelations>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.idiomaControllerFind(filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {IdiomaFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async idiomaControllerFindById(id: number, filter?: IdiomaFilter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdiomaWithRelations>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.idiomaControllerFindById(id, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {Idioma} [idioma] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async idiomaControllerReplaceById(id: number, idioma?: Idioma, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.idiomaControllerReplaceById(id, idioma, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {IdiomaPartial} [idiomaPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async idiomaControllerUpdateAll(where?: { [key: string]: object; }, idiomaPartial?: IdiomaPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.idiomaControllerUpdateAll(where, idiomaPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {IdiomaPartial} [idiomaPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async idiomaControllerUpdateById(id: number, idiomaPartial?: IdiomaPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.idiomaControllerUpdateById(id, idiomaPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * IdiomaControllerApi - factory interface
 * @export
 */
export const IdiomaControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = IdiomaControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        idiomaControllerCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.idiomaControllerCount(where, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NewIdioma} [newIdioma] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        idiomaControllerCreate(newIdioma?: NewIdioma, options?: any): AxiosPromise<Idioma> {
            return localVarFp.idiomaControllerCreate(newIdioma, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        idiomaControllerDeleteById(id: number, options?: any): AxiosPromise<any> {
            return localVarFp.idiomaControllerDeleteById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {IdiomaFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        idiomaControllerFind(filter?: IdiomaFilter1, options?: any): AxiosPromise<Array<IdiomaWithRelations>> {
            return localVarFp.idiomaControllerFind(filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {IdiomaFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        idiomaControllerFindById(id: number, filter?: IdiomaFilter, options?: any): AxiosPromise<IdiomaWithRelations> {
            return localVarFp.idiomaControllerFindById(id, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {Idioma} [idioma] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        idiomaControllerReplaceById(id: number, idioma?: Idioma, options?: any): AxiosPromise<any> {
            return localVarFp.idiomaControllerReplaceById(id, idioma, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {IdiomaPartial} [idiomaPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        idiomaControllerUpdateAll(where?: { [key: string]: object; }, idiomaPartial?: IdiomaPartial, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.idiomaControllerUpdateAll(where, idiomaPartial, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {IdiomaPartial} [idiomaPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        idiomaControllerUpdateById(id: number, idiomaPartial?: IdiomaPartial, options?: any): AxiosPromise<any> {
            return localVarFp.idiomaControllerUpdateById(id, idiomaPartial, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * IdiomaControllerApi - object-oriented interface
 * @export
 * @class IdiomaControllerApi
 * @extends {BaseAPI}
 */
export class IdiomaControllerApi extends BaseAPI {
    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdiomaControllerApi
     */
    public idiomaControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig) {
        return IdiomaControllerApiFp(this.configuration).idiomaControllerCount(where, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NewIdioma} [newIdioma] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdiomaControllerApi
     */
    public idiomaControllerCreate(newIdioma?: NewIdioma, options?: AxiosRequestConfig) {
        return IdiomaControllerApiFp(this.configuration).idiomaControllerCreate(newIdioma, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdiomaControllerApi
     */
    public idiomaControllerDeleteById(id: number, options?: AxiosRequestConfig) {
        return IdiomaControllerApiFp(this.configuration).idiomaControllerDeleteById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {IdiomaFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdiomaControllerApi
     */
    public idiomaControllerFind(filter?: IdiomaFilter1, options?: AxiosRequestConfig) {
        return IdiomaControllerApiFp(this.configuration).idiomaControllerFind(filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {IdiomaFilter} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdiomaControllerApi
     */
    public idiomaControllerFindById(id: number, filter?: IdiomaFilter, options?: AxiosRequestConfig) {
        return IdiomaControllerApiFp(this.configuration).idiomaControllerFindById(id, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {Idioma} [idioma] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdiomaControllerApi
     */
    public idiomaControllerReplaceById(id: number, idioma?: Idioma, options?: AxiosRequestConfig) {
        return IdiomaControllerApiFp(this.configuration).idiomaControllerReplaceById(id, idioma, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {IdiomaPartial} [idiomaPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdiomaControllerApi
     */
    public idiomaControllerUpdateAll(where?: { [key: string]: object; }, idiomaPartial?: IdiomaPartial, options?: AxiosRequestConfig) {
        return IdiomaControllerApiFp(this.configuration).idiomaControllerUpdateAll(where, idiomaPartial, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {IdiomaPartial} [idiomaPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdiomaControllerApi
     */
    public idiomaControllerUpdateById(id: number, idiomaPartial?: IdiomaPartial, options?: AxiosRequestConfig) {
        return IdiomaControllerApiFp(this.configuration).idiomaControllerUpdateById(id, idiomaPartial, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ListaPermisosControllerApi - axios parameter creator
 * @export
 */
export const ListaPermisosControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listaPermisosControllerCount: async (where?: { [key: string]: object; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/lista-permisos/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NewListaPermisos} [newListaPermisos] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listaPermisosControllerCreate: async (newListaPermisos?: NewListaPermisos, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/lista-permisos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newListaPermisos, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listaPermisosControllerDeleteById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listaPermisosControllerDeleteById', 'id', id)
            const localVarPath = `/lista-permisos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ListaPermisosFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listaPermisosControllerFind: async (filter?: ListaPermisosFilter1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/lista-permisos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {ListaPermisosFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listaPermisosControllerFindById: async (id: number, filter?: ListaPermisosFilter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listaPermisosControllerFindById', 'id', id)
            const localVarPath = `/lista-permisos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {ListaPermisos} [listaPermisos] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listaPermisosControllerReplaceById: async (id: number, listaPermisos?: ListaPermisos, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listaPermisosControllerReplaceById', 'id', id)
            const localVarPath = `/lista-permisos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(listaPermisos, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {ListaPermisosPartial} [listaPermisosPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listaPermisosControllerUpdateAll: async (where?: { [key: string]: object; }, listaPermisosPartial?: ListaPermisosPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/lista-permisos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(listaPermisosPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {ListaPermisosPartial} [listaPermisosPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listaPermisosControllerUpdateById: async (id: number, listaPermisosPartial?: ListaPermisosPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listaPermisosControllerUpdateById', 'id', id)
            const localVarPath = `/lista-permisos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(listaPermisosPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListaPermisosControllerApi - functional programming interface
 * @export
 */
export const ListaPermisosControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListaPermisosControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listaPermisosControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listaPermisosControllerCount(where, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {NewListaPermisos} [newListaPermisos] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listaPermisosControllerCreate(newListaPermisos?: NewListaPermisos, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListaPermisos>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listaPermisosControllerCreate(newListaPermisos, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listaPermisosControllerDeleteById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listaPermisosControllerDeleteById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ListaPermisosFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listaPermisosControllerFind(filter?: ListaPermisosFilter1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ListaPermisosWithRelations>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listaPermisosControllerFind(filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {ListaPermisosFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listaPermisosControllerFindById(id: number, filter?: ListaPermisosFilter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListaPermisosWithRelations>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listaPermisosControllerFindById(id, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {ListaPermisos} [listaPermisos] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listaPermisosControllerReplaceById(id: number, listaPermisos?: ListaPermisos, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listaPermisosControllerReplaceById(id, listaPermisos, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {ListaPermisosPartial} [listaPermisosPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listaPermisosControllerUpdateAll(where?: { [key: string]: object; }, listaPermisosPartial?: ListaPermisosPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listaPermisosControllerUpdateAll(where, listaPermisosPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {ListaPermisosPartial} [listaPermisosPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listaPermisosControllerUpdateById(id: number, listaPermisosPartial?: ListaPermisosPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listaPermisosControllerUpdateById(id, listaPermisosPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListaPermisosControllerApi - factory interface
 * @export
 */
export const ListaPermisosControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListaPermisosControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listaPermisosControllerCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.listaPermisosControllerCount(where, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NewListaPermisos} [newListaPermisos] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listaPermisosControllerCreate(newListaPermisos?: NewListaPermisos, options?: any): AxiosPromise<ListaPermisos> {
            return localVarFp.listaPermisosControllerCreate(newListaPermisos, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listaPermisosControllerDeleteById(id: number, options?: any): AxiosPromise<any> {
            return localVarFp.listaPermisosControllerDeleteById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ListaPermisosFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listaPermisosControllerFind(filter?: ListaPermisosFilter1, options?: any): AxiosPromise<Array<ListaPermisosWithRelations>> {
            return localVarFp.listaPermisosControllerFind(filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {ListaPermisosFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listaPermisosControllerFindById(id: number, filter?: ListaPermisosFilter, options?: any): AxiosPromise<ListaPermisosWithRelations> {
            return localVarFp.listaPermisosControllerFindById(id, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {ListaPermisos} [listaPermisos] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listaPermisosControllerReplaceById(id: number, listaPermisos?: ListaPermisos, options?: any): AxiosPromise<any> {
            return localVarFp.listaPermisosControllerReplaceById(id, listaPermisos, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {ListaPermisosPartial} [listaPermisosPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listaPermisosControllerUpdateAll(where?: { [key: string]: object; }, listaPermisosPartial?: ListaPermisosPartial, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.listaPermisosControllerUpdateAll(where, listaPermisosPartial, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {ListaPermisosPartial} [listaPermisosPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listaPermisosControllerUpdateById(id: number, listaPermisosPartial?: ListaPermisosPartial, options?: any): AxiosPromise<any> {
            return localVarFp.listaPermisosControllerUpdateById(id, listaPermisosPartial, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListaPermisosControllerApi - object-oriented interface
 * @export
 * @class ListaPermisosControllerApi
 * @extends {BaseAPI}
 */
export class ListaPermisosControllerApi extends BaseAPI {
    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListaPermisosControllerApi
     */
    public listaPermisosControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig) {
        return ListaPermisosControllerApiFp(this.configuration).listaPermisosControllerCount(where, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NewListaPermisos} [newListaPermisos] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListaPermisosControllerApi
     */
    public listaPermisosControllerCreate(newListaPermisos?: NewListaPermisos, options?: AxiosRequestConfig) {
        return ListaPermisosControllerApiFp(this.configuration).listaPermisosControllerCreate(newListaPermisos, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListaPermisosControllerApi
     */
    public listaPermisosControllerDeleteById(id: number, options?: AxiosRequestConfig) {
        return ListaPermisosControllerApiFp(this.configuration).listaPermisosControllerDeleteById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ListaPermisosFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListaPermisosControllerApi
     */
    public listaPermisosControllerFind(filter?: ListaPermisosFilter1, options?: AxiosRequestConfig) {
        return ListaPermisosControllerApiFp(this.configuration).listaPermisosControllerFind(filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {ListaPermisosFilter} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListaPermisosControllerApi
     */
    public listaPermisosControllerFindById(id: number, filter?: ListaPermisosFilter, options?: AxiosRequestConfig) {
        return ListaPermisosControllerApiFp(this.configuration).listaPermisosControllerFindById(id, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {ListaPermisos} [listaPermisos] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListaPermisosControllerApi
     */
    public listaPermisosControllerReplaceById(id: number, listaPermisos?: ListaPermisos, options?: AxiosRequestConfig) {
        return ListaPermisosControllerApiFp(this.configuration).listaPermisosControllerReplaceById(id, listaPermisos, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {ListaPermisosPartial} [listaPermisosPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListaPermisosControllerApi
     */
    public listaPermisosControllerUpdateAll(where?: { [key: string]: object; }, listaPermisosPartial?: ListaPermisosPartial, options?: AxiosRequestConfig) {
        return ListaPermisosControllerApiFp(this.configuration).listaPermisosControllerUpdateAll(where, listaPermisosPartial, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {ListaPermisosPartial} [listaPermisosPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListaPermisosControllerApi
     */
    public listaPermisosControllerUpdateById(id: number, listaPermisosPartial?: ListaPermisosPartial, options?: AxiosRequestConfig) {
        return ListaPermisosControllerApiFp(this.configuration).listaPermisosControllerUpdateById(id, listaPermisosPartial, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * LogUsuarioControllerApi - axios parameter creator
 * @export
 */
export const LogUsuarioControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logUsuarioControllerCount: async (where?: { [key: string]: object; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/log-usuarios/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NewLogUsuario} [newLogUsuario] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logUsuarioControllerCreate: async (newLogUsuario?: NewLogUsuario, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/log-usuarios`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newLogUsuario, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logUsuarioControllerDeleteById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('logUsuarioControllerDeleteById', 'id', id)
            const localVarPath = `/log-usuarios/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {LogUsuarioFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logUsuarioControllerFind: async (filter?: LogUsuarioFilter1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/log-usuarios`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {LogUsuarioFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logUsuarioControllerFindById: async (id: number, filter?: LogUsuarioFilter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('logUsuarioControllerFindById', 'id', id)
            const localVarPath = `/log-usuarios/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {LogUsuario} [logUsuario] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logUsuarioControllerReplaceById: async (id: number, logUsuario?: LogUsuario, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('logUsuarioControllerReplaceById', 'id', id)
            const localVarPath = `/log-usuarios/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(logUsuario, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {LogUsuarioPartial} [logUsuarioPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logUsuarioControllerUpdateAll: async (where?: { [key: string]: object; }, logUsuarioPartial?: LogUsuarioPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/log-usuarios`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(logUsuarioPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {LogUsuarioPartial} [logUsuarioPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logUsuarioControllerUpdateById: async (id: number, logUsuarioPartial?: LogUsuarioPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('logUsuarioControllerUpdateById', 'id', id)
            const localVarPath = `/log-usuarios/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(logUsuarioPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {LogUsuarioFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logUsuarioControllerVistaLogUsuarioUsuario: async (filter?: LogUsuarioFilter1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/vistaLogUsuarioUsuario`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logUsuarioControllerVistaLogUsuarioUsuarioCount: async (where?: { [key: string]: object; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/vistaLogUsuarioUsuarioCount`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LogUsuarioControllerApi - functional programming interface
 * @export
 */
export const LogUsuarioControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LogUsuarioControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logUsuarioControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logUsuarioControllerCount(where, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {NewLogUsuario} [newLogUsuario] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logUsuarioControllerCreate(newLogUsuario?: NewLogUsuario, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LogUsuario>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logUsuarioControllerCreate(newLogUsuario, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logUsuarioControllerDeleteById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logUsuarioControllerDeleteById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {LogUsuarioFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logUsuarioControllerFind(filter?: LogUsuarioFilter1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<LogUsuarioWithRelations>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logUsuarioControllerFind(filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {LogUsuarioFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logUsuarioControllerFindById(id: number, filter?: LogUsuarioFilter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LogUsuarioWithRelations>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logUsuarioControllerFindById(id, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {LogUsuario} [logUsuario] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logUsuarioControllerReplaceById(id: number, logUsuario?: LogUsuario, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logUsuarioControllerReplaceById(id, logUsuario, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {LogUsuarioPartial} [logUsuarioPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logUsuarioControllerUpdateAll(where?: { [key: string]: object; }, logUsuarioPartial?: LogUsuarioPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logUsuarioControllerUpdateAll(where, logUsuarioPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {LogUsuarioPartial} [logUsuarioPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logUsuarioControllerUpdateById(id: number, logUsuarioPartial?: LogUsuarioPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logUsuarioControllerUpdateById(id, logUsuarioPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {LogUsuarioFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logUsuarioControllerVistaLogUsuarioUsuario(filter?: LogUsuarioFilter1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logUsuarioControllerVistaLogUsuarioUsuario(filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logUsuarioControllerVistaLogUsuarioUsuarioCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logUsuarioControllerVistaLogUsuarioUsuarioCount(where, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LogUsuarioControllerApi - factory interface
 * @export
 */
export const LogUsuarioControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LogUsuarioControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logUsuarioControllerCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.logUsuarioControllerCount(where, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NewLogUsuario} [newLogUsuario] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logUsuarioControllerCreate(newLogUsuario?: NewLogUsuario, options?: any): AxiosPromise<LogUsuario> {
            return localVarFp.logUsuarioControllerCreate(newLogUsuario, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logUsuarioControllerDeleteById(id: number, options?: any): AxiosPromise<any> {
            return localVarFp.logUsuarioControllerDeleteById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {LogUsuarioFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logUsuarioControllerFind(filter?: LogUsuarioFilter1, options?: any): AxiosPromise<Array<LogUsuarioWithRelations>> {
            return localVarFp.logUsuarioControllerFind(filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {LogUsuarioFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logUsuarioControllerFindById(id: number, filter?: LogUsuarioFilter, options?: any): AxiosPromise<LogUsuarioWithRelations> {
            return localVarFp.logUsuarioControllerFindById(id, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {LogUsuario} [logUsuario] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logUsuarioControllerReplaceById(id: number, logUsuario?: LogUsuario, options?: any): AxiosPromise<any> {
            return localVarFp.logUsuarioControllerReplaceById(id, logUsuario, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {LogUsuarioPartial} [logUsuarioPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logUsuarioControllerUpdateAll(where?: { [key: string]: object; }, logUsuarioPartial?: LogUsuarioPartial, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.logUsuarioControllerUpdateAll(where, logUsuarioPartial, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {LogUsuarioPartial} [logUsuarioPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logUsuarioControllerUpdateById(id: number, logUsuarioPartial?: LogUsuarioPartial, options?: any): AxiosPromise<any> {
            return localVarFp.logUsuarioControllerUpdateById(id, logUsuarioPartial, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {LogUsuarioFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logUsuarioControllerVistaLogUsuarioUsuario(filter?: LogUsuarioFilter1, options?: any): AxiosPromise<object> {
            return localVarFp.logUsuarioControllerVistaLogUsuarioUsuario(filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logUsuarioControllerVistaLogUsuarioUsuarioCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<object> {
            return localVarFp.logUsuarioControllerVistaLogUsuarioUsuarioCount(where, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LogUsuarioControllerApi - object-oriented interface
 * @export
 * @class LogUsuarioControllerApi
 * @extends {BaseAPI}
 */
export class LogUsuarioControllerApi extends BaseAPI {
    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogUsuarioControllerApi
     */
    public logUsuarioControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig) {
        return LogUsuarioControllerApiFp(this.configuration).logUsuarioControllerCount(where, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NewLogUsuario} [newLogUsuario] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogUsuarioControllerApi
     */
    public logUsuarioControllerCreate(newLogUsuario?: NewLogUsuario, options?: AxiosRequestConfig) {
        return LogUsuarioControllerApiFp(this.configuration).logUsuarioControllerCreate(newLogUsuario, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogUsuarioControllerApi
     */
    public logUsuarioControllerDeleteById(id: number, options?: AxiosRequestConfig) {
        return LogUsuarioControllerApiFp(this.configuration).logUsuarioControllerDeleteById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {LogUsuarioFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogUsuarioControllerApi
     */
    public logUsuarioControllerFind(filter?: LogUsuarioFilter1, options?: AxiosRequestConfig) {
        return LogUsuarioControllerApiFp(this.configuration).logUsuarioControllerFind(filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {LogUsuarioFilter} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogUsuarioControllerApi
     */
    public logUsuarioControllerFindById(id: number, filter?: LogUsuarioFilter, options?: AxiosRequestConfig) {
        return LogUsuarioControllerApiFp(this.configuration).logUsuarioControllerFindById(id, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {LogUsuario} [logUsuario] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogUsuarioControllerApi
     */
    public logUsuarioControllerReplaceById(id: number, logUsuario?: LogUsuario, options?: AxiosRequestConfig) {
        return LogUsuarioControllerApiFp(this.configuration).logUsuarioControllerReplaceById(id, logUsuario, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {LogUsuarioPartial} [logUsuarioPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogUsuarioControllerApi
     */
    public logUsuarioControllerUpdateAll(where?: { [key: string]: object; }, logUsuarioPartial?: LogUsuarioPartial, options?: AxiosRequestConfig) {
        return LogUsuarioControllerApiFp(this.configuration).logUsuarioControllerUpdateAll(where, logUsuarioPartial, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {LogUsuarioPartial} [logUsuarioPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogUsuarioControllerApi
     */
    public logUsuarioControllerUpdateById(id: number, logUsuarioPartial?: LogUsuarioPartial, options?: AxiosRequestConfig) {
        return LogUsuarioControllerApiFp(this.configuration).logUsuarioControllerUpdateById(id, logUsuarioPartial, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {LogUsuarioFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogUsuarioControllerApi
     */
    public logUsuarioControllerVistaLogUsuarioUsuario(filter?: LogUsuarioFilter1, options?: AxiosRequestConfig) {
        return LogUsuarioControllerApiFp(this.configuration).logUsuarioControllerVistaLogUsuarioUsuario(filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogUsuarioControllerApi
     */
    public logUsuarioControllerVistaLogUsuarioUsuarioCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig) {
        return LogUsuarioControllerApiFp(this.configuration).logUsuarioControllerVistaLogUsuarioUsuarioCount(where, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * PaisControllerApi - axios parameter creator
 * @export
 */
export const PaisControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paisControllerCount: async (where?: { [key: string]: object; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/paises/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NewPais} [newPais] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paisControllerCreate: async (newPais?: NewPais, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/paises`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newPais, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paisControllerDeleteById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('paisControllerDeleteById', 'id', id)
            const localVarPath = `/paises/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {PaisFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paisControllerFind: async (filter?: PaisFilter1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/paises`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {PaisFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paisControllerFindById: async (id: number, filter?: PaisFilter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('paisControllerFindById', 'id', id)
            const localVarPath = `/paises/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {Pais} [pais] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paisControllerReplaceById: async (id: number, pais?: Pais, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('paisControllerReplaceById', 'id', id)
            const localVarPath = `/paises/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(pais, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {PaisPartial} [paisPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paisControllerUpdateAll: async (where?: { [key: string]: object; }, paisPartial?: PaisPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/paises`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(paisPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {PaisPartial} [paisPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paisControllerUpdateById: async (id: number, paisPartial?: PaisPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('paisControllerUpdateById', 'id', id)
            const localVarPath = `/paises/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(paisPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PaisControllerApi - functional programming interface
 * @export
 */
export const PaisControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PaisControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async paisControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.paisControllerCount(where, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {NewPais} [newPais] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async paisControllerCreate(newPais?: NewPais, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Pais>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.paisControllerCreate(newPais, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async paisControllerDeleteById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.paisControllerDeleteById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {PaisFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async paisControllerFind(filter?: PaisFilter1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PaisWithRelations>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.paisControllerFind(filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {PaisFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async paisControllerFindById(id: number, filter?: PaisFilter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaisWithRelations>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.paisControllerFindById(id, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {Pais} [pais] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async paisControllerReplaceById(id: number, pais?: Pais, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.paisControllerReplaceById(id, pais, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {PaisPartial} [paisPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async paisControllerUpdateAll(where?: { [key: string]: object; }, paisPartial?: PaisPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.paisControllerUpdateAll(where, paisPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {PaisPartial} [paisPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async paisControllerUpdateById(id: number, paisPartial?: PaisPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.paisControllerUpdateById(id, paisPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PaisControllerApi - factory interface
 * @export
 */
export const PaisControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PaisControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paisControllerCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.paisControllerCount(where, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NewPais} [newPais] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paisControllerCreate(newPais?: NewPais, options?: any): AxiosPromise<Pais> {
            return localVarFp.paisControllerCreate(newPais, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paisControllerDeleteById(id: number, options?: any): AxiosPromise<any> {
            return localVarFp.paisControllerDeleteById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PaisFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paisControllerFind(filter?: PaisFilter1, options?: any): AxiosPromise<Array<PaisWithRelations>> {
            return localVarFp.paisControllerFind(filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {PaisFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paisControllerFindById(id: number, filter?: PaisFilter, options?: any): AxiosPromise<PaisWithRelations> {
            return localVarFp.paisControllerFindById(id, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {Pais} [pais] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paisControllerReplaceById(id: number, pais?: Pais, options?: any): AxiosPromise<any> {
            return localVarFp.paisControllerReplaceById(id, pais, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {PaisPartial} [paisPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paisControllerUpdateAll(where?: { [key: string]: object; }, paisPartial?: PaisPartial, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.paisControllerUpdateAll(where, paisPartial, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {PaisPartial} [paisPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paisControllerUpdateById(id: number, paisPartial?: PaisPartial, options?: any): AxiosPromise<any> {
            return localVarFp.paisControllerUpdateById(id, paisPartial, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PaisControllerApi - object-oriented interface
 * @export
 * @class PaisControllerApi
 * @extends {BaseAPI}
 */
export class PaisControllerApi extends BaseAPI {
    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaisControllerApi
     */
    public paisControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig) {
        return PaisControllerApiFp(this.configuration).paisControllerCount(where, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NewPais} [newPais] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaisControllerApi
     */
    public paisControllerCreate(newPais?: NewPais, options?: AxiosRequestConfig) {
        return PaisControllerApiFp(this.configuration).paisControllerCreate(newPais, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaisControllerApi
     */
    public paisControllerDeleteById(id: number, options?: AxiosRequestConfig) {
        return PaisControllerApiFp(this.configuration).paisControllerDeleteById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PaisFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaisControllerApi
     */
    public paisControllerFind(filter?: PaisFilter1, options?: AxiosRequestConfig) {
        return PaisControllerApiFp(this.configuration).paisControllerFind(filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {PaisFilter} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaisControllerApi
     */
    public paisControllerFindById(id: number, filter?: PaisFilter, options?: AxiosRequestConfig) {
        return PaisControllerApiFp(this.configuration).paisControllerFindById(id, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {Pais} [pais] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaisControllerApi
     */
    public paisControllerReplaceById(id: number, pais?: Pais, options?: AxiosRequestConfig) {
        return PaisControllerApiFp(this.configuration).paisControllerReplaceById(id, pais, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {PaisPartial} [paisPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaisControllerApi
     */
    public paisControllerUpdateAll(where?: { [key: string]: object; }, paisPartial?: PaisPartial, options?: AxiosRequestConfig) {
        return PaisControllerApiFp(this.configuration).paisControllerUpdateAll(where, paisPartial, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {PaisPartial} [paisPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaisControllerApi
     */
    public paisControllerUpdateById(id: number, paisPartial?: PaisPartial, options?: AxiosRequestConfig) {
        return PaisControllerApiFp(this.configuration).paisControllerUpdateById(id, paisPartial, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * PalletConfiguracionControllerApi - axios parameter creator
 * @export
 */
export const PalletConfiguracionControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        palletConfiguracionControllerCount: async (where?: { [key: string]: object; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/pallet-configuraciones/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NewPalletConfiguracion} [newPalletConfiguracion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        palletConfiguracionControllerCreate: async (newPalletConfiguracion?: NewPalletConfiguracion, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/pallet-configuraciones`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newPalletConfiguracion, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        palletConfiguracionControllerDeleteById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('palletConfiguracionControllerDeleteById', 'id', id)
            const localVarPath = `/pallet-configuraciones/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {PalletConfiguracionFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        palletConfiguracionControllerFind: async (filter?: PalletConfiguracionFilter1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/pallet-configuraciones`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {PalletConfiguracionFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        palletConfiguracionControllerFindById: async (id: number, filter?: PalletConfiguracionFilter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('palletConfiguracionControllerFindById', 'id', id)
            const localVarPath = `/pallet-configuraciones/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {PalletConfiguracion} [palletConfiguracion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        palletConfiguracionControllerReplaceById: async (id: number, palletConfiguracion?: PalletConfiguracion, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('palletConfiguracionControllerReplaceById', 'id', id)
            const localVarPath = `/pallet-configuraciones/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(palletConfiguracion, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {PalletConfiguracionPartial} [palletConfiguracionPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        palletConfiguracionControllerUpdateAll: async (where?: { [key: string]: object; }, palletConfiguracionPartial?: PalletConfiguracionPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/pallet-configuraciones`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(palletConfiguracionPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {PalletConfiguracionPartial} [palletConfiguracionPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        palletConfiguracionControllerUpdateById: async (id: number, palletConfiguracionPartial?: PalletConfiguracionPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('palletConfiguracionControllerUpdateById', 'id', id)
            const localVarPath = `/pallet-configuraciones/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(palletConfiguracionPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PalletConfiguracionControllerApi - functional programming interface
 * @export
 */
export const PalletConfiguracionControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PalletConfiguracionControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async palletConfiguracionControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.palletConfiguracionControllerCount(where, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {NewPalletConfiguracion} [newPalletConfiguracion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async palletConfiguracionControllerCreate(newPalletConfiguracion?: NewPalletConfiguracion, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PalletConfiguracion>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.palletConfiguracionControllerCreate(newPalletConfiguracion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async palletConfiguracionControllerDeleteById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.palletConfiguracionControllerDeleteById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {PalletConfiguracionFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async palletConfiguracionControllerFind(filter?: PalletConfiguracionFilter1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PalletConfiguracionWithRelations>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.palletConfiguracionControllerFind(filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {PalletConfiguracionFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async palletConfiguracionControllerFindById(id: number, filter?: PalletConfiguracionFilter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PalletConfiguracionWithRelations>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.palletConfiguracionControllerFindById(id, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {PalletConfiguracion} [palletConfiguracion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async palletConfiguracionControllerReplaceById(id: number, palletConfiguracion?: PalletConfiguracion, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.palletConfiguracionControllerReplaceById(id, palletConfiguracion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {PalletConfiguracionPartial} [palletConfiguracionPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async palletConfiguracionControllerUpdateAll(where?: { [key: string]: object; }, palletConfiguracionPartial?: PalletConfiguracionPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.palletConfiguracionControllerUpdateAll(where, palletConfiguracionPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {PalletConfiguracionPartial} [palletConfiguracionPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async palletConfiguracionControllerUpdateById(id: number, palletConfiguracionPartial?: PalletConfiguracionPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.palletConfiguracionControllerUpdateById(id, palletConfiguracionPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PalletConfiguracionControllerApi - factory interface
 * @export
 */
export const PalletConfiguracionControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PalletConfiguracionControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        palletConfiguracionControllerCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.palletConfiguracionControllerCount(where, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NewPalletConfiguracion} [newPalletConfiguracion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        palletConfiguracionControllerCreate(newPalletConfiguracion?: NewPalletConfiguracion, options?: any): AxiosPromise<PalletConfiguracion> {
            return localVarFp.palletConfiguracionControllerCreate(newPalletConfiguracion, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        palletConfiguracionControllerDeleteById(id: number, options?: any): AxiosPromise<any> {
            return localVarFp.palletConfiguracionControllerDeleteById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PalletConfiguracionFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        palletConfiguracionControllerFind(filter?: PalletConfiguracionFilter1, options?: any): AxiosPromise<Array<PalletConfiguracionWithRelations>> {
            return localVarFp.palletConfiguracionControllerFind(filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {PalletConfiguracionFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        palletConfiguracionControllerFindById(id: number, filter?: PalletConfiguracionFilter, options?: any): AxiosPromise<PalletConfiguracionWithRelations> {
            return localVarFp.palletConfiguracionControllerFindById(id, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {PalletConfiguracion} [palletConfiguracion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        palletConfiguracionControllerReplaceById(id: number, palletConfiguracion?: PalletConfiguracion, options?: any): AxiosPromise<any> {
            return localVarFp.palletConfiguracionControllerReplaceById(id, palletConfiguracion, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {PalletConfiguracionPartial} [palletConfiguracionPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        palletConfiguracionControllerUpdateAll(where?: { [key: string]: object; }, palletConfiguracionPartial?: PalletConfiguracionPartial, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.palletConfiguracionControllerUpdateAll(where, palletConfiguracionPartial, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {PalletConfiguracionPartial} [palletConfiguracionPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        palletConfiguracionControllerUpdateById(id: number, palletConfiguracionPartial?: PalletConfiguracionPartial, options?: any): AxiosPromise<any> {
            return localVarFp.palletConfiguracionControllerUpdateById(id, palletConfiguracionPartial, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PalletConfiguracionControllerApi - object-oriented interface
 * @export
 * @class PalletConfiguracionControllerApi
 * @extends {BaseAPI}
 */
export class PalletConfiguracionControllerApi extends BaseAPI {
    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PalletConfiguracionControllerApi
     */
    public palletConfiguracionControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig) {
        return PalletConfiguracionControllerApiFp(this.configuration).palletConfiguracionControllerCount(where, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NewPalletConfiguracion} [newPalletConfiguracion] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PalletConfiguracionControllerApi
     */
    public palletConfiguracionControllerCreate(newPalletConfiguracion?: NewPalletConfiguracion, options?: AxiosRequestConfig) {
        return PalletConfiguracionControllerApiFp(this.configuration).palletConfiguracionControllerCreate(newPalletConfiguracion, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PalletConfiguracionControllerApi
     */
    public palletConfiguracionControllerDeleteById(id: number, options?: AxiosRequestConfig) {
        return PalletConfiguracionControllerApiFp(this.configuration).palletConfiguracionControllerDeleteById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PalletConfiguracionFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PalletConfiguracionControllerApi
     */
    public palletConfiguracionControllerFind(filter?: PalletConfiguracionFilter1, options?: AxiosRequestConfig) {
        return PalletConfiguracionControllerApiFp(this.configuration).palletConfiguracionControllerFind(filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {PalletConfiguracionFilter} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PalletConfiguracionControllerApi
     */
    public palletConfiguracionControllerFindById(id: number, filter?: PalletConfiguracionFilter, options?: AxiosRequestConfig) {
        return PalletConfiguracionControllerApiFp(this.configuration).palletConfiguracionControllerFindById(id, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {PalletConfiguracion} [palletConfiguracion] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PalletConfiguracionControllerApi
     */
    public palletConfiguracionControllerReplaceById(id: number, palletConfiguracion?: PalletConfiguracion, options?: AxiosRequestConfig) {
        return PalletConfiguracionControllerApiFp(this.configuration).palletConfiguracionControllerReplaceById(id, palletConfiguracion, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {PalletConfiguracionPartial} [palletConfiguracionPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PalletConfiguracionControllerApi
     */
    public palletConfiguracionControllerUpdateAll(where?: { [key: string]: object; }, palletConfiguracionPartial?: PalletConfiguracionPartial, options?: AxiosRequestConfig) {
        return PalletConfiguracionControllerApiFp(this.configuration).palletConfiguracionControllerUpdateAll(where, palletConfiguracionPartial, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {PalletConfiguracionPartial} [palletConfiguracionPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PalletConfiguracionControllerApi
     */
    public palletConfiguracionControllerUpdateById(id: number, palletConfiguracionPartial?: PalletConfiguracionPartial, options?: AxiosRequestConfig) {
        return PalletConfiguracionControllerApiFp(this.configuration).palletConfiguracionControllerUpdateById(id, palletConfiguracionPartial, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * PalletConfiguracionGeneralControllerApi - axios parameter creator
 * @export
 */
export const PalletConfiguracionGeneralControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        palletConfiguracionGeneralControllerCount: async (where?: { [key: string]: object; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/pallet-configuracion-generales/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NewPalletConfiguracionGeneral} [newPalletConfiguracionGeneral] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        palletConfiguracionGeneralControllerCreate: async (newPalletConfiguracionGeneral?: NewPalletConfiguracionGeneral, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/pallet-configuracion-generales`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newPalletConfiguracionGeneral, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        palletConfiguracionGeneralControllerDeleteById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('palletConfiguracionGeneralControllerDeleteById', 'id', id)
            const localVarPath = `/pallet-configuracion-generales/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {PalletConfiguracionGeneralFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        palletConfiguracionGeneralControllerFind: async (filter?: PalletConfiguracionGeneralFilter1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/pallet-configuracion-generales`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {PalletConfiguracionGeneralFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        palletConfiguracionGeneralControllerFindById: async (id: number, filter?: PalletConfiguracionGeneralFilter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('palletConfiguracionGeneralControllerFindById', 'id', id)
            const localVarPath = `/pallet-configuracion-generales/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {PalletConfiguracionGeneral} [palletConfiguracionGeneral] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        palletConfiguracionGeneralControllerReplaceById: async (id: number, palletConfiguracionGeneral?: PalletConfiguracionGeneral, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('palletConfiguracionGeneralControllerReplaceById', 'id', id)
            const localVarPath = `/pallet-configuracion-generales/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(palletConfiguracionGeneral, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {PalletConfiguracionGeneralPartial} [palletConfiguracionGeneralPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        palletConfiguracionGeneralControllerUpdateAll: async (where?: { [key: string]: object; }, palletConfiguracionGeneralPartial?: PalletConfiguracionGeneralPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/pallet-configuracion-generales`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(palletConfiguracionGeneralPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {PalletConfiguracionGeneralPartial} [palletConfiguracionGeneralPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        palletConfiguracionGeneralControllerUpdateById: async (id: number, palletConfiguracionGeneralPartial?: PalletConfiguracionGeneralPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('palletConfiguracionGeneralControllerUpdateById', 'id', id)
            const localVarPath = `/pallet-configuracion-generales/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(palletConfiguracionGeneralPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PalletConfiguracionGeneralControllerApi - functional programming interface
 * @export
 */
export const PalletConfiguracionGeneralControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PalletConfiguracionGeneralControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async palletConfiguracionGeneralControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.palletConfiguracionGeneralControllerCount(where, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {NewPalletConfiguracionGeneral} [newPalletConfiguracionGeneral] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async palletConfiguracionGeneralControllerCreate(newPalletConfiguracionGeneral?: NewPalletConfiguracionGeneral, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PalletConfiguracionGeneral>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.palletConfiguracionGeneralControllerCreate(newPalletConfiguracionGeneral, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async palletConfiguracionGeneralControllerDeleteById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.palletConfiguracionGeneralControllerDeleteById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {PalletConfiguracionGeneralFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async palletConfiguracionGeneralControllerFind(filter?: PalletConfiguracionGeneralFilter1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PalletConfiguracionGeneralWithRelations>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.palletConfiguracionGeneralControllerFind(filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {PalletConfiguracionGeneralFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async palletConfiguracionGeneralControllerFindById(id: number, filter?: PalletConfiguracionGeneralFilter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PalletConfiguracionGeneralWithRelations>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.palletConfiguracionGeneralControllerFindById(id, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {PalletConfiguracionGeneral} [palletConfiguracionGeneral] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async palletConfiguracionGeneralControllerReplaceById(id: number, palletConfiguracionGeneral?: PalletConfiguracionGeneral, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.palletConfiguracionGeneralControllerReplaceById(id, palletConfiguracionGeneral, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {PalletConfiguracionGeneralPartial} [palletConfiguracionGeneralPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async palletConfiguracionGeneralControllerUpdateAll(where?: { [key: string]: object; }, palletConfiguracionGeneralPartial?: PalletConfiguracionGeneralPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.palletConfiguracionGeneralControllerUpdateAll(where, palletConfiguracionGeneralPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {PalletConfiguracionGeneralPartial} [palletConfiguracionGeneralPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async palletConfiguracionGeneralControllerUpdateById(id: number, palletConfiguracionGeneralPartial?: PalletConfiguracionGeneralPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.palletConfiguracionGeneralControllerUpdateById(id, palletConfiguracionGeneralPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PalletConfiguracionGeneralControllerApi - factory interface
 * @export
 */
export const PalletConfiguracionGeneralControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PalletConfiguracionGeneralControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        palletConfiguracionGeneralControllerCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.palletConfiguracionGeneralControllerCount(where, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NewPalletConfiguracionGeneral} [newPalletConfiguracionGeneral] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        palletConfiguracionGeneralControllerCreate(newPalletConfiguracionGeneral?: NewPalletConfiguracionGeneral, options?: any): AxiosPromise<PalletConfiguracionGeneral> {
            return localVarFp.palletConfiguracionGeneralControllerCreate(newPalletConfiguracionGeneral, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        palletConfiguracionGeneralControllerDeleteById(id: number, options?: any): AxiosPromise<any> {
            return localVarFp.palletConfiguracionGeneralControllerDeleteById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PalletConfiguracionGeneralFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        palletConfiguracionGeneralControllerFind(filter?: PalletConfiguracionGeneralFilter1, options?: any): AxiosPromise<Array<PalletConfiguracionGeneralWithRelations>> {
            return localVarFp.palletConfiguracionGeneralControllerFind(filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {PalletConfiguracionGeneralFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        palletConfiguracionGeneralControllerFindById(id: number, filter?: PalletConfiguracionGeneralFilter, options?: any): AxiosPromise<PalletConfiguracionGeneralWithRelations> {
            return localVarFp.palletConfiguracionGeneralControllerFindById(id, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {PalletConfiguracionGeneral} [palletConfiguracionGeneral] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        palletConfiguracionGeneralControllerReplaceById(id: number, palletConfiguracionGeneral?: PalletConfiguracionGeneral, options?: any): AxiosPromise<any> {
            return localVarFp.palletConfiguracionGeneralControllerReplaceById(id, palletConfiguracionGeneral, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {PalletConfiguracionGeneralPartial} [palletConfiguracionGeneralPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        palletConfiguracionGeneralControllerUpdateAll(where?: { [key: string]: object; }, palletConfiguracionGeneralPartial?: PalletConfiguracionGeneralPartial, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.palletConfiguracionGeneralControllerUpdateAll(where, palletConfiguracionGeneralPartial, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {PalletConfiguracionGeneralPartial} [palletConfiguracionGeneralPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        palletConfiguracionGeneralControllerUpdateById(id: number, palletConfiguracionGeneralPartial?: PalletConfiguracionGeneralPartial, options?: any): AxiosPromise<any> {
            return localVarFp.palletConfiguracionGeneralControllerUpdateById(id, palletConfiguracionGeneralPartial, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PalletConfiguracionGeneralControllerApi - object-oriented interface
 * @export
 * @class PalletConfiguracionGeneralControllerApi
 * @extends {BaseAPI}
 */
export class PalletConfiguracionGeneralControllerApi extends BaseAPI {
    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PalletConfiguracionGeneralControllerApi
     */
    public palletConfiguracionGeneralControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig) {
        return PalletConfiguracionGeneralControllerApiFp(this.configuration).palletConfiguracionGeneralControllerCount(where, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NewPalletConfiguracionGeneral} [newPalletConfiguracionGeneral] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PalletConfiguracionGeneralControllerApi
     */
    public palletConfiguracionGeneralControllerCreate(newPalletConfiguracionGeneral?: NewPalletConfiguracionGeneral, options?: AxiosRequestConfig) {
        return PalletConfiguracionGeneralControllerApiFp(this.configuration).palletConfiguracionGeneralControllerCreate(newPalletConfiguracionGeneral, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PalletConfiguracionGeneralControllerApi
     */
    public palletConfiguracionGeneralControllerDeleteById(id: number, options?: AxiosRequestConfig) {
        return PalletConfiguracionGeneralControllerApiFp(this.configuration).palletConfiguracionGeneralControllerDeleteById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PalletConfiguracionGeneralFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PalletConfiguracionGeneralControllerApi
     */
    public palletConfiguracionGeneralControllerFind(filter?: PalletConfiguracionGeneralFilter1, options?: AxiosRequestConfig) {
        return PalletConfiguracionGeneralControllerApiFp(this.configuration).palletConfiguracionGeneralControllerFind(filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {PalletConfiguracionGeneralFilter} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PalletConfiguracionGeneralControllerApi
     */
    public palletConfiguracionGeneralControllerFindById(id: number, filter?: PalletConfiguracionGeneralFilter, options?: AxiosRequestConfig) {
        return PalletConfiguracionGeneralControllerApiFp(this.configuration).palletConfiguracionGeneralControllerFindById(id, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {PalletConfiguracionGeneral} [palletConfiguracionGeneral] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PalletConfiguracionGeneralControllerApi
     */
    public palletConfiguracionGeneralControllerReplaceById(id: number, palletConfiguracionGeneral?: PalletConfiguracionGeneral, options?: AxiosRequestConfig) {
        return PalletConfiguracionGeneralControllerApiFp(this.configuration).palletConfiguracionGeneralControllerReplaceById(id, palletConfiguracionGeneral, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {PalletConfiguracionGeneralPartial} [palletConfiguracionGeneralPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PalletConfiguracionGeneralControllerApi
     */
    public palletConfiguracionGeneralControllerUpdateAll(where?: { [key: string]: object; }, palletConfiguracionGeneralPartial?: PalletConfiguracionGeneralPartial, options?: AxiosRequestConfig) {
        return PalletConfiguracionGeneralControllerApiFp(this.configuration).palletConfiguracionGeneralControllerUpdateAll(where, palletConfiguracionGeneralPartial, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {PalletConfiguracionGeneralPartial} [palletConfiguracionGeneralPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PalletConfiguracionGeneralControllerApi
     */
    public palletConfiguracionGeneralControllerUpdateById(id: number, palletConfiguracionGeneralPartial?: PalletConfiguracionGeneralPartial, options?: AxiosRequestConfig) {
        return PalletConfiguracionGeneralControllerApiFp(this.configuration).palletConfiguracionGeneralControllerUpdateById(id, palletConfiguracionGeneralPartial, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * PalletControllerApi - axios parameter creator
 * @export
 */
export const PalletControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        palletControllerCount: async (where?: { [key: string]: object; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/pallets/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NewPallet} [newPallet] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        palletControllerCreate: async (newPallet?: NewPallet, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/pallets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newPallet, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        palletControllerDeleteById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('palletControllerDeleteById', 'id', id)
            const localVarPath = `/pallets/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {PalletFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        palletControllerFind: async (filter?: PalletFilter1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/pallets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {PalletFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        palletControllerFindById: async (id: number, filter?: PalletFilter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('palletControllerFindById', 'id', id)
            const localVarPath = `/pallets/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {Pallet} [pallet] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        palletControllerReplaceById: async (id: number, pallet?: Pallet, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('palletControllerReplaceById', 'id', id)
            const localVarPath = `/pallets/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(pallet, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {PalletPartial} [palletPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        palletControllerUpdateAll: async (where?: { [key: string]: object; }, palletPartial?: PalletPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/pallets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(palletPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {PalletPartial} [palletPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        palletControllerUpdateById: async (id: number, palletPartial?: PalletPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('palletControllerUpdateById', 'id', id)
            const localVarPath = `/pallets/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(palletPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PalletControllerApi - functional programming interface
 * @export
 */
export const PalletControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PalletControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async palletControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.palletControllerCount(where, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {NewPallet} [newPallet] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async palletControllerCreate(newPallet?: NewPallet, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Pallet>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.palletControllerCreate(newPallet, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async palletControllerDeleteById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.palletControllerDeleteById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {PalletFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async palletControllerFind(filter?: PalletFilter1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PalletWithRelations>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.palletControllerFind(filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {PalletFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async palletControllerFindById(id: number, filter?: PalletFilter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PalletWithRelations>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.palletControllerFindById(id, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {Pallet} [pallet] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async palletControllerReplaceById(id: number, pallet?: Pallet, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.palletControllerReplaceById(id, pallet, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {PalletPartial} [palletPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async palletControllerUpdateAll(where?: { [key: string]: object; }, palletPartial?: PalletPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.palletControllerUpdateAll(where, palletPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {PalletPartial} [palletPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async palletControllerUpdateById(id: number, palletPartial?: PalletPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.palletControllerUpdateById(id, palletPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PalletControllerApi - factory interface
 * @export
 */
export const PalletControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PalletControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        palletControllerCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.palletControllerCount(where, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NewPallet} [newPallet] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        palletControllerCreate(newPallet?: NewPallet, options?: any): AxiosPromise<Pallet> {
            return localVarFp.palletControllerCreate(newPallet, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        palletControllerDeleteById(id: number, options?: any): AxiosPromise<any> {
            return localVarFp.palletControllerDeleteById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PalletFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        palletControllerFind(filter?: PalletFilter1, options?: any): AxiosPromise<Array<PalletWithRelations>> {
            return localVarFp.palletControllerFind(filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {PalletFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        palletControllerFindById(id: number, filter?: PalletFilter, options?: any): AxiosPromise<PalletWithRelations> {
            return localVarFp.palletControllerFindById(id, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {Pallet} [pallet] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        palletControllerReplaceById(id: number, pallet?: Pallet, options?: any): AxiosPromise<any> {
            return localVarFp.palletControllerReplaceById(id, pallet, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {PalletPartial} [palletPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        palletControllerUpdateAll(where?: { [key: string]: object; }, palletPartial?: PalletPartial, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.palletControllerUpdateAll(where, palletPartial, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {PalletPartial} [palletPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        palletControllerUpdateById(id: number, palletPartial?: PalletPartial, options?: any): AxiosPromise<any> {
            return localVarFp.palletControllerUpdateById(id, palletPartial, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PalletControllerApi - object-oriented interface
 * @export
 * @class PalletControllerApi
 * @extends {BaseAPI}
 */
export class PalletControllerApi extends BaseAPI {
    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PalletControllerApi
     */
    public palletControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig) {
        return PalletControllerApiFp(this.configuration).palletControllerCount(where, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NewPallet} [newPallet] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PalletControllerApi
     */
    public palletControllerCreate(newPallet?: NewPallet, options?: AxiosRequestConfig) {
        return PalletControllerApiFp(this.configuration).palletControllerCreate(newPallet, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PalletControllerApi
     */
    public palletControllerDeleteById(id: number, options?: AxiosRequestConfig) {
        return PalletControllerApiFp(this.configuration).palletControllerDeleteById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PalletFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PalletControllerApi
     */
    public palletControllerFind(filter?: PalletFilter1, options?: AxiosRequestConfig) {
        return PalletControllerApiFp(this.configuration).palletControllerFind(filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {PalletFilter} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PalletControllerApi
     */
    public palletControllerFindById(id: number, filter?: PalletFilter, options?: AxiosRequestConfig) {
        return PalletControllerApiFp(this.configuration).palletControllerFindById(id, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {Pallet} [pallet] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PalletControllerApi
     */
    public palletControllerReplaceById(id: number, pallet?: Pallet, options?: AxiosRequestConfig) {
        return PalletControllerApiFp(this.configuration).palletControllerReplaceById(id, pallet, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {PalletPartial} [palletPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PalletControllerApi
     */
    public palletControllerUpdateAll(where?: { [key: string]: object; }, palletPartial?: PalletPartial, options?: AxiosRequestConfig) {
        return PalletControllerApiFp(this.configuration).palletControllerUpdateAll(where, palletPartial, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {PalletPartial} [palletPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PalletControllerApi
     */
    public palletControllerUpdateById(id: number, palletPartial?: PalletPartial, options?: AxiosRequestConfig) {
        return PalletControllerApiFp(this.configuration).palletControllerUpdateById(id, palletPartial, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * PalletsMovementsControllerApi - axios parameter creator
 * @export
 */
export const PalletsMovementsControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        palletsMovementsControllerCount: async (where?: { [key: string]: object; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/pallets-movements/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Array<NewPalletsMovements>} [newPalletsMovements] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        palletsMovementsControllerCreate: async (newPalletsMovements?: Array<NewPalletsMovements>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/pallets-movements`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newPalletsMovements, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        palletsMovementsControllerDeleteById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('palletsMovementsControllerDeleteById', 'id', id)
            const localVarPath = `/pallets-movements/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {PalletsMovementsFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        palletsMovementsControllerFind: async (filter?: PalletsMovementsFilter1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/pallets-movements`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {PalletsMovementsFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        palletsMovementsControllerFindById: async (id: number, filter?: PalletsMovementsFilter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('palletsMovementsControllerFindById', 'id', id)
            const localVarPath = `/pallets-movements/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {PalletsMovements} [palletsMovements] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        palletsMovementsControllerReplaceById: async (id: number, palletsMovements?: PalletsMovements, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('palletsMovementsControllerReplaceById', 'id', id)
            const localVarPath = `/pallets-movements/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(palletsMovements, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {PalletsMovementsPartial} [palletsMovementsPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        palletsMovementsControllerUpdateAll: async (where?: { [key: string]: object; }, palletsMovementsPartial?: PalletsMovementsPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/pallets-movements`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(palletsMovementsPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {PalletsMovementsPartial} [palletsMovementsPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        palletsMovementsControllerUpdateById: async (id: number, palletsMovementsPartial?: PalletsMovementsPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('palletsMovementsControllerUpdateById', 'id', id)
            const localVarPath = `/pallets-movements/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(palletsMovementsPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PalletsMovementsControllerApi - functional programming interface
 * @export
 */
export const PalletsMovementsControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PalletsMovementsControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async palletsMovementsControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.palletsMovementsControllerCount(where, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {Array<NewPalletsMovements>} [newPalletsMovements] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async palletsMovementsControllerCreate(newPalletsMovements?: Array<NewPalletsMovements>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PalletsMovements>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.palletsMovementsControllerCreate(newPalletsMovements, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async palletsMovementsControllerDeleteById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.palletsMovementsControllerDeleteById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {PalletsMovementsFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async palletsMovementsControllerFind(filter?: PalletsMovementsFilter1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PalletsMovementsWithRelations>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.palletsMovementsControllerFind(filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {PalletsMovementsFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async palletsMovementsControllerFindById(id: number, filter?: PalletsMovementsFilter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PalletsMovementsWithRelations>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.palletsMovementsControllerFindById(id, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {PalletsMovements} [palletsMovements] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async palletsMovementsControllerReplaceById(id: number, palletsMovements?: PalletsMovements, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.palletsMovementsControllerReplaceById(id, palletsMovements, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {PalletsMovementsPartial} [palletsMovementsPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async palletsMovementsControllerUpdateAll(where?: { [key: string]: object; }, palletsMovementsPartial?: PalletsMovementsPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.palletsMovementsControllerUpdateAll(where, palletsMovementsPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {PalletsMovementsPartial} [palletsMovementsPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async palletsMovementsControllerUpdateById(id: number, palletsMovementsPartial?: PalletsMovementsPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.palletsMovementsControllerUpdateById(id, palletsMovementsPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PalletsMovementsControllerApi - factory interface
 * @export
 */
export const PalletsMovementsControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PalletsMovementsControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        palletsMovementsControllerCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.palletsMovementsControllerCount(where, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Array<NewPalletsMovements>} [newPalletsMovements] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        palletsMovementsControllerCreate(newPalletsMovements?: Array<NewPalletsMovements>, options?: any): AxiosPromise<Array<PalletsMovements>> {
            return localVarFp.palletsMovementsControllerCreate(newPalletsMovements, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        palletsMovementsControllerDeleteById(id: number, options?: any): AxiosPromise<any> {
            return localVarFp.palletsMovementsControllerDeleteById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PalletsMovementsFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        palletsMovementsControllerFind(filter?: PalletsMovementsFilter1, options?: any): AxiosPromise<Array<PalletsMovementsWithRelations>> {
            return localVarFp.palletsMovementsControllerFind(filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {PalletsMovementsFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        palletsMovementsControllerFindById(id: number, filter?: PalletsMovementsFilter, options?: any): AxiosPromise<PalletsMovementsWithRelations> {
            return localVarFp.palletsMovementsControllerFindById(id, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {PalletsMovements} [palletsMovements] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        palletsMovementsControllerReplaceById(id: number, palletsMovements?: PalletsMovements, options?: any): AxiosPromise<any> {
            return localVarFp.palletsMovementsControllerReplaceById(id, palletsMovements, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {PalletsMovementsPartial} [palletsMovementsPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        palletsMovementsControllerUpdateAll(where?: { [key: string]: object; }, palletsMovementsPartial?: PalletsMovementsPartial, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.palletsMovementsControllerUpdateAll(where, palletsMovementsPartial, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {PalletsMovementsPartial} [palletsMovementsPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        palletsMovementsControllerUpdateById(id: number, palletsMovementsPartial?: PalletsMovementsPartial, options?: any): AxiosPromise<any> {
            return localVarFp.palletsMovementsControllerUpdateById(id, palletsMovementsPartial, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PalletsMovementsControllerApi - object-oriented interface
 * @export
 * @class PalletsMovementsControllerApi
 * @extends {BaseAPI}
 */
export class PalletsMovementsControllerApi extends BaseAPI {
    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PalletsMovementsControllerApi
     */
    public palletsMovementsControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig) {
        return PalletsMovementsControllerApiFp(this.configuration).palletsMovementsControllerCount(where, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Array<NewPalletsMovements>} [newPalletsMovements] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PalletsMovementsControllerApi
     */
    public palletsMovementsControllerCreate(newPalletsMovements?: Array<NewPalletsMovements>, options?: AxiosRequestConfig) {
        return PalletsMovementsControllerApiFp(this.configuration).palletsMovementsControllerCreate(newPalletsMovements, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PalletsMovementsControllerApi
     */
    public palletsMovementsControllerDeleteById(id: number, options?: AxiosRequestConfig) {
        return PalletsMovementsControllerApiFp(this.configuration).palletsMovementsControllerDeleteById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PalletsMovementsFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PalletsMovementsControllerApi
     */
    public palletsMovementsControllerFind(filter?: PalletsMovementsFilter1, options?: AxiosRequestConfig) {
        return PalletsMovementsControllerApiFp(this.configuration).palletsMovementsControllerFind(filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {PalletsMovementsFilter} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PalletsMovementsControllerApi
     */
    public palletsMovementsControllerFindById(id: number, filter?: PalletsMovementsFilter, options?: AxiosRequestConfig) {
        return PalletsMovementsControllerApiFp(this.configuration).palletsMovementsControllerFindById(id, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {PalletsMovements} [palletsMovements] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PalletsMovementsControllerApi
     */
    public palletsMovementsControllerReplaceById(id: number, palletsMovements?: PalletsMovements, options?: AxiosRequestConfig) {
        return PalletsMovementsControllerApiFp(this.configuration).palletsMovementsControllerReplaceById(id, palletsMovements, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {PalletsMovementsPartial} [palletsMovementsPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PalletsMovementsControllerApi
     */
    public palletsMovementsControllerUpdateAll(where?: { [key: string]: object; }, palletsMovementsPartial?: PalletsMovementsPartial, options?: AxiosRequestConfig) {
        return PalletsMovementsControllerApiFp(this.configuration).palletsMovementsControllerUpdateAll(where, palletsMovementsPartial, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {PalletsMovementsPartial} [palletsMovementsPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PalletsMovementsControllerApi
     */
    public palletsMovementsControllerUpdateById(id: number, palletsMovementsPartial?: PalletsMovementsPartial, options?: AxiosRequestConfig) {
        return PalletsMovementsControllerApiFp(this.configuration).palletsMovementsControllerUpdateById(id, palletsMovementsPartial, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ParametrosPalletsControllerApi - axios parameter creator
 * @export
 */
export const ParametrosPalletsControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        parametrosPalletsControllerCount: async (where?: { [key: string]: object; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/parametros-pallets/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NewParametrosPallets} [newParametrosPallets] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        parametrosPalletsControllerCreate: async (newParametrosPallets?: NewParametrosPallets, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/parametros-pallets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newParametrosPallets, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        parametrosPalletsControllerDeleteById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('parametrosPalletsControllerDeleteById', 'id', id)
            const localVarPath = `/parametros-pallets/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ParametrosPalletsFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        parametrosPalletsControllerFind: async (filter?: ParametrosPalletsFilter1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/parametros-pallets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {ParametrosPalletsFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        parametrosPalletsControllerFindById: async (id: number, filter?: ParametrosPalletsFilter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('parametrosPalletsControllerFindById', 'id', id)
            const localVarPath = `/parametros-pallets/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {ParametrosPallets} [parametrosPallets] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        parametrosPalletsControllerReplaceById: async (id: number, parametrosPallets?: ParametrosPallets, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('parametrosPalletsControllerReplaceById', 'id', id)
            const localVarPath = `/parametros-pallets/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(parametrosPallets, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {ParametrosPalletsPartial} [parametrosPalletsPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        parametrosPalletsControllerUpdateAll: async (where?: { [key: string]: object; }, parametrosPalletsPartial?: ParametrosPalletsPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/parametros-pallets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(parametrosPalletsPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {ParametrosPalletsPartial} [parametrosPalletsPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        parametrosPalletsControllerUpdateById: async (id: number, parametrosPalletsPartial?: ParametrosPalletsPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('parametrosPalletsControllerUpdateById', 'id', id)
            const localVarPath = `/parametros-pallets/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(parametrosPalletsPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ParametrosPalletsControllerApi - functional programming interface
 * @export
 */
export const ParametrosPalletsControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ParametrosPalletsControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async parametrosPalletsControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.parametrosPalletsControllerCount(where, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {NewParametrosPallets} [newParametrosPallets] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async parametrosPalletsControllerCreate(newParametrosPallets?: NewParametrosPallets, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ParametrosPallets>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.parametrosPalletsControllerCreate(newParametrosPallets, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async parametrosPalletsControllerDeleteById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.parametrosPalletsControllerDeleteById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ParametrosPalletsFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async parametrosPalletsControllerFind(filter?: ParametrosPalletsFilter1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ParametrosPalletsWithRelations>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.parametrosPalletsControllerFind(filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {ParametrosPalletsFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async parametrosPalletsControllerFindById(id: number, filter?: ParametrosPalletsFilter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ParametrosPalletsWithRelations>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.parametrosPalletsControllerFindById(id, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {ParametrosPallets} [parametrosPallets] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async parametrosPalletsControllerReplaceById(id: number, parametrosPallets?: ParametrosPallets, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.parametrosPalletsControllerReplaceById(id, parametrosPallets, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {ParametrosPalletsPartial} [parametrosPalletsPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async parametrosPalletsControllerUpdateAll(where?: { [key: string]: object; }, parametrosPalletsPartial?: ParametrosPalletsPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.parametrosPalletsControllerUpdateAll(where, parametrosPalletsPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {ParametrosPalletsPartial} [parametrosPalletsPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async parametrosPalletsControllerUpdateById(id: number, parametrosPalletsPartial?: ParametrosPalletsPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.parametrosPalletsControllerUpdateById(id, parametrosPalletsPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ParametrosPalletsControllerApi - factory interface
 * @export
 */
export const ParametrosPalletsControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ParametrosPalletsControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        parametrosPalletsControllerCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.parametrosPalletsControllerCount(where, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NewParametrosPallets} [newParametrosPallets] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        parametrosPalletsControllerCreate(newParametrosPallets?: NewParametrosPallets, options?: any): AxiosPromise<ParametrosPallets> {
            return localVarFp.parametrosPalletsControllerCreate(newParametrosPallets, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        parametrosPalletsControllerDeleteById(id: number, options?: any): AxiosPromise<any> {
            return localVarFp.parametrosPalletsControllerDeleteById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ParametrosPalletsFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        parametrosPalletsControllerFind(filter?: ParametrosPalletsFilter1, options?: any): AxiosPromise<Array<ParametrosPalletsWithRelations>> {
            return localVarFp.parametrosPalletsControllerFind(filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {ParametrosPalletsFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        parametrosPalletsControllerFindById(id: number, filter?: ParametrosPalletsFilter, options?: any): AxiosPromise<ParametrosPalletsWithRelations> {
            return localVarFp.parametrosPalletsControllerFindById(id, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {ParametrosPallets} [parametrosPallets] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        parametrosPalletsControllerReplaceById(id: number, parametrosPallets?: ParametrosPallets, options?: any): AxiosPromise<any> {
            return localVarFp.parametrosPalletsControllerReplaceById(id, parametrosPallets, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {ParametrosPalletsPartial} [parametrosPalletsPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        parametrosPalletsControllerUpdateAll(where?: { [key: string]: object; }, parametrosPalletsPartial?: ParametrosPalletsPartial, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.parametrosPalletsControllerUpdateAll(where, parametrosPalletsPartial, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {ParametrosPalletsPartial} [parametrosPalletsPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        parametrosPalletsControllerUpdateById(id: number, parametrosPalletsPartial?: ParametrosPalletsPartial, options?: any): AxiosPromise<any> {
            return localVarFp.parametrosPalletsControllerUpdateById(id, parametrosPalletsPartial, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ParametrosPalletsControllerApi - object-oriented interface
 * @export
 * @class ParametrosPalletsControllerApi
 * @extends {BaseAPI}
 */
export class ParametrosPalletsControllerApi extends BaseAPI {
    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ParametrosPalletsControllerApi
     */
    public parametrosPalletsControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig) {
        return ParametrosPalletsControllerApiFp(this.configuration).parametrosPalletsControllerCount(where, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NewParametrosPallets} [newParametrosPallets] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ParametrosPalletsControllerApi
     */
    public parametrosPalletsControllerCreate(newParametrosPallets?: NewParametrosPallets, options?: AxiosRequestConfig) {
        return ParametrosPalletsControllerApiFp(this.configuration).parametrosPalletsControllerCreate(newParametrosPallets, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ParametrosPalletsControllerApi
     */
    public parametrosPalletsControllerDeleteById(id: number, options?: AxiosRequestConfig) {
        return ParametrosPalletsControllerApiFp(this.configuration).parametrosPalletsControllerDeleteById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ParametrosPalletsFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ParametrosPalletsControllerApi
     */
    public parametrosPalletsControllerFind(filter?: ParametrosPalletsFilter1, options?: AxiosRequestConfig) {
        return ParametrosPalletsControllerApiFp(this.configuration).parametrosPalletsControllerFind(filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {ParametrosPalletsFilter} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ParametrosPalletsControllerApi
     */
    public parametrosPalletsControllerFindById(id: number, filter?: ParametrosPalletsFilter, options?: AxiosRequestConfig) {
        return ParametrosPalletsControllerApiFp(this.configuration).parametrosPalletsControllerFindById(id, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {ParametrosPallets} [parametrosPallets] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ParametrosPalletsControllerApi
     */
    public parametrosPalletsControllerReplaceById(id: number, parametrosPallets?: ParametrosPallets, options?: AxiosRequestConfig) {
        return ParametrosPalletsControllerApiFp(this.configuration).parametrosPalletsControllerReplaceById(id, parametrosPallets, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {ParametrosPalletsPartial} [parametrosPalletsPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ParametrosPalletsControllerApi
     */
    public parametrosPalletsControllerUpdateAll(where?: { [key: string]: object; }, parametrosPalletsPartial?: ParametrosPalletsPartial, options?: AxiosRequestConfig) {
        return ParametrosPalletsControllerApiFp(this.configuration).parametrosPalletsControllerUpdateAll(where, parametrosPalletsPartial, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {ParametrosPalletsPartial} [parametrosPalletsPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ParametrosPalletsControllerApi
     */
    public parametrosPalletsControllerUpdateById(id: number, parametrosPalletsPartial?: ParametrosPalletsPartial, options?: AxiosRequestConfig) {
        return ParametrosPalletsControllerApiFp(this.configuration).parametrosPalletsControllerUpdateById(id, parametrosPalletsPartial, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ParametrosPalletsDetalleControllerApi - axios parameter creator
 * @export
 */
export const ParametrosPalletsDetalleControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        parametrosPalletsDetalleControllerCount: async (where?: { [key: string]: object; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/parametros-pallets-detalles/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NewParametrosPalletsDetalle} [newParametrosPalletsDetalle] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        parametrosPalletsDetalleControllerCreate: async (newParametrosPalletsDetalle?: NewParametrosPalletsDetalle, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/parametros-pallets-detalles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newParametrosPalletsDetalle, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        parametrosPalletsDetalleControllerDeleteById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('parametrosPalletsDetalleControllerDeleteById', 'id', id)
            const localVarPath = `/parametros-pallets-detalles/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ParametrosPalletsDetalleFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        parametrosPalletsDetalleControllerFind: async (filter?: ParametrosPalletsDetalleFilter1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/parametros-pallets-detalles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {ParametrosPalletsDetalleFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        parametrosPalletsDetalleControllerFindById: async (id: number, filter?: ParametrosPalletsDetalleFilter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('parametrosPalletsDetalleControllerFindById', 'id', id)
            const localVarPath = `/parametros-pallets-detalles/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {ParametrosPalletsDetalle} [parametrosPalletsDetalle] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        parametrosPalletsDetalleControllerReplaceById: async (id: number, parametrosPalletsDetalle?: ParametrosPalletsDetalle, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('parametrosPalletsDetalleControllerReplaceById', 'id', id)
            const localVarPath = `/parametros-pallets-detalles/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(parametrosPalletsDetalle, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {ParametrosPalletsDetallePartial} [parametrosPalletsDetallePartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        parametrosPalletsDetalleControllerUpdateAll: async (where?: { [key: string]: object; }, parametrosPalletsDetallePartial?: ParametrosPalletsDetallePartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/parametros-pallets-detalles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(parametrosPalletsDetallePartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {ParametrosPalletsDetallePartial} [parametrosPalletsDetallePartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        parametrosPalletsDetalleControllerUpdateById: async (id: number, parametrosPalletsDetallePartial?: ParametrosPalletsDetallePartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('parametrosPalletsDetalleControllerUpdateById', 'id', id)
            const localVarPath = `/parametros-pallets-detalles/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(parametrosPalletsDetallePartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ParametrosPalletsDetalleControllerApi - functional programming interface
 * @export
 */
export const ParametrosPalletsDetalleControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ParametrosPalletsDetalleControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async parametrosPalletsDetalleControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.parametrosPalletsDetalleControllerCount(where, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {NewParametrosPalletsDetalle} [newParametrosPalletsDetalle] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async parametrosPalletsDetalleControllerCreate(newParametrosPalletsDetalle?: NewParametrosPalletsDetalle, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ParametrosPalletsDetalle>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.parametrosPalletsDetalleControllerCreate(newParametrosPalletsDetalle, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async parametrosPalletsDetalleControllerDeleteById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.parametrosPalletsDetalleControllerDeleteById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ParametrosPalletsDetalleFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async parametrosPalletsDetalleControllerFind(filter?: ParametrosPalletsDetalleFilter1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ParametrosPalletsDetalleWithRelations>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.parametrosPalletsDetalleControllerFind(filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {ParametrosPalletsDetalleFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async parametrosPalletsDetalleControllerFindById(id: number, filter?: ParametrosPalletsDetalleFilter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ParametrosPalletsDetalleWithRelations>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.parametrosPalletsDetalleControllerFindById(id, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {ParametrosPalletsDetalle} [parametrosPalletsDetalle] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async parametrosPalletsDetalleControllerReplaceById(id: number, parametrosPalletsDetalle?: ParametrosPalletsDetalle, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.parametrosPalletsDetalleControllerReplaceById(id, parametrosPalletsDetalle, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {ParametrosPalletsDetallePartial} [parametrosPalletsDetallePartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async parametrosPalletsDetalleControllerUpdateAll(where?: { [key: string]: object; }, parametrosPalletsDetallePartial?: ParametrosPalletsDetallePartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.parametrosPalletsDetalleControllerUpdateAll(where, parametrosPalletsDetallePartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {ParametrosPalletsDetallePartial} [parametrosPalletsDetallePartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async parametrosPalletsDetalleControllerUpdateById(id: number, parametrosPalletsDetallePartial?: ParametrosPalletsDetallePartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.parametrosPalletsDetalleControllerUpdateById(id, parametrosPalletsDetallePartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ParametrosPalletsDetalleControllerApi - factory interface
 * @export
 */
export const ParametrosPalletsDetalleControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ParametrosPalletsDetalleControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        parametrosPalletsDetalleControllerCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.parametrosPalletsDetalleControllerCount(where, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NewParametrosPalletsDetalle} [newParametrosPalletsDetalle] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        parametrosPalletsDetalleControllerCreate(newParametrosPalletsDetalle?: NewParametrosPalletsDetalle, options?: any): AxiosPromise<ParametrosPalletsDetalle> {
            return localVarFp.parametrosPalletsDetalleControllerCreate(newParametrosPalletsDetalle, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        parametrosPalletsDetalleControllerDeleteById(id: number, options?: any): AxiosPromise<any> {
            return localVarFp.parametrosPalletsDetalleControllerDeleteById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ParametrosPalletsDetalleFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        parametrosPalletsDetalleControllerFind(filter?: ParametrosPalletsDetalleFilter1, options?: any): AxiosPromise<Array<ParametrosPalletsDetalleWithRelations>> {
            return localVarFp.parametrosPalletsDetalleControllerFind(filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {ParametrosPalletsDetalleFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        parametrosPalletsDetalleControllerFindById(id: number, filter?: ParametrosPalletsDetalleFilter, options?: any): AxiosPromise<ParametrosPalletsDetalleWithRelations> {
            return localVarFp.parametrosPalletsDetalleControllerFindById(id, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {ParametrosPalletsDetalle} [parametrosPalletsDetalle] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        parametrosPalletsDetalleControllerReplaceById(id: number, parametrosPalletsDetalle?: ParametrosPalletsDetalle, options?: any): AxiosPromise<any> {
            return localVarFp.parametrosPalletsDetalleControllerReplaceById(id, parametrosPalletsDetalle, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {ParametrosPalletsDetallePartial} [parametrosPalletsDetallePartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        parametrosPalletsDetalleControllerUpdateAll(where?: { [key: string]: object; }, parametrosPalletsDetallePartial?: ParametrosPalletsDetallePartial, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.parametrosPalletsDetalleControllerUpdateAll(where, parametrosPalletsDetallePartial, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {ParametrosPalletsDetallePartial} [parametrosPalletsDetallePartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        parametrosPalletsDetalleControllerUpdateById(id: number, parametrosPalletsDetallePartial?: ParametrosPalletsDetallePartial, options?: any): AxiosPromise<any> {
            return localVarFp.parametrosPalletsDetalleControllerUpdateById(id, parametrosPalletsDetallePartial, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ParametrosPalletsDetalleControllerApi - object-oriented interface
 * @export
 * @class ParametrosPalletsDetalleControllerApi
 * @extends {BaseAPI}
 */
export class ParametrosPalletsDetalleControllerApi extends BaseAPI {
    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ParametrosPalletsDetalleControllerApi
     */
    public parametrosPalletsDetalleControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig) {
        return ParametrosPalletsDetalleControllerApiFp(this.configuration).parametrosPalletsDetalleControllerCount(where, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NewParametrosPalletsDetalle} [newParametrosPalletsDetalle] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ParametrosPalletsDetalleControllerApi
     */
    public parametrosPalletsDetalleControllerCreate(newParametrosPalletsDetalle?: NewParametrosPalletsDetalle, options?: AxiosRequestConfig) {
        return ParametrosPalletsDetalleControllerApiFp(this.configuration).parametrosPalletsDetalleControllerCreate(newParametrosPalletsDetalle, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ParametrosPalletsDetalleControllerApi
     */
    public parametrosPalletsDetalleControllerDeleteById(id: number, options?: AxiosRequestConfig) {
        return ParametrosPalletsDetalleControllerApiFp(this.configuration).parametrosPalletsDetalleControllerDeleteById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ParametrosPalletsDetalleFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ParametrosPalletsDetalleControllerApi
     */
    public parametrosPalletsDetalleControllerFind(filter?: ParametrosPalletsDetalleFilter1, options?: AxiosRequestConfig) {
        return ParametrosPalletsDetalleControllerApiFp(this.configuration).parametrosPalletsDetalleControllerFind(filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {ParametrosPalletsDetalleFilter} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ParametrosPalletsDetalleControllerApi
     */
    public parametrosPalletsDetalleControllerFindById(id: number, filter?: ParametrosPalletsDetalleFilter, options?: AxiosRequestConfig) {
        return ParametrosPalletsDetalleControllerApiFp(this.configuration).parametrosPalletsDetalleControllerFindById(id, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {ParametrosPalletsDetalle} [parametrosPalletsDetalle] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ParametrosPalletsDetalleControllerApi
     */
    public parametrosPalletsDetalleControllerReplaceById(id: number, parametrosPalletsDetalle?: ParametrosPalletsDetalle, options?: AxiosRequestConfig) {
        return ParametrosPalletsDetalleControllerApiFp(this.configuration).parametrosPalletsDetalleControllerReplaceById(id, parametrosPalletsDetalle, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {ParametrosPalletsDetallePartial} [parametrosPalletsDetallePartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ParametrosPalletsDetalleControllerApi
     */
    public parametrosPalletsDetalleControllerUpdateAll(where?: { [key: string]: object; }, parametrosPalletsDetallePartial?: ParametrosPalletsDetallePartial, options?: AxiosRequestConfig) {
        return ParametrosPalletsDetalleControllerApiFp(this.configuration).parametrosPalletsDetalleControllerUpdateAll(where, parametrosPalletsDetallePartial, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {ParametrosPalletsDetallePartial} [parametrosPalletsDetallePartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ParametrosPalletsDetalleControllerApi
     */
    public parametrosPalletsDetalleControllerUpdateById(id: number, parametrosPalletsDetallePartial?: ParametrosPalletsDetallePartial, options?: AxiosRequestConfig) {
        return ParametrosPalletsDetalleControllerApiFp(this.configuration).parametrosPalletsDetalleControllerUpdateById(id, parametrosPalletsDetallePartial, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * PermisoControllerApi - axios parameter creator
 * @export
 */
export const PermisoControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [rolId] 
         * @param {string} [modulo] 
         * @param {string} [controlador] 
         * @param {string} [accion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        permisoControllerBuscarPermiso: async (rolId?: string, modulo?: string, controlador?: string, accion?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/buscarPermiso`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (rolId !== undefined) {
                localVarQueryParameter['rolId'] = rolId;
            }

            if (modulo !== undefined) {
                localVarQueryParameter['modulo'] = modulo;
            }

            if (controlador !== undefined) {
                localVarQueryParameter['controlador'] = controlador;
            }

            if (accion !== undefined) {
                localVarQueryParameter['accion'] = accion;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        permisoControllerCount: async (where?: { [key: string]: object; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/permisos/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NewPermiso} [newPermiso] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        permisoControllerCreate: async (newPermiso?: NewPermiso, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/permisos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newPermiso, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        permisoControllerDeleteById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('permisoControllerDeleteById', 'id', id)
            const localVarPath = `/permisos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {PermisoFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        permisoControllerFind: async (filter?: PermisoFilter1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/permisos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {PermisoFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        permisoControllerFindById: async (id: number, filter?: PermisoFilter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('permisoControllerFindById', 'id', id)
            const localVarPath = `/permisos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {Permiso} [permiso] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        permisoControllerReplaceById: async (id: number, permiso?: Permiso, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('permisoControllerReplaceById', 'id', id)
            const localVarPath = `/permisos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(permiso, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {PermisoPartial} [permisoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        permisoControllerUpdateAll: async (where?: { [key: string]: object; }, permisoPartial?: PermisoPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/permisos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(permisoPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {PermisoPartial} [permisoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        permisoControllerUpdateById: async (id: number, permisoPartial?: PermisoPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('permisoControllerUpdateById', 'id', id)
            const localVarPath = `/permisos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(permisoPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {PermisoFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        permisoControllerVistaEmpresaRolPermiso: async (filter?: PermisoFilter1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/vistaEmpresaRolPermiso`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PermisoControllerApi - functional programming interface
 * @export
 */
export const PermisoControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PermisoControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} [rolId] 
         * @param {string} [modulo] 
         * @param {string} [controlador] 
         * @param {string} [accion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async permisoControllerBuscarPermiso(rolId?: string, modulo?: string, controlador?: string, accion?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PermisoWithRelations>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.permisoControllerBuscarPermiso(rolId, modulo, controlador, accion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async permisoControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.permisoControllerCount(where, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {NewPermiso} [newPermiso] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async permisoControllerCreate(newPermiso?: NewPermiso, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Permiso>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.permisoControllerCreate(newPermiso, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async permisoControllerDeleteById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.permisoControllerDeleteById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {PermisoFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async permisoControllerFind(filter?: PermisoFilter1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PermisoWithRelations>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.permisoControllerFind(filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {PermisoFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async permisoControllerFindById(id: number, filter?: PermisoFilter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PermisoWithRelations>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.permisoControllerFindById(id, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {Permiso} [permiso] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async permisoControllerReplaceById(id: number, permiso?: Permiso, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.permisoControllerReplaceById(id, permiso, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {PermisoPartial} [permisoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async permisoControllerUpdateAll(where?: { [key: string]: object; }, permisoPartial?: PermisoPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.permisoControllerUpdateAll(where, permisoPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {PermisoPartial} [permisoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async permisoControllerUpdateById(id: number, permisoPartial?: PermisoPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.permisoControllerUpdateById(id, permisoPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {PermisoFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async permisoControllerVistaEmpresaRolPermiso(filter?: PermisoFilter1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.permisoControllerVistaEmpresaRolPermiso(filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PermisoControllerApi - factory interface
 * @export
 */
export const PermisoControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PermisoControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {string} [rolId] 
         * @param {string} [modulo] 
         * @param {string} [controlador] 
         * @param {string} [accion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        permisoControllerBuscarPermiso(rolId?: string, modulo?: string, controlador?: string, accion?: string, options?: any): AxiosPromise<Array<PermisoWithRelations>> {
            return localVarFp.permisoControllerBuscarPermiso(rolId, modulo, controlador, accion, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        permisoControllerCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.permisoControllerCount(where, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NewPermiso} [newPermiso] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        permisoControllerCreate(newPermiso?: NewPermiso, options?: any): AxiosPromise<Permiso> {
            return localVarFp.permisoControllerCreate(newPermiso, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        permisoControllerDeleteById(id: number, options?: any): AxiosPromise<any> {
            return localVarFp.permisoControllerDeleteById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PermisoFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        permisoControllerFind(filter?: PermisoFilter1, options?: any): AxiosPromise<Array<PermisoWithRelations>> {
            return localVarFp.permisoControllerFind(filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {PermisoFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        permisoControllerFindById(id: number, filter?: PermisoFilter, options?: any): AxiosPromise<PermisoWithRelations> {
            return localVarFp.permisoControllerFindById(id, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {Permiso} [permiso] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        permisoControllerReplaceById(id: number, permiso?: Permiso, options?: any): AxiosPromise<any> {
            return localVarFp.permisoControllerReplaceById(id, permiso, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {PermisoPartial} [permisoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        permisoControllerUpdateAll(where?: { [key: string]: object; }, permisoPartial?: PermisoPartial, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.permisoControllerUpdateAll(where, permisoPartial, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {PermisoPartial} [permisoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        permisoControllerUpdateById(id: number, permisoPartial?: PermisoPartial, options?: any): AxiosPromise<any> {
            return localVarFp.permisoControllerUpdateById(id, permisoPartial, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PermisoFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        permisoControllerVistaEmpresaRolPermiso(filter?: PermisoFilter1, options?: any): AxiosPromise<object> {
            return localVarFp.permisoControllerVistaEmpresaRolPermiso(filter, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PermisoControllerApi - object-oriented interface
 * @export
 * @class PermisoControllerApi
 * @extends {BaseAPI}
 */
export class PermisoControllerApi extends BaseAPI {
    /**
     * 
     * @param {string} [rolId] 
     * @param {string} [modulo] 
     * @param {string} [controlador] 
     * @param {string} [accion] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermisoControllerApi
     */
    public permisoControllerBuscarPermiso(rolId?: string, modulo?: string, controlador?: string, accion?: string, options?: AxiosRequestConfig) {
        return PermisoControllerApiFp(this.configuration).permisoControllerBuscarPermiso(rolId, modulo, controlador, accion, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermisoControllerApi
     */
    public permisoControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig) {
        return PermisoControllerApiFp(this.configuration).permisoControllerCount(where, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NewPermiso} [newPermiso] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermisoControllerApi
     */
    public permisoControllerCreate(newPermiso?: NewPermiso, options?: AxiosRequestConfig) {
        return PermisoControllerApiFp(this.configuration).permisoControllerCreate(newPermiso, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermisoControllerApi
     */
    public permisoControllerDeleteById(id: number, options?: AxiosRequestConfig) {
        return PermisoControllerApiFp(this.configuration).permisoControllerDeleteById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PermisoFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermisoControllerApi
     */
    public permisoControllerFind(filter?: PermisoFilter1, options?: AxiosRequestConfig) {
        return PermisoControllerApiFp(this.configuration).permisoControllerFind(filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {PermisoFilter} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermisoControllerApi
     */
    public permisoControllerFindById(id: number, filter?: PermisoFilter, options?: AxiosRequestConfig) {
        return PermisoControllerApiFp(this.configuration).permisoControllerFindById(id, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {Permiso} [permiso] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermisoControllerApi
     */
    public permisoControllerReplaceById(id: number, permiso?: Permiso, options?: AxiosRequestConfig) {
        return PermisoControllerApiFp(this.configuration).permisoControllerReplaceById(id, permiso, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {PermisoPartial} [permisoPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermisoControllerApi
     */
    public permisoControllerUpdateAll(where?: { [key: string]: object; }, permisoPartial?: PermisoPartial, options?: AxiosRequestConfig) {
        return PermisoControllerApiFp(this.configuration).permisoControllerUpdateAll(where, permisoPartial, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {PermisoPartial} [permisoPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermisoControllerApi
     */
    public permisoControllerUpdateById(id: number, permisoPartial?: PermisoPartial, options?: AxiosRequestConfig) {
        return PermisoControllerApiFp(this.configuration).permisoControllerUpdateById(id, permisoPartial, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PermisoFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermisoControllerApi
     */
    public permisoControllerVistaEmpresaRolPermiso(filter?: PermisoFilter1, options?: AxiosRequestConfig) {
        return PermisoControllerApiFp(this.configuration).permisoControllerVistaEmpresaRolPermiso(filter, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * PingControllerApi - axios parameter creator
 * @export
 */
export const PingControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pingControllerPing: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/ping`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PingControllerApi - functional programming interface
 * @export
 */
export const PingControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PingControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pingControllerPing(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PingResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pingControllerPing(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PingControllerApi - factory interface
 * @export
 */
export const PingControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PingControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pingControllerPing(options?: any): AxiosPromise<PingResponse> {
            return localVarFp.pingControllerPing(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PingControllerApi - object-oriented interface
 * @export
 * @class PingControllerApi
 * @extends {BaseAPI}
 */
export class PingControllerApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PingControllerApi
     */
    public pingControllerPing(options?: AxiosRequestConfig) {
        return PingControllerApiFp(this.configuration).pingControllerPing(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * PlantillaEmailControllerApi - axios parameter creator
 * @export
 */
export const PlantillaEmailControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        plantillaEmailControllerCount: async (where?: { [key: string]: object; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/plantilla-emails/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NewPlantillaEmail} [newPlantillaEmail] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        plantillaEmailControllerCreate: async (newPlantillaEmail?: NewPlantillaEmail, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/plantilla-emails`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newPlantillaEmail, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        plantillaEmailControllerDeleteById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('plantillaEmailControllerDeleteById', 'id', id)
            const localVarPath = `/plantilla-emails/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} nombrePlantilla 
         * @param {InlineObject3} inlineObject3 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        plantillaEmailControllerEnviarEmails: async (nombrePlantilla: string, inlineObject3: InlineObject3, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'nombrePlantilla' is not null or undefined
            assertParamExists('plantillaEmailControllerEnviarEmails', 'nombrePlantilla', nombrePlantilla)
            // verify required parameter 'inlineObject3' is not null or undefined
            assertParamExists('plantillaEmailControllerEnviarEmails', 'inlineObject3', inlineObject3)
            const localVarPath = `/plantilla-emails/enviarEmails/{nombrePlantilla}`
                .replace(`{${"nombrePlantilla"}}`, encodeURIComponent(String(nombrePlantilla)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inlineObject3, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} url 
         * @param {InlineObject4} inlineObject4 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        plantillaEmailControllerEnviarQR: async (url: string, inlineObject4: InlineObject4, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'url' is not null or undefined
            assertParamExists('plantillaEmailControllerEnviarQR', 'url', url)
            // verify required parameter 'inlineObject4' is not null or undefined
            assertParamExists('plantillaEmailControllerEnviarQR', 'inlineObject4', inlineObject4)
            const localVarPath = `/plantilla-emails/enviarQR/{url}`
                .replace(`{${"url"}}`, encodeURIComponent(String(url)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inlineObject4, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {PlantillaEmailFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        plantillaEmailControllerFind: async (filter?: PlantillaEmailFilter1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/plantilla-emails`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {PlantillaEmailFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        plantillaEmailControllerFindById: async (id: number, filter?: PlantillaEmailFilter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('plantillaEmailControllerFindById', 'id', id)
            const localVarPath = `/plantilla-emails/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {PlantillaEmail} [plantillaEmail] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        plantillaEmailControllerReplaceById: async (id: number, plantillaEmail?: PlantillaEmail, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('plantillaEmailControllerReplaceById', 'id', id)
            const localVarPath = `/plantilla-emails/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(plantillaEmail, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {PlantillaEmailPartial} [plantillaEmailPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        plantillaEmailControllerUpdateAll: async (where?: { [key: string]: object; }, plantillaEmailPartial?: PlantillaEmailPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/plantilla-emails`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(plantillaEmailPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {PlantillaEmailPartial} [plantillaEmailPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        plantillaEmailControllerUpdateById: async (id: number, plantillaEmailPartial?: PlantillaEmailPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('plantillaEmailControllerUpdateById', 'id', id)
            const localVarPath = `/plantilla-emails/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(plantillaEmailPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {PlantillaEmailFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        plantillaEmailControllerVistaPlantillaEmailIdioma: async (filter?: PlantillaEmailFilter1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/vistaPlantillaEmailIdioma`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        plantillaEmailControllerVistaPlantillaEmailIdiomaCount: async (where?: { [key: string]: object; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/vistaPlantillaEmailIdiomaCount`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PlantillaEmailControllerApi - functional programming interface
 * @export
 */
export const PlantillaEmailControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PlantillaEmailControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async plantillaEmailControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.plantillaEmailControllerCount(where, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {NewPlantillaEmail} [newPlantillaEmail] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async plantillaEmailControllerCreate(newPlantillaEmail?: NewPlantillaEmail, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlantillaEmail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.plantillaEmailControllerCreate(newPlantillaEmail, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async plantillaEmailControllerDeleteById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.plantillaEmailControllerDeleteById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} nombrePlantilla 
         * @param {InlineObject3} inlineObject3 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async plantillaEmailControllerEnviarEmails(nombrePlantilla: string, inlineObject3: InlineObject3, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.plantillaEmailControllerEnviarEmails(nombrePlantilla, inlineObject3, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} url 
         * @param {InlineObject4} inlineObject4 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async plantillaEmailControllerEnviarQR(url: string, inlineObject4: InlineObject4, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.plantillaEmailControllerEnviarQR(url, inlineObject4, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {PlantillaEmailFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async plantillaEmailControllerFind(filter?: PlantillaEmailFilter1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PlantillaEmailWithRelations>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.plantillaEmailControllerFind(filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {PlantillaEmailFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async plantillaEmailControllerFindById(id: number, filter?: PlantillaEmailFilter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlantillaEmailWithRelations>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.plantillaEmailControllerFindById(id, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {PlantillaEmail} [plantillaEmail] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async plantillaEmailControllerReplaceById(id: number, plantillaEmail?: PlantillaEmail, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.plantillaEmailControllerReplaceById(id, plantillaEmail, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {PlantillaEmailPartial} [plantillaEmailPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async plantillaEmailControllerUpdateAll(where?: { [key: string]: object; }, plantillaEmailPartial?: PlantillaEmailPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.plantillaEmailControllerUpdateAll(where, plantillaEmailPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {PlantillaEmailPartial} [plantillaEmailPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async plantillaEmailControllerUpdateById(id: number, plantillaEmailPartial?: PlantillaEmailPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.plantillaEmailControllerUpdateById(id, plantillaEmailPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {PlantillaEmailFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async plantillaEmailControllerVistaPlantillaEmailIdioma(filter?: PlantillaEmailFilter1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.plantillaEmailControllerVistaPlantillaEmailIdioma(filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async plantillaEmailControllerVistaPlantillaEmailIdiomaCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.plantillaEmailControllerVistaPlantillaEmailIdiomaCount(where, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PlantillaEmailControllerApi - factory interface
 * @export
 */
export const PlantillaEmailControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PlantillaEmailControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        plantillaEmailControllerCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.plantillaEmailControllerCount(where, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NewPlantillaEmail} [newPlantillaEmail] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        plantillaEmailControllerCreate(newPlantillaEmail?: NewPlantillaEmail, options?: any): AxiosPromise<PlantillaEmail> {
            return localVarFp.plantillaEmailControllerCreate(newPlantillaEmail, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        plantillaEmailControllerDeleteById(id: number, options?: any): AxiosPromise<any> {
            return localVarFp.plantillaEmailControllerDeleteById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} nombrePlantilla 
         * @param {InlineObject3} inlineObject3 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        plantillaEmailControllerEnviarEmails(nombrePlantilla: string, inlineObject3: InlineObject3, options?: any): AxiosPromise<void> {
            return localVarFp.plantillaEmailControllerEnviarEmails(nombrePlantilla, inlineObject3, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} url 
         * @param {InlineObject4} inlineObject4 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        plantillaEmailControllerEnviarQR(url: string, inlineObject4: InlineObject4, options?: any): AxiosPromise<void> {
            return localVarFp.plantillaEmailControllerEnviarQR(url, inlineObject4, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PlantillaEmailFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        plantillaEmailControllerFind(filter?: PlantillaEmailFilter1, options?: any): AxiosPromise<Array<PlantillaEmailWithRelations>> {
            return localVarFp.plantillaEmailControllerFind(filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {PlantillaEmailFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        plantillaEmailControllerFindById(id: number, filter?: PlantillaEmailFilter, options?: any): AxiosPromise<PlantillaEmailWithRelations> {
            return localVarFp.plantillaEmailControllerFindById(id, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {PlantillaEmail} [plantillaEmail] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        plantillaEmailControllerReplaceById(id: number, plantillaEmail?: PlantillaEmail, options?: any): AxiosPromise<any> {
            return localVarFp.plantillaEmailControllerReplaceById(id, plantillaEmail, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {PlantillaEmailPartial} [plantillaEmailPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        plantillaEmailControllerUpdateAll(where?: { [key: string]: object; }, plantillaEmailPartial?: PlantillaEmailPartial, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.plantillaEmailControllerUpdateAll(where, plantillaEmailPartial, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {PlantillaEmailPartial} [plantillaEmailPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        plantillaEmailControllerUpdateById(id: number, plantillaEmailPartial?: PlantillaEmailPartial, options?: any): AxiosPromise<any> {
            return localVarFp.plantillaEmailControllerUpdateById(id, plantillaEmailPartial, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PlantillaEmailFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        plantillaEmailControllerVistaPlantillaEmailIdioma(filter?: PlantillaEmailFilter1, options?: any): AxiosPromise<object> {
            return localVarFp.plantillaEmailControllerVistaPlantillaEmailIdioma(filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        plantillaEmailControllerVistaPlantillaEmailIdiomaCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<object> {
            return localVarFp.plantillaEmailControllerVistaPlantillaEmailIdiomaCount(where, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PlantillaEmailControllerApi - object-oriented interface
 * @export
 * @class PlantillaEmailControllerApi
 * @extends {BaseAPI}
 */
export class PlantillaEmailControllerApi extends BaseAPI {
    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlantillaEmailControllerApi
     */
    public plantillaEmailControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig) {
        return PlantillaEmailControllerApiFp(this.configuration).plantillaEmailControllerCount(where, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NewPlantillaEmail} [newPlantillaEmail] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlantillaEmailControllerApi
     */
    public plantillaEmailControllerCreate(newPlantillaEmail?: NewPlantillaEmail, options?: AxiosRequestConfig) {
        return PlantillaEmailControllerApiFp(this.configuration).plantillaEmailControllerCreate(newPlantillaEmail, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlantillaEmailControllerApi
     */
    public plantillaEmailControllerDeleteById(id: number, options?: AxiosRequestConfig) {
        return PlantillaEmailControllerApiFp(this.configuration).plantillaEmailControllerDeleteById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} nombrePlantilla 
     * @param {InlineObject3} inlineObject3 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlantillaEmailControllerApi
     */
    public plantillaEmailControllerEnviarEmails(nombrePlantilla: string, inlineObject3: InlineObject3, options?: AxiosRequestConfig) {
        return PlantillaEmailControllerApiFp(this.configuration).plantillaEmailControllerEnviarEmails(nombrePlantilla, inlineObject3, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} url 
     * @param {InlineObject4} inlineObject4 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlantillaEmailControllerApi
     */
    public plantillaEmailControllerEnviarQR(url: string, inlineObject4: InlineObject4, options?: AxiosRequestConfig) {
        return PlantillaEmailControllerApiFp(this.configuration).plantillaEmailControllerEnviarQR(url, inlineObject4, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PlantillaEmailFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlantillaEmailControllerApi
     */
    public plantillaEmailControllerFind(filter?: PlantillaEmailFilter1, options?: AxiosRequestConfig) {
        return PlantillaEmailControllerApiFp(this.configuration).plantillaEmailControllerFind(filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {PlantillaEmailFilter} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlantillaEmailControllerApi
     */
    public plantillaEmailControllerFindById(id: number, filter?: PlantillaEmailFilter, options?: AxiosRequestConfig) {
        return PlantillaEmailControllerApiFp(this.configuration).plantillaEmailControllerFindById(id, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {PlantillaEmail} [plantillaEmail] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlantillaEmailControllerApi
     */
    public plantillaEmailControllerReplaceById(id: number, plantillaEmail?: PlantillaEmail, options?: AxiosRequestConfig) {
        return PlantillaEmailControllerApiFp(this.configuration).plantillaEmailControllerReplaceById(id, plantillaEmail, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {PlantillaEmailPartial} [plantillaEmailPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlantillaEmailControllerApi
     */
    public plantillaEmailControllerUpdateAll(where?: { [key: string]: object; }, plantillaEmailPartial?: PlantillaEmailPartial, options?: AxiosRequestConfig) {
        return PlantillaEmailControllerApiFp(this.configuration).plantillaEmailControllerUpdateAll(where, plantillaEmailPartial, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {PlantillaEmailPartial} [plantillaEmailPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlantillaEmailControllerApi
     */
    public plantillaEmailControllerUpdateById(id: number, plantillaEmailPartial?: PlantillaEmailPartial, options?: AxiosRequestConfig) {
        return PlantillaEmailControllerApiFp(this.configuration).plantillaEmailControllerUpdateById(id, plantillaEmailPartial, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PlantillaEmailFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlantillaEmailControllerApi
     */
    public plantillaEmailControllerVistaPlantillaEmailIdioma(filter?: PlantillaEmailFilter1, options?: AxiosRequestConfig) {
        return PlantillaEmailControllerApiFp(this.configuration).plantillaEmailControllerVistaPlantillaEmailIdioma(filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlantillaEmailControllerApi
     */
    public plantillaEmailControllerVistaPlantillaEmailIdiomaCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig) {
        return PlantillaEmailControllerApiFp(this.configuration).plantillaEmailControllerVistaPlantillaEmailIdiomaCount(where, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * RefrescarTokenControllerApi - axios parameter creator
 * @export
 */
export const RefrescarTokenControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refrescarTokenControllerCount: async (where?: { [key: string]: object; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/refrescar-tokens/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NewRefrescarToken} [newRefrescarToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refrescarTokenControllerCreate: async (newRefrescarToken?: NewRefrescarToken, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/refrescar-tokens`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newRefrescarToken, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refrescarTokenControllerDeleteById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('refrescarTokenControllerDeleteById', 'id', id)
            const localVarPath = `/refrescar-tokens/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RefrescarTokenFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refrescarTokenControllerFind: async (filter?: RefrescarTokenFilter1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/refrescar-tokens`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {RefrescarTokenFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refrescarTokenControllerFindById: async (id: number, filter?: RefrescarTokenFilter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('refrescarTokenControllerFindById', 'id', id)
            const localVarPath = `/refrescar-tokens/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {RefrescarToken} [refrescarToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refrescarTokenControllerReplaceById: async (id: number, refrescarToken?: RefrescarToken, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('refrescarTokenControllerReplaceById', 'id', id)
            const localVarPath = `/refrescar-tokens/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(refrescarToken, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {RefrescarTokenPartial} [refrescarTokenPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refrescarTokenControllerUpdateAll: async (where?: { [key: string]: object; }, refrescarTokenPartial?: RefrescarTokenPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/refrescar-tokens`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(refrescarTokenPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {RefrescarTokenPartial} [refrescarTokenPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refrescarTokenControllerUpdateById: async (id: number, refrescarTokenPartial?: RefrescarTokenPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('refrescarTokenControllerUpdateById', 'id', id)
            const localVarPath = `/refrescar-tokens/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(refrescarTokenPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RefrescarTokenControllerApi - functional programming interface
 * @export
 */
export const RefrescarTokenControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RefrescarTokenControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async refrescarTokenControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.refrescarTokenControllerCount(where, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {NewRefrescarToken} [newRefrescarToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async refrescarTokenControllerCreate(newRefrescarToken?: NewRefrescarToken, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RefrescarToken>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.refrescarTokenControllerCreate(newRefrescarToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async refrescarTokenControllerDeleteById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.refrescarTokenControllerDeleteById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {RefrescarTokenFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async refrescarTokenControllerFind(filter?: RefrescarTokenFilter1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RefrescarTokenWithRelations>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.refrescarTokenControllerFind(filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {RefrescarTokenFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async refrescarTokenControllerFindById(id: number, filter?: RefrescarTokenFilter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RefrescarTokenWithRelations>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.refrescarTokenControllerFindById(id, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {RefrescarToken} [refrescarToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async refrescarTokenControllerReplaceById(id: number, refrescarToken?: RefrescarToken, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.refrescarTokenControllerReplaceById(id, refrescarToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {RefrescarTokenPartial} [refrescarTokenPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async refrescarTokenControllerUpdateAll(where?: { [key: string]: object; }, refrescarTokenPartial?: RefrescarTokenPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.refrescarTokenControllerUpdateAll(where, refrescarTokenPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {RefrescarTokenPartial} [refrescarTokenPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async refrescarTokenControllerUpdateById(id: number, refrescarTokenPartial?: RefrescarTokenPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.refrescarTokenControllerUpdateById(id, refrescarTokenPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RefrescarTokenControllerApi - factory interface
 * @export
 */
export const RefrescarTokenControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RefrescarTokenControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refrescarTokenControllerCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.refrescarTokenControllerCount(where, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NewRefrescarToken} [newRefrescarToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refrescarTokenControllerCreate(newRefrescarToken?: NewRefrescarToken, options?: any): AxiosPromise<RefrescarToken> {
            return localVarFp.refrescarTokenControllerCreate(newRefrescarToken, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refrescarTokenControllerDeleteById(id: number, options?: any): AxiosPromise<any> {
            return localVarFp.refrescarTokenControllerDeleteById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RefrescarTokenFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refrescarTokenControllerFind(filter?: RefrescarTokenFilter1, options?: any): AxiosPromise<Array<RefrescarTokenWithRelations>> {
            return localVarFp.refrescarTokenControllerFind(filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {RefrescarTokenFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refrescarTokenControllerFindById(id: number, filter?: RefrescarTokenFilter, options?: any): AxiosPromise<RefrescarTokenWithRelations> {
            return localVarFp.refrescarTokenControllerFindById(id, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {RefrescarToken} [refrescarToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refrescarTokenControllerReplaceById(id: number, refrescarToken?: RefrescarToken, options?: any): AxiosPromise<any> {
            return localVarFp.refrescarTokenControllerReplaceById(id, refrescarToken, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {RefrescarTokenPartial} [refrescarTokenPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refrescarTokenControllerUpdateAll(where?: { [key: string]: object; }, refrescarTokenPartial?: RefrescarTokenPartial, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.refrescarTokenControllerUpdateAll(where, refrescarTokenPartial, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {RefrescarTokenPartial} [refrescarTokenPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refrescarTokenControllerUpdateById(id: number, refrescarTokenPartial?: RefrescarTokenPartial, options?: any): AxiosPromise<any> {
            return localVarFp.refrescarTokenControllerUpdateById(id, refrescarTokenPartial, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RefrescarTokenControllerApi - object-oriented interface
 * @export
 * @class RefrescarTokenControllerApi
 * @extends {BaseAPI}
 */
export class RefrescarTokenControllerApi extends BaseAPI {
    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RefrescarTokenControllerApi
     */
    public refrescarTokenControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig) {
        return RefrescarTokenControllerApiFp(this.configuration).refrescarTokenControllerCount(where, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NewRefrescarToken} [newRefrescarToken] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RefrescarTokenControllerApi
     */
    public refrescarTokenControllerCreate(newRefrescarToken?: NewRefrescarToken, options?: AxiosRequestConfig) {
        return RefrescarTokenControllerApiFp(this.configuration).refrescarTokenControllerCreate(newRefrescarToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RefrescarTokenControllerApi
     */
    public refrescarTokenControllerDeleteById(id: number, options?: AxiosRequestConfig) {
        return RefrescarTokenControllerApiFp(this.configuration).refrescarTokenControllerDeleteById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RefrescarTokenFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RefrescarTokenControllerApi
     */
    public refrescarTokenControllerFind(filter?: RefrescarTokenFilter1, options?: AxiosRequestConfig) {
        return RefrescarTokenControllerApiFp(this.configuration).refrescarTokenControllerFind(filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {RefrescarTokenFilter} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RefrescarTokenControllerApi
     */
    public refrescarTokenControllerFindById(id: number, filter?: RefrescarTokenFilter, options?: AxiosRequestConfig) {
        return RefrescarTokenControllerApiFp(this.configuration).refrescarTokenControllerFindById(id, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {RefrescarToken} [refrescarToken] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RefrescarTokenControllerApi
     */
    public refrescarTokenControllerReplaceById(id: number, refrescarToken?: RefrescarToken, options?: AxiosRequestConfig) {
        return RefrescarTokenControllerApiFp(this.configuration).refrescarTokenControllerReplaceById(id, refrescarToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {RefrescarTokenPartial} [refrescarTokenPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RefrescarTokenControllerApi
     */
    public refrescarTokenControllerUpdateAll(where?: { [key: string]: object; }, refrescarTokenPartial?: RefrescarTokenPartial, options?: AxiosRequestConfig) {
        return RefrescarTokenControllerApiFp(this.configuration).refrescarTokenControllerUpdateAll(where, refrescarTokenPartial, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {RefrescarTokenPartial} [refrescarTokenPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RefrescarTokenControllerApi
     */
    public refrescarTokenControllerUpdateById(id: number, refrescarTokenPartial?: RefrescarTokenPartial, options?: AxiosRequestConfig) {
        return RefrescarTokenControllerApiFp(this.configuration).refrescarTokenControllerUpdateById(id, refrescarTokenPartial, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * RolControllerApi - axios parameter creator
 * @export
 */
export const RolControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [nombre] 
         * @param {number} [empresaId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolControllerBuscarIdRol: async (nombre?: string, empresaId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/buscarIdRol`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (nombre !== undefined) {
                localVarQueryParameter['nombre'] = nombre;
            }

            if (empresaId !== undefined) {
                localVarQueryParameter['empresaId'] = empresaId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolControllerCount: async (where?: { [key: string]: object; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/roles/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NewRol} [newRol] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolControllerCreate: async (newRol?: NewRol, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/roles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newRol, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolControllerDeleteById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('rolControllerDeleteById', 'id', id)
            const localVarPath = `/roles/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RolFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolControllerFind: async (filter?: RolFilter1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/roles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {RolFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolControllerFindById: async (id: number, filter?: RolFilter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('rolControllerFindById', 'id', id)
            const localVarPath = `/roles/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {Rol} [rol] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolControllerReplaceById: async (id: number, rol?: Rol, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('rolControllerReplaceById', 'id', id)
            const localVarPath = `/roles/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(rol, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {RolPartial} [rolPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolControllerUpdateAll: async (where?: { [key: string]: object; }, rolPartial?: RolPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/roles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(rolPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {RolPartial} [rolPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolControllerUpdateById: async (id: number, rolPartial?: RolPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('rolControllerUpdateById', 'id', id)
            const localVarPath = `/roles/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(rolPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RolFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolControllerVistaEmpresaRol: async (filter?: RolFilter1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/vistaEmpresaRol`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolControllerVistaEmpresaRolCount: async (where?: { [key: string]: object; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/vistaEmpresaRolCount`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RolControllerApi - functional programming interface
 * @export
 */
export const RolControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RolControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} [nombre] 
         * @param {number} [empresaId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rolControllerBuscarIdRol(nombre?: string, empresaId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RolWithRelations>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rolControllerBuscarIdRol(nombre, empresaId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rolControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rolControllerCount(where, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {NewRol} [newRol] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rolControllerCreate(newRol?: NewRol, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Rol>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rolControllerCreate(newRol, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rolControllerDeleteById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rolControllerDeleteById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {RolFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rolControllerFind(filter?: RolFilter1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RolWithRelations>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rolControllerFind(filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {RolFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rolControllerFindById(id: number, filter?: RolFilter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RolWithRelations>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rolControllerFindById(id, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {Rol} [rol] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rolControllerReplaceById(id: number, rol?: Rol, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rolControllerReplaceById(id, rol, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {RolPartial} [rolPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rolControllerUpdateAll(where?: { [key: string]: object; }, rolPartial?: RolPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rolControllerUpdateAll(where, rolPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {RolPartial} [rolPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rolControllerUpdateById(id: number, rolPartial?: RolPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rolControllerUpdateById(id, rolPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {RolFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rolControllerVistaEmpresaRol(filter?: RolFilter1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rolControllerVistaEmpresaRol(filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rolControllerVistaEmpresaRolCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rolControllerVistaEmpresaRolCount(where, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RolControllerApi - factory interface
 * @export
 */
export const RolControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RolControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {string} [nombre] 
         * @param {number} [empresaId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolControllerBuscarIdRol(nombre?: string, empresaId?: number, options?: any): AxiosPromise<Array<RolWithRelations>> {
            return localVarFp.rolControllerBuscarIdRol(nombre, empresaId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolControllerCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.rolControllerCount(where, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NewRol} [newRol] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolControllerCreate(newRol?: NewRol, options?: any): AxiosPromise<Rol> {
            return localVarFp.rolControllerCreate(newRol, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolControllerDeleteById(id: number, options?: any): AxiosPromise<any> {
            return localVarFp.rolControllerDeleteById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RolFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolControllerFind(filter?: RolFilter1, options?: any): AxiosPromise<Array<RolWithRelations>> {
            return localVarFp.rolControllerFind(filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {RolFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolControllerFindById(id: number, filter?: RolFilter, options?: any): AxiosPromise<RolWithRelations> {
            return localVarFp.rolControllerFindById(id, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {Rol} [rol] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolControllerReplaceById(id: number, rol?: Rol, options?: any): AxiosPromise<any> {
            return localVarFp.rolControllerReplaceById(id, rol, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {RolPartial} [rolPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolControllerUpdateAll(where?: { [key: string]: object; }, rolPartial?: RolPartial, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.rolControllerUpdateAll(where, rolPartial, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {RolPartial} [rolPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolControllerUpdateById(id: number, rolPartial?: RolPartial, options?: any): AxiosPromise<any> {
            return localVarFp.rolControllerUpdateById(id, rolPartial, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RolFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolControllerVistaEmpresaRol(filter?: RolFilter1, options?: any): AxiosPromise<object> {
            return localVarFp.rolControllerVistaEmpresaRol(filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolControllerVistaEmpresaRolCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<object> {
            return localVarFp.rolControllerVistaEmpresaRolCount(where, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RolControllerApi - object-oriented interface
 * @export
 * @class RolControllerApi
 * @extends {BaseAPI}
 */
export class RolControllerApi extends BaseAPI {
    /**
     * 
     * @param {string} [nombre] 
     * @param {number} [empresaId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolControllerApi
     */
    public rolControllerBuscarIdRol(nombre?: string, empresaId?: number, options?: AxiosRequestConfig) {
        return RolControllerApiFp(this.configuration).rolControllerBuscarIdRol(nombre, empresaId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolControllerApi
     */
    public rolControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig) {
        return RolControllerApiFp(this.configuration).rolControllerCount(where, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NewRol} [newRol] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolControllerApi
     */
    public rolControllerCreate(newRol?: NewRol, options?: AxiosRequestConfig) {
        return RolControllerApiFp(this.configuration).rolControllerCreate(newRol, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolControllerApi
     */
    public rolControllerDeleteById(id: number, options?: AxiosRequestConfig) {
        return RolControllerApiFp(this.configuration).rolControllerDeleteById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RolFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolControllerApi
     */
    public rolControllerFind(filter?: RolFilter1, options?: AxiosRequestConfig) {
        return RolControllerApiFp(this.configuration).rolControllerFind(filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {RolFilter} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolControllerApi
     */
    public rolControllerFindById(id: number, filter?: RolFilter, options?: AxiosRequestConfig) {
        return RolControllerApiFp(this.configuration).rolControllerFindById(id, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {Rol} [rol] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolControllerApi
     */
    public rolControllerReplaceById(id: number, rol?: Rol, options?: AxiosRequestConfig) {
        return RolControllerApiFp(this.configuration).rolControllerReplaceById(id, rol, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {RolPartial} [rolPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolControllerApi
     */
    public rolControllerUpdateAll(where?: { [key: string]: object; }, rolPartial?: RolPartial, options?: AxiosRequestConfig) {
        return RolControllerApiFp(this.configuration).rolControllerUpdateAll(where, rolPartial, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {RolPartial} [rolPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolControllerApi
     */
    public rolControllerUpdateById(id: number, rolPartial?: RolPartial, options?: AxiosRequestConfig) {
        return RolControllerApiFp(this.configuration).rolControllerUpdateById(id, rolPartial, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RolFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolControllerApi
     */
    public rolControllerVistaEmpresaRol(filter?: RolFilter1, options?: AxiosRequestConfig) {
        return RolControllerApiFp(this.configuration).rolControllerVistaEmpresaRol(filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolControllerApi
     */
    public rolControllerVistaEmpresaRolCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig) {
        return RolControllerApiFp(this.configuration).rolControllerVistaEmpresaRolCount(where, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SeccionControllerApi - axios parameter creator
 * @export
 */
export const SeccionControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seccionControllerCount: async (where?: { [key: string]: object; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/secciones/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NewSeccion} [newSeccion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seccionControllerCreate: async (newSeccion?: NewSeccion, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/secciones`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newSeccion, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seccionControllerDeleteById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('seccionControllerDeleteById', 'id', id)
            const localVarPath = `/secciones/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SeccionFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seccionControllerFind: async (filter?: SeccionFilter1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/secciones`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {SeccionFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seccionControllerFindById: async (id: number, filter?: SeccionFilter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('seccionControllerFindById', 'id', id)
            const localVarPath = `/secciones/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {Seccion} [seccion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seccionControllerReplaceById: async (id: number, seccion?: Seccion, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('seccionControllerReplaceById', 'id', id)
            const localVarPath = `/secciones/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(seccion, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {SeccionPartial} [seccionPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seccionControllerUpdateAll: async (where?: { [key: string]: object; }, seccionPartial?: SeccionPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/secciones`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(seccionPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {SeccionPartial} [seccionPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seccionControllerUpdateById: async (id: number, seccionPartial?: SeccionPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('seccionControllerUpdateById', 'id', id)
            const localVarPath = `/secciones/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(seccionPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SeccionControllerApi - functional programming interface
 * @export
 */
export const SeccionControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SeccionControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async seccionControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.seccionControllerCount(where, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {NewSeccion} [newSeccion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async seccionControllerCreate(newSeccion?: NewSeccion, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Seccion>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.seccionControllerCreate(newSeccion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async seccionControllerDeleteById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.seccionControllerDeleteById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {SeccionFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async seccionControllerFind(filter?: SeccionFilter1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SeccionWithRelations>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.seccionControllerFind(filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {SeccionFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async seccionControllerFindById(id: number, filter?: SeccionFilter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SeccionWithRelations>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.seccionControllerFindById(id, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {Seccion} [seccion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async seccionControllerReplaceById(id: number, seccion?: Seccion, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.seccionControllerReplaceById(id, seccion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {SeccionPartial} [seccionPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async seccionControllerUpdateAll(where?: { [key: string]: object; }, seccionPartial?: SeccionPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.seccionControllerUpdateAll(where, seccionPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {SeccionPartial} [seccionPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async seccionControllerUpdateById(id: number, seccionPartial?: SeccionPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.seccionControllerUpdateById(id, seccionPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SeccionControllerApi - factory interface
 * @export
 */
export const SeccionControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SeccionControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seccionControllerCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.seccionControllerCount(where, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NewSeccion} [newSeccion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seccionControllerCreate(newSeccion?: NewSeccion, options?: any): AxiosPromise<Seccion> {
            return localVarFp.seccionControllerCreate(newSeccion, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seccionControllerDeleteById(id: number, options?: any): AxiosPromise<any> {
            return localVarFp.seccionControllerDeleteById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SeccionFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seccionControllerFind(filter?: SeccionFilter1, options?: any): AxiosPromise<Array<SeccionWithRelations>> {
            return localVarFp.seccionControllerFind(filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {SeccionFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seccionControllerFindById(id: number, filter?: SeccionFilter, options?: any): AxiosPromise<SeccionWithRelations> {
            return localVarFp.seccionControllerFindById(id, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {Seccion} [seccion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seccionControllerReplaceById(id: number, seccion?: Seccion, options?: any): AxiosPromise<any> {
            return localVarFp.seccionControllerReplaceById(id, seccion, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {SeccionPartial} [seccionPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seccionControllerUpdateAll(where?: { [key: string]: object; }, seccionPartial?: SeccionPartial, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.seccionControllerUpdateAll(where, seccionPartial, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {SeccionPartial} [seccionPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seccionControllerUpdateById(id: number, seccionPartial?: SeccionPartial, options?: any): AxiosPromise<any> {
            return localVarFp.seccionControllerUpdateById(id, seccionPartial, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SeccionControllerApi - object-oriented interface
 * @export
 * @class SeccionControllerApi
 * @extends {BaseAPI}
 */
export class SeccionControllerApi extends BaseAPI {
    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SeccionControllerApi
     */
    public seccionControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig) {
        return SeccionControllerApiFp(this.configuration).seccionControllerCount(where, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NewSeccion} [newSeccion] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SeccionControllerApi
     */
    public seccionControllerCreate(newSeccion?: NewSeccion, options?: AxiosRequestConfig) {
        return SeccionControllerApiFp(this.configuration).seccionControllerCreate(newSeccion, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SeccionControllerApi
     */
    public seccionControllerDeleteById(id: number, options?: AxiosRequestConfig) {
        return SeccionControllerApiFp(this.configuration).seccionControllerDeleteById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SeccionFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SeccionControllerApi
     */
    public seccionControllerFind(filter?: SeccionFilter1, options?: AxiosRequestConfig) {
        return SeccionControllerApiFp(this.configuration).seccionControllerFind(filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {SeccionFilter} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SeccionControllerApi
     */
    public seccionControllerFindById(id: number, filter?: SeccionFilter, options?: AxiosRequestConfig) {
        return SeccionControllerApiFp(this.configuration).seccionControllerFindById(id, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {Seccion} [seccion] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SeccionControllerApi
     */
    public seccionControllerReplaceById(id: number, seccion?: Seccion, options?: AxiosRequestConfig) {
        return SeccionControllerApiFp(this.configuration).seccionControllerReplaceById(id, seccion, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {SeccionPartial} [seccionPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SeccionControllerApi
     */
    public seccionControllerUpdateAll(where?: { [key: string]: object; }, seccionPartial?: SeccionPartial, options?: AxiosRequestConfig) {
        return SeccionControllerApiFp(this.configuration).seccionControllerUpdateAll(where, seccionPartial, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {SeccionPartial} [seccionPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SeccionControllerApi
     */
    public seccionControllerUpdateById(id: number, seccionPartial?: SeccionPartial, options?: AxiosRequestConfig) {
        return SeccionControllerApiFp(this.configuration).seccionControllerUpdateById(id, seccionPartial, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TipoArchivoControllerApi - axios parameter creator
 * @export
 */
export const TipoArchivoControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tipoArchivoControllerCount: async (where?: { [key: string]: object; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tipo-archivos/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NewTipoArchivo} [newTipoArchivo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tipoArchivoControllerCreate: async (newTipoArchivo?: NewTipoArchivo, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tipo-archivos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newTipoArchivo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tipoArchivoControllerDeleteById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('tipoArchivoControllerDeleteById', 'id', id)
            const localVarPath = `/tipo-archivos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {TipoArchivoFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tipoArchivoControllerFind: async (filter?: TipoArchivoFilter1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tipo-archivos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {TipoArchivoFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tipoArchivoControllerFindById: async (id: number, filter?: TipoArchivoFilter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('tipoArchivoControllerFindById', 'id', id)
            const localVarPath = `/tipo-archivos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {TipoArchivo} [tipoArchivo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tipoArchivoControllerReplaceById: async (id: number, tipoArchivo?: TipoArchivo, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('tipoArchivoControllerReplaceById', 'id', id)
            const localVarPath = `/tipo-archivos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(tipoArchivo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {TipoArchivoPartial} [tipoArchivoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tipoArchivoControllerUpdateAll: async (where?: { [key: string]: object; }, tipoArchivoPartial?: TipoArchivoPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tipo-archivos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(tipoArchivoPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {TipoArchivoPartial} [tipoArchivoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tipoArchivoControllerUpdateById: async (id: number, tipoArchivoPartial?: TipoArchivoPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('tipoArchivoControllerUpdateById', 'id', id)
            const localVarPath = `/tipo-archivos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(tipoArchivoPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {TipoArchivoFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tipoArchivoControllerVistaTipoArchivoEmpresaSeccion: async (filter?: TipoArchivoFilter1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/vistaTipoArchivoEmpresaSeccion`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tipoArchivoControllerVistaTipoArchivoEmpresaSeccionCount: async (where?: { [key: string]: object; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/vistaTipoArchivoEmpresaSeccionCount`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TipoArchivoControllerApi - functional programming interface
 * @export
 */
export const TipoArchivoControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TipoArchivoControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tipoArchivoControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tipoArchivoControllerCount(where, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {NewTipoArchivo} [newTipoArchivo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tipoArchivoControllerCreate(newTipoArchivo?: NewTipoArchivo, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TipoArchivo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tipoArchivoControllerCreate(newTipoArchivo, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tipoArchivoControllerDeleteById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tipoArchivoControllerDeleteById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {TipoArchivoFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tipoArchivoControllerFind(filter?: TipoArchivoFilter1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TipoArchivoWithRelations>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tipoArchivoControllerFind(filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {TipoArchivoFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tipoArchivoControllerFindById(id: number, filter?: TipoArchivoFilter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TipoArchivoWithRelations>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tipoArchivoControllerFindById(id, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {TipoArchivo} [tipoArchivo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tipoArchivoControllerReplaceById(id: number, tipoArchivo?: TipoArchivo, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tipoArchivoControllerReplaceById(id, tipoArchivo, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {TipoArchivoPartial} [tipoArchivoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tipoArchivoControllerUpdateAll(where?: { [key: string]: object; }, tipoArchivoPartial?: TipoArchivoPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tipoArchivoControllerUpdateAll(where, tipoArchivoPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {TipoArchivoPartial} [tipoArchivoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tipoArchivoControllerUpdateById(id: number, tipoArchivoPartial?: TipoArchivoPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tipoArchivoControllerUpdateById(id, tipoArchivoPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {TipoArchivoFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tipoArchivoControllerVistaTipoArchivoEmpresaSeccion(filter?: TipoArchivoFilter1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tipoArchivoControllerVistaTipoArchivoEmpresaSeccion(filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tipoArchivoControllerVistaTipoArchivoEmpresaSeccionCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tipoArchivoControllerVistaTipoArchivoEmpresaSeccionCount(where, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TipoArchivoControllerApi - factory interface
 * @export
 */
export const TipoArchivoControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TipoArchivoControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tipoArchivoControllerCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.tipoArchivoControllerCount(where, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NewTipoArchivo} [newTipoArchivo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tipoArchivoControllerCreate(newTipoArchivo?: NewTipoArchivo, options?: any): AxiosPromise<TipoArchivo> {
            return localVarFp.tipoArchivoControllerCreate(newTipoArchivo, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tipoArchivoControllerDeleteById(id: number, options?: any): AxiosPromise<any> {
            return localVarFp.tipoArchivoControllerDeleteById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {TipoArchivoFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tipoArchivoControllerFind(filter?: TipoArchivoFilter1, options?: any): AxiosPromise<Array<TipoArchivoWithRelations>> {
            return localVarFp.tipoArchivoControllerFind(filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {TipoArchivoFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tipoArchivoControllerFindById(id: number, filter?: TipoArchivoFilter, options?: any): AxiosPromise<TipoArchivoWithRelations> {
            return localVarFp.tipoArchivoControllerFindById(id, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {TipoArchivo} [tipoArchivo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tipoArchivoControllerReplaceById(id: number, tipoArchivo?: TipoArchivo, options?: any): AxiosPromise<any> {
            return localVarFp.tipoArchivoControllerReplaceById(id, tipoArchivo, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {TipoArchivoPartial} [tipoArchivoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tipoArchivoControllerUpdateAll(where?: { [key: string]: object; }, tipoArchivoPartial?: TipoArchivoPartial, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.tipoArchivoControllerUpdateAll(where, tipoArchivoPartial, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {TipoArchivoPartial} [tipoArchivoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tipoArchivoControllerUpdateById(id: number, tipoArchivoPartial?: TipoArchivoPartial, options?: any): AxiosPromise<any> {
            return localVarFp.tipoArchivoControllerUpdateById(id, tipoArchivoPartial, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {TipoArchivoFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tipoArchivoControllerVistaTipoArchivoEmpresaSeccion(filter?: TipoArchivoFilter1, options?: any): AxiosPromise<object> {
            return localVarFp.tipoArchivoControllerVistaTipoArchivoEmpresaSeccion(filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tipoArchivoControllerVistaTipoArchivoEmpresaSeccionCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<object> {
            return localVarFp.tipoArchivoControllerVistaTipoArchivoEmpresaSeccionCount(where, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TipoArchivoControllerApi - object-oriented interface
 * @export
 * @class TipoArchivoControllerApi
 * @extends {BaseAPI}
 */
export class TipoArchivoControllerApi extends BaseAPI {
    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TipoArchivoControllerApi
     */
    public tipoArchivoControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig) {
        return TipoArchivoControllerApiFp(this.configuration).tipoArchivoControllerCount(where, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NewTipoArchivo} [newTipoArchivo] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TipoArchivoControllerApi
     */
    public tipoArchivoControllerCreate(newTipoArchivo?: NewTipoArchivo, options?: AxiosRequestConfig) {
        return TipoArchivoControllerApiFp(this.configuration).tipoArchivoControllerCreate(newTipoArchivo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TipoArchivoControllerApi
     */
    public tipoArchivoControllerDeleteById(id: number, options?: AxiosRequestConfig) {
        return TipoArchivoControllerApiFp(this.configuration).tipoArchivoControllerDeleteById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TipoArchivoFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TipoArchivoControllerApi
     */
    public tipoArchivoControllerFind(filter?: TipoArchivoFilter1, options?: AxiosRequestConfig) {
        return TipoArchivoControllerApiFp(this.configuration).tipoArchivoControllerFind(filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {TipoArchivoFilter} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TipoArchivoControllerApi
     */
    public tipoArchivoControllerFindById(id: number, filter?: TipoArchivoFilter, options?: AxiosRequestConfig) {
        return TipoArchivoControllerApiFp(this.configuration).tipoArchivoControllerFindById(id, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {TipoArchivo} [tipoArchivo] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TipoArchivoControllerApi
     */
    public tipoArchivoControllerReplaceById(id: number, tipoArchivo?: TipoArchivo, options?: AxiosRequestConfig) {
        return TipoArchivoControllerApiFp(this.configuration).tipoArchivoControllerReplaceById(id, tipoArchivo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {TipoArchivoPartial} [tipoArchivoPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TipoArchivoControllerApi
     */
    public tipoArchivoControllerUpdateAll(where?: { [key: string]: object; }, tipoArchivoPartial?: TipoArchivoPartial, options?: AxiosRequestConfig) {
        return TipoArchivoControllerApiFp(this.configuration).tipoArchivoControllerUpdateAll(where, tipoArchivoPartial, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {TipoArchivoPartial} [tipoArchivoPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TipoArchivoControllerApi
     */
    public tipoArchivoControllerUpdateById(id: number, tipoArchivoPartial?: TipoArchivoPartial, options?: AxiosRequestConfig) {
        return TipoArchivoControllerApiFp(this.configuration).tipoArchivoControllerUpdateById(id, tipoArchivoPartial, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TipoArchivoFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TipoArchivoControllerApi
     */
    public tipoArchivoControllerVistaTipoArchivoEmpresaSeccion(filter?: TipoArchivoFilter1, options?: AxiosRequestConfig) {
        return TipoArchivoControllerApiFp(this.configuration).tipoArchivoControllerVistaTipoArchivoEmpresaSeccion(filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TipoArchivoControllerApi
     */
    public tipoArchivoControllerVistaTipoArchivoEmpresaSeccionCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig) {
        return TipoArchivoControllerApiFp(this.configuration).tipoArchivoControllerVistaTipoArchivoEmpresaSeccionCount(where, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TraduccionControllerApi - axios parameter creator
 * @export
 */
export const TraduccionControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [iso] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        traduccionControllerBuscarTraduccion: async (iso?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/buscarTraduccion`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (iso !== undefined) {
                localVarQueryParameter['iso'] = iso;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        traduccionControllerCount: async (where?: { [key: string]: object; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/traducciones/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NewTraduccion} [newTraduccion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        traduccionControllerCreate: async (newTraduccion?: NewTraduccion, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/traducciones`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newTraduccion, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        traduccionControllerDeleteById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('traduccionControllerDeleteById', 'id', id)
            const localVarPath = `/traducciones/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {TraduccionFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        traduccionControllerFind: async (filter?: TraduccionFilter1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/traducciones`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {TraduccionFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        traduccionControllerFindById: async (id: number, filter?: TraduccionFilter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('traduccionControllerFindById', 'id', id)
            const localVarPath = `/traducciones/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {Traduccion} [traduccion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        traduccionControllerReplaceById: async (id: number, traduccion?: Traduccion, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('traduccionControllerReplaceById', 'id', id)
            const localVarPath = `/traducciones/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(traduccion, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {TraduccionPartial} [traduccionPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        traduccionControllerUpdateAll: async (where?: { [key: string]: object; }, traduccionPartial?: TraduccionPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/traducciones`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(traduccionPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {TraduccionPartial} [traduccionPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        traduccionControllerUpdateById: async (id: number, traduccionPartial?: TraduccionPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('traduccionControllerUpdateById', 'id', id)
            const localVarPath = `/traducciones/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(traduccionPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {TraduccionFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        traduccionControllerVistaTraduccionIdioma: async (filter?: TraduccionFilter1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/vistaTraduccionIdioma`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        traduccionControllerVistaTraduccionIdiomaCount: async (where?: { [key: string]: object; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/vistaTraduccionIdiomaCount`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TraduccionControllerApi - functional programming interface
 * @export
 */
export const TraduccionControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TraduccionControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} [iso] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async traduccionControllerBuscarTraduccion(iso?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.traduccionControllerBuscarTraduccion(iso, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async traduccionControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.traduccionControllerCount(where, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {NewTraduccion} [newTraduccion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async traduccionControllerCreate(newTraduccion?: NewTraduccion, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Traduccion>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.traduccionControllerCreate(newTraduccion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async traduccionControllerDeleteById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.traduccionControllerDeleteById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {TraduccionFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async traduccionControllerFind(filter?: TraduccionFilter1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TraduccionWithRelations>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.traduccionControllerFind(filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {TraduccionFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async traduccionControllerFindById(id: number, filter?: TraduccionFilter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TraduccionWithRelations>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.traduccionControllerFindById(id, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {Traduccion} [traduccion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async traduccionControllerReplaceById(id: number, traduccion?: Traduccion, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.traduccionControllerReplaceById(id, traduccion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {TraduccionPartial} [traduccionPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async traduccionControllerUpdateAll(where?: { [key: string]: object; }, traduccionPartial?: TraduccionPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.traduccionControllerUpdateAll(where, traduccionPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {TraduccionPartial} [traduccionPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async traduccionControllerUpdateById(id: number, traduccionPartial?: TraduccionPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.traduccionControllerUpdateById(id, traduccionPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {TraduccionFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async traduccionControllerVistaTraduccionIdioma(filter?: TraduccionFilter1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.traduccionControllerVistaTraduccionIdioma(filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async traduccionControllerVistaTraduccionIdiomaCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.traduccionControllerVistaTraduccionIdiomaCount(where, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TraduccionControllerApi - factory interface
 * @export
 */
export const TraduccionControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TraduccionControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {string} [iso] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        traduccionControllerBuscarTraduccion(iso?: string, options?: any): AxiosPromise<object> {
            return localVarFp.traduccionControllerBuscarTraduccion(iso, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        traduccionControllerCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.traduccionControllerCount(where, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NewTraduccion} [newTraduccion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        traduccionControllerCreate(newTraduccion?: NewTraduccion, options?: any): AxiosPromise<Traduccion> {
            return localVarFp.traduccionControllerCreate(newTraduccion, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        traduccionControllerDeleteById(id: number, options?: any): AxiosPromise<any> {
            return localVarFp.traduccionControllerDeleteById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {TraduccionFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        traduccionControllerFind(filter?: TraduccionFilter1, options?: any): AxiosPromise<Array<TraduccionWithRelations>> {
            return localVarFp.traduccionControllerFind(filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {TraduccionFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        traduccionControllerFindById(id: number, filter?: TraduccionFilter, options?: any): AxiosPromise<TraduccionWithRelations> {
            return localVarFp.traduccionControllerFindById(id, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {Traduccion} [traduccion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        traduccionControllerReplaceById(id: number, traduccion?: Traduccion, options?: any): AxiosPromise<any> {
            return localVarFp.traduccionControllerReplaceById(id, traduccion, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {TraduccionPartial} [traduccionPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        traduccionControllerUpdateAll(where?: { [key: string]: object; }, traduccionPartial?: TraduccionPartial, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.traduccionControllerUpdateAll(where, traduccionPartial, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {TraduccionPartial} [traduccionPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        traduccionControllerUpdateById(id: number, traduccionPartial?: TraduccionPartial, options?: any): AxiosPromise<any> {
            return localVarFp.traduccionControllerUpdateById(id, traduccionPartial, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {TraduccionFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        traduccionControllerVistaTraduccionIdioma(filter?: TraduccionFilter1, options?: any): AxiosPromise<object> {
            return localVarFp.traduccionControllerVistaTraduccionIdioma(filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        traduccionControllerVistaTraduccionIdiomaCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<object> {
            return localVarFp.traduccionControllerVistaTraduccionIdiomaCount(where, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TraduccionControllerApi - object-oriented interface
 * @export
 * @class TraduccionControllerApi
 * @extends {BaseAPI}
 */
export class TraduccionControllerApi extends BaseAPI {
    /**
     * 
     * @param {string} [iso] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TraduccionControllerApi
     */
    public traduccionControllerBuscarTraduccion(iso?: string, options?: AxiosRequestConfig) {
        return TraduccionControllerApiFp(this.configuration).traduccionControllerBuscarTraduccion(iso, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TraduccionControllerApi
     */
    public traduccionControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig) {
        return TraduccionControllerApiFp(this.configuration).traduccionControllerCount(where, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NewTraduccion} [newTraduccion] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TraduccionControllerApi
     */
    public traduccionControllerCreate(newTraduccion?: NewTraduccion, options?: AxiosRequestConfig) {
        return TraduccionControllerApiFp(this.configuration).traduccionControllerCreate(newTraduccion, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TraduccionControllerApi
     */
    public traduccionControllerDeleteById(id: number, options?: AxiosRequestConfig) {
        return TraduccionControllerApiFp(this.configuration).traduccionControllerDeleteById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TraduccionFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TraduccionControllerApi
     */
    public traduccionControllerFind(filter?: TraduccionFilter1, options?: AxiosRequestConfig) {
        return TraduccionControllerApiFp(this.configuration).traduccionControllerFind(filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {TraduccionFilter} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TraduccionControllerApi
     */
    public traduccionControllerFindById(id: number, filter?: TraduccionFilter, options?: AxiosRequestConfig) {
        return TraduccionControllerApiFp(this.configuration).traduccionControllerFindById(id, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {Traduccion} [traduccion] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TraduccionControllerApi
     */
    public traduccionControllerReplaceById(id: number, traduccion?: Traduccion, options?: AxiosRequestConfig) {
        return TraduccionControllerApiFp(this.configuration).traduccionControllerReplaceById(id, traduccion, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {TraduccionPartial} [traduccionPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TraduccionControllerApi
     */
    public traduccionControllerUpdateAll(where?: { [key: string]: object; }, traduccionPartial?: TraduccionPartial, options?: AxiosRequestConfig) {
        return TraduccionControllerApiFp(this.configuration).traduccionControllerUpdateAll(where, traduccionPartial, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {TraduccionPartial} [traduccionPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TraduccionControllerApi
     */
    public traduccionControllerUpdateById(id: number, traduccionPartial?: TraduccionPartial, options?: AxiosRequestConfig) {
        return TraduccionControllerApiFp(this.configuration).traduccionControllerUpdateById(id, traduccionPartial, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TraduccionFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TraduccionControllerApi
     */
    public traduccionControllerVistaTraduccionIdioma(filter?: TraduccionFilter1, options?: AxiosRequestConfig) {
        return TraduccionControllerApiFp(this.configuration).traduccionControllerVistaTraduccionIdioma(filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TraduccionControllerApi
     */
    public traduccionControllerVistaTraduccionIdiomaCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig) {
        return TraduccionControllerApiFp(this.configuration).traduccionControllerVistaTraduccionIdiomaCount(where, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UsuarioCredencialesControllerApi - axios parameter creator
 * @export
 */
export const UsuarioCredencialesControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuarioCredencialesControllerCount: async (where?: { [key: string]: object; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/usuario-credenciales/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NewUsuarioCredenciales} [newUsuarioCredenciales] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuarioCredencialesControllerCreate: async (newUsuarioCredenciales?: NewUsuarioCredenciales, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/usuario-credenciales`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newUsuarioCredenciales, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuarioCredencialesControllerDeleteById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usuarioCredencialesControllerDeleteById', 'id', id)
            const localVarPath = `/usuario-credenciales/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UsuarioCredencialesFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuarioCredencialesControllerFind: async (filter?: UsuarioCredencialesFilter1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/usuario-credenciales`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {UsuarioCredencialesFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuarioCredencialesControllerFindById: async (id: number, filter?: UsuarioCredencialesFilter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usuarioCredencialesControllerFindById', 'id', id)
            const localVarPath = `/usuario-credenciales/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {UsuarioCredenciales} [usuarioCredenciales] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuarioCredencialesControllerReplaceById: async (id: number, usuarioCredenciales?: UsuarioCredenciales, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usuarioCredencialesControllerReplaceById', 'id', id)
            const localVarPath = `/usuario-credenciales/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(usuarioCredenciales, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {UsuarioCredencialesPartial} [usuarioCredencialesPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuarioCredencialesControllerUpdateAll: async (where?: { [key: string]: object; }, usuarioCredencialesPartial?: UsuarioCredencialesPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/usuario-credenciales`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(usuarioCredencialesPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {UsuarioCredencialesPartial} [usuarioCredencialesPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuarioCredencialesControllerUpdateById: async (id: number, usuarioCredencialesPartial?: UsuarioCredencialesPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usuarioCredencialesControllerUpdateById', 'id', id)
            const localVarPath = `/usuario-credenciales/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(usuarioCredencialesPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsuarioCredencialesControllerApi - functional programming interface
 * @export
 */
export const UsuarioCredencialesControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsuarioCredencialesControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usuarioCredencialesControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usuarioCredencialesControllerCount(where, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {NewUsuarioCredenciales} [newUsuarioCredenciales] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usuarioCredencialesControllerCreate(newUsuarioCredenciales?: NewUsuarioCredenciales, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsuarioCredenciales>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usuarioCredencialesControllerCreate(newUsuarioCredenciales, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usuarioCredencialesControllerDeleteById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usuarioCredencialesControllerDeleteById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {UsuarioCredencialesFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usuarioCredencialesControllerFind(filter?: UsuarioCredencialesFilter1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UsuarioCredencialesWithRelations>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usuarioCredencialesControllerFind(filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {UsuarioCredencialesFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usuarioCredencialesControllerFindById(id: number, filter?: UsuarioCredencialesFilter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsuarioCredencialesWithRelations>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usuarioCredencialesControllerFindById(id, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {UsuarioCredenciales} [usuarioCredenciales] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usuarioCredencialesControllerReplaceById(id: number, usuarioCredenciales?: UsuarioCredenciales, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usuarioCredencialesControllerReplaceById(id, usuarioCredenciales, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {UsuarioCredencialesPartial} [usuarioCredencialesPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usuarioCredencialesControllerUpdateAll(where?: { [key: string]: object; }, usuarioCredencialesPartial?: UsuarioCredencialesPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usuarioCredencialesControllerUpdateAll(where, usuarioCredencialesPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {UsuarioCredencialesPartial} [usuarioCredencialesPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usuarioCredencialesControllerUpdateById(id: number, usuarioCredencialesPartial?: UsuarioCredencialesPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usuarioCredencialesControllerUpdateById(id, usuarioCredencialesPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UsuarioCredencialesControllerApi - factory interface
 * @export
 */
export const UsuarioCredencialesControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsuarioCredencialesControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuarioCredencialesControllerCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.usuarioCredencialesControllerCount(where, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NewUsuarioCredenciales} [newUsuarioCredenciales] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuarioCredencialesControllerCreate(newUsuarioCredenciales?: NewUsuarioCredenciales, options?: any): AxiosPromise<UsuarioCredenciales> {
            return localVarFp.usuarioCredencialesControllerCreate(newUsuarioCredenciales, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuarioCredencialesControllerDeleteById(id: number, options?: any): AxiosPromise<any> {
            return localVarFp.usuarioCredencialesControllerDeleteById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UsuarioCredencialesFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuarioCredencialesControllerFind(filter?: UsuarioCredencialesFilter1, options?: any): AxiosPromise<Array<UsuarioCredencialesWithRelations>> {
            return localVarFp.usuarioCredencialesControllerFind(filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {UsuarioCredencialesFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuarioCredencialesControllerFindById(id: number, filter?: UsuarioCredencialesFilter, options?: any): AxiosPromise<UsuarioCredencialesWithRelations> {
            return localVarFp.usuarioCredencialesControllerFindById(id, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {UsuarioCredenciales} [usuarioCredenciales] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuarioCredencialesControllerReplaceById(id: number, usuarioCredenciales?: UsuarioCredenciales, options?: any): AxiosPromise<any> {
            return localVarFp.usuarioCredencialesControllerReplaceById(id, usuarioCredenciales, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {UsuarioCredencialesPartial} [usuarioCredencialesPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuarioCredencialesControllerUpdateAll(where?: { [key: string]: object; }, usuarioCredencialesPartial?: UsuarioCredencialesPartial, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.usuarioCredencialesControllerUpdateAll(where, usuarioCredencialesPartial, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {UsuarioCredencialesPartial} [usuarioCredencialesPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuarioCredencialesControllerUpdateById(id: number, usuarioCredencialesPartial?: UsuarioCredencialesPartial, options?: any): AxiosPromise<any> {
            return localVarFp.usuarioCredencialesControllerUpdateById(id, usuarioCredencialesPartial, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UsuarioCredencialesControllerApi - object-oriented interface
 * @export
 * @class UsuarioCredencialesControllerApi
 * @extends {BaseAPI}
 */
export class UsuarioCredencialesControllerApi extends BaseAPI {
    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsuarioCredencialesControllerApi
     */
    public usuarioCredencialesControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig) {
        return UsuarioCredencialesControllerApiFp(this.configuration).usuarioCredencialesControllerCount(where, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NewUsuarioCredenciales} [newUsuarioCredenciales] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsuarioCredencialesControllerApi
     */
    public usuarioCredencialesControllerCreate(newUsuarioCredenciales?: NewUsuarioCredenciales, options?: AxiosRequestConfig) {
        return UsuarioCredencialesControllerApiFp(this.configuration).usuarioCredencialesControllerCreate(newUsuarioCredenciales, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsuarioCredencialesControllerApi
     */
    public usuarioCredencialesControllerDeleteById(id: number, options?: AxiosRequestConfig) {
        return UsuarioCredencialesControllerApiFp(this.configuration).usuarioCredencialesControllerDeleteById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UsuarioCredencialesFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsuarioCredencialesControllerApi
     */
    public usuarioCredencialesControllerFind(filter?: UsuarioCredencialesFilter1, options?: AxiosRequestConfig) {
        return UsuarioCredencialesControllerApiFp(this.configuration).usuarioCredencialesControllerFind(filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {UsuarioCredencialesFilter} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsuarioCredencialesControllerApi
     */
    public usuarioCredencialesControllerFindById(id: number, filter?: UsuarioCredencialesFilter, options?: AxiosRequestConfig) {
        return UsuarioCredencialesControllerApiFp(this.configuration).usuarioCredencialesControllerFindById(id, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {UsuarioCredenciales} [usuarioCredenciales] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsuarioCredencialesControllerApi
     */
    public usuarioCredencialesControllerReplaceById(id: number, usuarioCredenciales?: UsuarioCredenciales, options?: AxiosRequestConfig) {
        return UsuarioCredencialesControllerApiFp(this.configuration).usuarioCredencialesControllerReplaceById(id, usuarioCredenciales, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {UsuarioCredencialesPartial} [usuarioCredencialesPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsuarioCredencialesControllerApi
     */
    public usuarioCredencialesControllerUpdateAll(where?: { [key: string]: object; }, usuarioCredencialesPartial?: UsuarioCredencialesPartial, options?: AxiosRequestConfig) {
        return UsuarioCredencialesControllerApiFp(this.configuration).usuarioCredencialesControllerUpdateAll(where, usuarioCredencialesPartial, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {UsuarioCredencialesPartial} [usuarioCredencialesPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsuarioCredencialesControllerApi
     */
    public usuarioCredencialesControllerUpdateById(id: number, usuarioCredencialesPartial?: UsuarioCredencialesPartial, options?: AxiosRequestConfig) {
        return UsuarioCredencialesControllerApiFp(this.configuration).usuarioCredencialesControllerUpdateById(id, usuarioCredencialesPartial, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UsuarioPasswordHistoricoControllerApi - axios parameter creator
 * @export
 */
export const UsuarioPasswordHistoricoControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuarioPasswordHistoricoControllerCount: async (where?: { [key: string]: object; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/usuario-password-historicos/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NewUsuarioPasswordHistorico} [newUsuarioPasswordHistorico] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuarioPasswordHistoricoControllerCreate: async (newUsuarioPasswordHistorico?: NewUsuarioPasswordHistorico, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/usuario-password-historicos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newUsuarioPasswordHistorico, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuarioPasswordHistoricoControllerDeleteById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usuarioPasswordHistoricoControllerDeleteById', 'id', id)
            const localVarPath = `/usuario-password-historicos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UsuarioPasswordHistoricoFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuarioPasswordHistoricoControllerFind: async (filter?: UsuarioPasswordHistoricoFilter1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/usuario-password-historicos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {UsuarioPasswordHistoricoFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuarioPasswordHistoricoControllerFindById: async (id: number, filter?: UsuarioPasswordHistoricoFilter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usuarioPasswordHistoricoControllerFindById', 'id', id)
            const localVarPath = `/usuario-password-historicos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {UsuarioPasswordHistorico} [usuarioPasswordHistorico] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuarioPasswordHistoricoControllerReplaceById: async (id: number, usuarioPasswordHistorico?: UsuarioPasswordHistorico, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usuarioPasswordHistoricoControllerReplaceById', 'id', id)
            const localVarPath = `/usuario-password-historicos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(usuarioPasswordHistorico, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {UsuarioPasswordHistoricoPartial} [usuarioPasswordHistoricoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuarioPasswordHistoricoControllerUpdateAll: async (where?: { [key: string]: object; }, usuarioPasswordHistoricoPartial?: UsuarioPasswordHistoricoPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/usuario-password-historicos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(usuarioPasswordHistoricoPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {UsuarioPasswordHistoricoPartial} [usuarioPasswordHistoricoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuarioPasswordHistoricoControllerUpdateById: async (id: number, usuarioPasswordHistoricoPartial?: UsuarioPasswordHistoricoPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usuarioPasswordHistoricoControllerUpdateById', 'id', id)
            const localVarPath = `/usuario-password-historicos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(usuarioPasswordHistoricoPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsuarioPasswordHistoricoControllerApi - functional programming interface
 * @export
 */
export const UsuarioPasswordHistoricoControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsuarioPasswordHistoricoControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usuarioPasswordHistoricoControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usuarioPasswordHistoricoControllerCount(where, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {NewUsuarioPasswordHistorico} [newUsuarioPasswordHistorico] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usuarioPasswordHistoricoControllerCreate(newUsuarioPasswordHistorico?: NewUsuarioPasswordHistorico, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsuarioPasswordHistorico>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usuarioPasswordHistoricoControllerCreate(newUsuarioPasswordHistorico, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usuarioPasswordHistoricoControllerDeleteById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usuarioPasswordHistoricoControllerDeleteById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {UsuarioPasswordHistoricoFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usuarioPasswordHistoricoControllerFind(filter?: UsuarioPasswordHistoricoFilter1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UsuarioPasswordHistoricoWithRelations>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usuarioPasswordHistoricoControllerFind(filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {UsuarioPasswordHistoricoFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usuarioPasswordHistoricoControllerFindById(id: number, filter?: UsuarioPasswordHistoricoFilter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsuarioPasswordHistoricoWithRelations>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usuarioPasswordHistoricoControllerFindById(id, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {UsuarioPasswordHistorico} [usuarioPasswordHistorico] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usuarioPasswordHistoricoControllerReplaceById(id: number, usuarioPasswordHistorico?: UsuarioPasswordHistorico, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usuarioPasswordHistoricoControllerReplaceById(id, usuarioPasswordHistorico, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {UsuarioPasswordHistoricoPartial} [usuarioPasswordHistoricoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usuarioPasswordHistoricoControllerUpdateAll(where?: { [key: string]: object; }, usuarioPasswordHistoricoPartial?: UsuarioPasswordHistoricoPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usuarioPasswordHistoricoControllerUpdateAll(where, usuarioPasswordHistoricoPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {UsuarioPasswordHistoricoPartial} [usuarioPasswordHistoricoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usuarioPasswordHistoricoControllerUpdateById(id: number, usuarioPasswordHistoricoPartial?: UsuarioPasswordHistoricoPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usuarioPasswordHistoricoControllerUpdateById(id, usuarioPasswordHistoricoPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UsuarioPasswordHistoricoControllerApi - factory interface
 * @export
 */
export const UsuarioPasswordHistoricoControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsuarioPasswordHistoricoControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuarioPasswordHistoricoControllerCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.usuarioPasswordHistoricoControllerCount(where, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NewUsuarioPasswordHistorico} [newUsuarioPasswordHistorico] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuarioPasswordHistoricoControllerCreate(newUsuarioPasswordHistorico?: NewUsuarioPasswordHistorico, options?: any): AxiosPromise<UsuarioPasswordHistorico> {
            return localVarFp.usuarioPasswordHistoricoControllerCreate(newUsuarioPasswordHistorico, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuarioPasswordHistoricoControllerDeleteById(id: number, options?: any): AxiosPromise<any> {
            return localVarFp.usuarioPasswordHistoricoControllerDeleteById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UsuarioPasswordHistoricoFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuarioPasswordHistoricoControllerFind(filter?: UsuarioPasswordHistoricoFilter1, options?: any): AxiosPromise<Array<UsuarioPasswordHistoricoWithRelations>> {
            return localVarFp.usuarioPasswordHistoricoControllerFind(filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {UsuarioPasswordHistoricoFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuarioPasswordHistoricoControllerFindById(id: number, filter?: UsuarioPasswordHistoricoFilter, options?: any): AxiosPromise<UsuarioPasswordHistoricoWithRelations> {
            return localVarFp.usuarioPasswordHistoricoControllerFindById(id, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {UsuarioPasswordHistorico} [usuarioPasswordHistorico] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuarioPasswordHistoricoControllerReplaceById(id: number, usuarioPasswordHistorico?: UsuarioPasswordHistorico, options?: any): AxiosPromise<any> {
            return localVarFp.usuarioPasswordHistoricoControllerReplaceById(id, usuarioPasswordHistorico, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {UsuarioPasswordHistoricoPartial} [usuarioPasswordHistoricoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuarioPasswordHistoricoControllerUpdateAll(where?: { [key: string]: object; }, usuarioPasswordHistoricoPartial?: UsuarioPasswordHistoricoPartial, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.usuarioPasswordHistoricoControllerUpdateAll(where, usuarioPasswordHistoricoPartial, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {UsuarioPasswordHistoricoPartial} [usuarioPasswordHistoricoPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuarioPasswordHistoricoControllerUpdateById(id: number, usuarioPasswordHistoricoPartial?: UsuarioPasswordHistoricoPartial, options?: any): AxiosPromise<any> {
            return localVarFp.usuarioPasswordHistoricoControllerUpdateById(id, usuarioPasswordHistoricoPartial, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UsuarioPasswordHistoricoControllerApi - object-oriented interface
 * @export
 * @class UsuarioPasswordHistoricoControllerApi
 * @extends {BaseAPI}
 */
export class UsuarioPasswordHistoricoControllerApi extends BaseAPI {
    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsuarioPasswordHistoricoControllerApi
     */
    public usuarioPasswordHistoricoControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig) {
        return UsuarioPasswordHistoricoControllerApiFp(this.configuration).usuarioPasswordHistoricoControllerCount(where, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NewUsuarioPasswordHistorico} [newUsuarioPasswordHistorico] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsuarioPasswordHistoricoControllerApi
     */
    public usuarioPasswordHistoricoControllerCreate(newUsuarioPasswordHistorico?: NewUsuarioPasswordHistorico, options?: AxiosRequestConfig) {
        return UsuarioPasswordHistoricoControllerApiFp(this.configuration).usuarioPasswordHistoricoControllerCreate(newUsuarioPasswordHistorico, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsuarioPasswordHistoricoControllerApi
     */
    public usuarioPasswordHistoricoControllerDeleteById(id: number, options?: AxiosRequestConfig) {
        return UsuarioPasswordHistoricoControllerApiFp(this.configuration).usuarioPasswordHistoricoControllerDeleteById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UsuarioPasswordHistoricoFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsuarioPasswordHistoricoControllerApi
     */
    public usuarioPasswordHistoricoControllerFind(filter?: UsuarioPasswordHistoricoFilter1, options?: AxiosRequestConfig) {
        return UsuarioPasswordHistoricoControllerApiFp(this.configuration).usuarioPasswordHistoricoControllerFind(filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {UsuarioPasswordHistoricoFilter} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsuarioPasswordHistoricoControllerApi
     */
    public usuarioPasswordHistoricoControllerFindById(id: number, filter?: UsuarioPasswordHistoricoFilter, options?: AxiosRequestConfig) {
        return UsuarioPasswordHistoricoControllerApiFp(this.configuration).usuarioPasswordHistoricoControllerFindById(id, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {UsuarioPasswordHistorico} [usuarioPasswordHistorico] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsuarioPasswordHistoricoControllerApi
     */
    public usuarioPasswordHistoricoControllerReplaceById(id: number, usuarioPasswordHistorico?: UsuarioPasswordHistorico, options?: AxiosRequestConfig) {
        return UsuarioPasswordHistoricoControllerApiFp(this.configuration).usuarioPasswordHistoricoControllerReplaceById(id, usuarioPasswordHistorico, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {UsuarioPasswordHistoricoPartial} [usuarioPasswordHistoricoPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsuarioPasswordHistoricoControllerApi
     */
    public usuarioPasswordHistoricoControllerUpdateAll(where?: { [key: string]: object; }, usuarioPasswordHistoricoPartial?: UsuarioPasswordHistoricoPartial, options?: AxiosRequestConfig) {
        return UsuarioPasswordHistoricoControllerApiFp(this.configuration).usuarioPasswordHistoricoControllerUpdateAll(where, usuarioPasswordHistoricoPartial, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {UsuarioPasswordHistoricoPartial} [usuarioPasswordHistoricoPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsuarioPasswordHistoricoControllerApi
     */
    public usuarioPasswordHistoricoControllerUpdateById(id: number, usuarioPasswordHistoricoPartial?: UsuarioPasswordHistoricoPartial, options?: AxiosRequestConfig) {
        return UsuarioPasswordHistoricoControllerApiFp(this.configuration).usuarioPasswordHistoricoControllerUpdateById(id, usuarioPasswordHistoricoPartial, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UsuariosControllerApi - axios parameter creator
 * @export
 */
export const UsuariosControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuariosControllerCount: async (where?: { [key: string]: object; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/usuarios/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NewUsuario} [newUsuario] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuariosControllerCreate: async (newUsuario?: NewUsuario, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/usuarios`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newUsuario, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuariosControllerDeleteById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usuariosControllerDeleteById', 'id', id)
            const localVarPath = `/usuarios/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UsuarioFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuariosControllerFind: async (filter?: UsuarioFilter1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/usuarios`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {UsuarioFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuariosControllerFindById: async (id: number, filter?: UsuarioFilter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usuariosControllerFindById', 'id', id)
            const localVarPath = `/usuarios/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {InlineObject5} inlineObject5 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuariosControllerLogin: async (inlineObject5: InlineObject5, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inlineObject5' is not null or undefined
            assertParamExists('usuariosControllerLogin', 'inlineObject5', inlineObject5)
            const localVarPath = `/usuarios/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inlineObject5, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuariosControllerObtenerUsuarioAvatar: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usuariosControllerObtenerUsuarioAvatar', 'id', id)
            const localVarPath = `/obtenerUsuarioAvatar/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {InlineObject6} inlineObject6 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuariosControllerRecuperarPassword: async (inlineObject6: InlineObject6, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inlineObject6' is not null or undefined
            assertParamExists('usuariosControllerRecuperarPassword', 'inlineObject6', inlineObject6)
            const localVarPath = `/usuarios/recuperarPassword`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inlineObject6, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {InlineObject7} [inlineObject7] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuariosControllerRegister: async (inlineObject7?: InlineObject7, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/usuarios/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inlineObject7, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {Usuario} [usuario] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuariosControllerReplaceById: async (id: number, usuario?: Usuario, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usuariosControllerReplaceById', 'id', id)
            const localVarPath = `/usuarios/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(usuario, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {UsuarioPartial} [usuarioPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuariosControllerUpdateAll: async (where?: { [key: string]: object; }, usuarioPartial?: UsuarioPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/usuarios`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(usuarioPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {UsuarioPartial} [usuarioPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuariosControllerUpdateById: async (id: number, usuarioPartial?: UsuarioPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usuariosControllerUpdateById', 'id', id)
            const localVarPath = `/usuarios/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(usuarioPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} idUsuario 
         * @param {UsuarioCredencialesPartial} [usuarioCredencialesPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuariosControllerUpdateByIdCredenciales: async (idUsuario: number, usuarioCredencialesPartial?: UsuarioCredencialesPartial, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idUsuario' is not null or undefined
            assertParamExists('usuariosControllerUpdateByIdCredenciales', 'idUsuario', idUsuario)
            const localVarPath = `/usuarioCredenciales/{idUsuario}`
                .replace(`{${"idUsuario"}}`, encodeURIComponent(String(idUsuario)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(usuarioCredencialesPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} codigoRecuperacion 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuariosControllerValidarCodigoRecuperacion: async (codigoRecuperacion: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'codigoRecuperacion' is not null or undefined
            assertParamExists('usuariosControllerValidarCodigoRecuperacion', 'codigoRecuperacion', codigoRecuperacion)
            const localVarPath = `/usuarios/validarCodigoRecuperacion/{codigoRecuperacion}`
                .replace(`{${"codigoRecuperacion"}}`, encodeURIComponent(String(codigoRecuperacion)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UsuarioFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuariosControllerVistaEmpresaRolUsuario: async (filter?: UsuarioFilter1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/vistaEmpresaRolUsuario`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuariosControllerVistaEmpresaRolUsuarioCount: async (where?: { [key: string]: object; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/vistaEmpresaRolUsuarioCount`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsuariosControllerApi - functional programming interface
 * @export
 */
export const UsuariosControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsuariosControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usuariosControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usuariosControllerCount(where, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {NewUsuario} [newUsuario] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usuariosControllerCreate(newUsuario?: NewUsuario, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Usuario>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usuariosControllerCreate(newUsuario, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usuariosControllerDeleteById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usuariosControllerDeleteById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {UsuarioFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usuariosControllerFind(filter?: UsuarioFilter1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UsuarioWithRelations>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usuariosControllerFind(filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {UsuarioFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usuariosControllerFindById(id: number, filter?: UsuarioFilter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsuarioWithRelations>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usuariosControllerFindById(id, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {InlineObject5} inlineObject5 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usuariosControllerLogin(inlineObject5: InlineObject5, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usuariosControllerLogin(inlineObject5, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usuariosControllerObtenerUsuarioAvatar(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usuariosControllerObtenerUsuarioAvatar(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {InlineObject6} inlineObject6 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usuariosControllerRecuperarPassword(inlineObject6: InlineObject6, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usuariosControllerRecuperarPassword(inlineObject6, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {InlineObject7} [inlineObject7] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usuariosControllerRegister(inlineObject7?: InlineObject7, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2001>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usuariosControllerRegister(inlineObject7, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {Usuario} [usuario] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usuariosControllerReplaceById(id: number, usuario?: Usuario, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usuariosControllerReplaceById(id, usuario, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {UsuarioPartial} [usuarioPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usuariosControllerUpdateAll(where?: { [key: string]: object; }, usuarioPartial?: UsuarioPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usuariosControllerUpdateAll(where, usuarioPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {UsuarioPartial} [usuarioPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usuariosControllerUpdateById(id: number, usuarioPartial?: UsuarioPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usuariosControllerUpdateById(id, usuarioPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} idUsuario 
         * @param {UsuarioCredencialesPartial} [usuarioCredencialesPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usuariosControllerUpdateByIdCredenciales(idUsuario: number, usuarioCredencialesPartial?: UsuarioCredencialesPartial, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usuariosControllerUpdateByIdCredenciales(idUsuario, usuarioCredencialesPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} codigoRecuperacion 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usuariosControllerValidarCodigoRecuperacion(codigoRecuperacion: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usuariosControllerValidarCodigoRecuperacion(codigoRecuperacion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {UsuarioFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usuariosControllerVistaEmpresaRolUsuario(filter?: UsuarioFilter1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usuariosControllerVistaEmpresaRolUsuario(filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usuariosControllerVistaEmpresaRolUsuarioCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usuariosControllerVistaEmpresaRolUsuarioCount(where, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UsuariosControllerApi - factory interface
 * @export
 */
export const UsuariosControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsuariosControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuariosControllerCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.usuariosControllerCount(where, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NewUsuario} [newUsuario] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuariosControllerCreate(newUsuario?: NewUsuario, options?: any): AxiosPromise<Usuario> {
            return localVarFp.usuariosControllerCreate(newUsuario, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuariosControllerDeleteById(id: number, options?: any): AxiosPromise<any> {
            return localVarFp.usuariosControllerDeleteById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UsuarioFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuariosControllerFind(filter?: UsuarioFilter1, options?: any): AxiosPromise<Array<UsuarioWithRelations>> {
            return localVarFp.usuariosControllerFind(filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {UsuarioFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuariosControllerFindById(id: number, filter?: UsuarioFilter, options?: any): AxiosPromise<UsuarioWithRelations> {
            return localVarFp.usuariosControllerFindById(id, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {InlineObject5} inlineObject5 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuariosControllerLogin(inlineObject5: InlineObject5, options?: any): AxiosPromise<InlineResponse200> {
            return localVarFp.usuariosControllerLogin(inlineObject5, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuariosControllerObtenerUsuarioAvatar(id: number, options?: any): AxiosPromise<object> {
            return localVarFp.usuariosControllerObtenerUsuarioAvatar(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {InlineObject6} inlineObject6 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuariosControllerRecuperarPassword(inlineObject6: InlineObject6, options?: any): AxiosPromise<void> {
            return localVarFp.usuariosControllerRecuperarPassword(inlineObject6, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {InlineObject7} [inlineObject7] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuariosControllerRegister(inlineObject7?: InlineObject7, options?: any): AxiosPromise<InlineResponse2001> {
            return localVarFp.usuariosControllerRegister(inlineObject7, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {Usuario} [usuario] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuariosControllerReplaceById(id: number, usuario?: Usuario, options?: any): AxiosPromise<any> {
            return localVarFp.usuariosControllerReplaceById(id, usuario, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {UsuarioPartial} [usuarioPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuariosControllerUpdateAll(where?: { [key: string]: object; }, usuarioPartial?: UsuarioPartial, options?: any): AxiosPromise<LoopbackCount> {
            return localVarFp.usuariosControllerUpdateAll(where, usuarioPartial, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {UsuarioPartial} [usuarioPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuariosControllerUpdateById(id: number, usuarioPartial?: UsuarioPartial, options?: any): AxiosPromise<any> {
            return localVarFp.usuariosControllerUpdateById(id, usuarioPartial, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} idUsuario 
         * @param {UsuarioCredencialesPartial} [usuarioCredencialesPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuariosControllerUpdateByIdCredenciales(idUsuario: number, usuarioCredencialesPartial?: UsuarioCredencialesPartial, options?: any): AxiosPromise<any> {
            return localVarFp.usuariosControllerUpdateByIdCredenciales(idUsuario, usuarioCredencialesPartial, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} codigoRecuperacion 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuariosControllerValidarCodigoRecuperacion(codigoRecuperacion: number, options?: any): AxiosPromise<number> {
            return localVarFp.usuariosControllerValidarCodigoRecuperacion(codigoRecuperacion, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UsuarioFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuariosControllerVistaEmpresaRolUsuario(filter?: UsuarioFilter1, options?: any): AxiosPromise<object> {
            return localVarFp.usuariosControllerVistaEmpresaRolUsuario(filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuariosControllerVistaEmpresaRolUsuarioCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<object> {
            return localVarFp.usuariosControllerVistaEmpresaRolUsuarioCount(where, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UsuariosControllerApi - object-oriented interface
 * @export
 * @class UsuariosControllerApi
 * @extends {BaseAPI}
 */
export class UsuariosControllerApi extends BaseAPI {
    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsuariosControllerApi
     */
    public usuariosControllerCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig) {
        return UsuariosControllerApiFp(this.configuration).usuariosControllerCount(where, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NewUsuario} [newUsuario] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsuariosControllerApi
     */
    public usuariosControllerCreate(newUsuario?: NewUsuario, options?: AxiosRequestConfig) {
        return UsuariosControllerApiFp(this.configuration).usuariosControllerCreate(newUsuario, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsuariosControllerApi
     */
    public usuariosControllerDeleteById(id: number, options?: AxiosRequestConfig) {
        return UsuariosControllerApiFp(this.configuration).usuariosControllerDeleteById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UsuarioFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsuariosControllerApi
     */
    public usuariosControllerFind(filter?: UsuarioFilter1, options?: AxiosRequestConfig) {
        return UsuariosControllerApiFp(this.configuration).usuariosControllerFind(filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {UsuarioFilter} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsuariosControllerApi
     */
    public usuariosControllerFindById(id: number, filter?: UsuarioFilter, options?: AxiosRequestConfig) {
        return UsuariosControllerApiFp(this.configuration).usuariosControllerFindById(id, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {InlineObject5} inlineObject5 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsuariosControllerApi
     */
    public usuariosControllerLogin(inlineObject5: InlineObject5, options?: AxiosRequestConfig) {
        return UsuariosControllerApiFp(this.configuration).usuariosControllerLogin(inlineObject5, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsuariosControllerApi
     */
    public usuariosControllerObtenerUsuarioAvatar(id: number, options?: AxiosRequestConfig) {
        return UsuariosControllerApiFp(this.configuration).usuariosControllerObtenerUsuarioAvatar(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {InlineObject6} inlineObject6 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsuariosControllerApi
     */
    public usuariosControllerRecuperarPassword(inlineObject6: InlineObject6, options?: AxiosRequestConfig) {
        return UsuariosControllerApiFp(this.configuration).usuariosControllerRecuperarPassword(inlineObject6, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {InlineObject7} [inlineObject7] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsuariosControllerApi
     */
    public usuariosControllerRegister(inlineObject7?: InlineObject7, options?: AxiosRequestConfig) {
        return UsuariosControllerApiFp(this.configuration).usuariosControllerRegister(inlineObject7, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {Usuario} [usuario] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsuariosControllerApi
     */
    public usuariosControllerReplaceById(id: number, usuario?: Usuario, options?: AxiosRequestConfig) {
        return UsuariosControllerApiFp(this.configuration).usuariosControllerReplaceById(id, usuario, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {UsuarioPartial} [usuarioPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsuariosControllerApi
     */
    public usuariosControllerUpdateAll(where?: { [key: string]: object; }, usuarioPartial?: UsuarioPartial, options?: AxiosRequestConfig) {
        return UsuariosControllerApiFp(this.configuration).usuariosControllerUpdateAll(where, usuarioPartial, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {UsuarioPartial} [usuarioPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsuariosControllerApi
     */
    public usuariosControllerUpdateById(id: number, usuarioPartial?: UsuarioPartial, options?: AxiosRequestConfig) {
        return UsuariosControllerApiFp(this.configuration).usuariosControllerUpdateById(id, usuarioPartial, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} idUsuario 
     * @param {UsuarioCredencialesPartial} [usuarioCredencialesPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsuariosControllerApi
     */
    public usuariosControllerUpdateByIdCredenciales(idUsuario: number, usuarioCredencialesPartial?: UsuarioCredencialesPartial, options?: AxiosRequestConfig) {
        return UsuariosControllerApiFp(this.configuration).usuariosControllerUpdateByIdCredenciales(idUsuario, usuarioCredencialesPartial, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} codigoRecuperacion 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsuariosControllerApi
     */
    public usuariosControllerValidarCodigoRecuperacion(codigoRecuperacion: number, options?: AxiosRequestConfig) {
        return UsuariosControllerApiFp(this.configuration).usuariosControllerValidarCodigoRecuperacion(codigoRecuperacion, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UsuarioFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsuariosControllerApi
     */
    public usuariosControllerVistaEmpresaRolUsuario(filter?: UsuarioFilter1, options?: AxiosRequestConfig) {
        return UsuariosControllerApiFp(this.configuration).usuariosControllerVistaEmpresaRolUsuario(filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsuariosControllerApi
     */
    public usuariosControllerVistaEmpresaRolUsuarioCount(where?: { [key: string]: object; }, options?: AxiosRequestConfig) {
        return UsuariosControllerApiFp(this.configuration).usuariosControllerVistaEmpresaRolUsuarioCount(where, options).then((request) => request(this.axios, this.basePath));
    }
}


